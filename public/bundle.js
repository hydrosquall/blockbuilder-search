!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=21)}([function(e,t,n){"use strict";e.exports=n(25)},function(e,t,n){"use strict";n.r(t);var r=n(18),o="object"==typeof self&&self&&self.Object===Object&&self,i=(r.a||o||Function("return this")()).Symbol,a=Object.prototype,u=a.hasOwnProperty,l=a.toString,c=i?i.toStringTag:void 0;var s=function(e){var t=u.call(e,c),n=e[c];try{e[c]=void 0;var r=!0}catch(e){}var o=l.call(e);return r&&(t?e[c]=n:delete e[c]),o},f=Object.prototype.toString;var p=function(e){return f.call(e)},d="[object Null]",h="[object Undefined]",v=i?i.toStringTag:void 0;var g=function(e){return null==e?void 0===e?h:d:v&&v in Object(e)?s(e):p(e)};var m=function(e,t){return function(n){return e(t(n))}}(Object.getPrototypeOf,Object);var y=function(e){return null!=e&&"object"==typeof e},b="[object Object]",x=Function.prototype,w=Object.prototype,_=x.toString,k=w.hasOwnProperty,E=_.call(Object);var S=function(e){if(!y(e)||g(e)!=b)return!1;var t=m(e);if(null===t)return!0;var n=k.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&_.call(n)==E},M=n(8),T={INIT:"@@redux/INIT"};function C(e,t,n){var r;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(C)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,a=[],u=a,l=!1;function c(){u===a&&(u=a.slice())}function s(){return i}function f(e){if("function"!=typeof e)throw new Error("Expected listener to be a function.");var t=!0;return c(),u.push(e),function(){if(t){t=!1,c();var n=u.indexOf(e);u.splice(n,1)}}}function p(e){if(!S(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(l)throw new Error("Reducers may not dispatch actions.");try{l=!0,i=o(i,e)}finally{l=!1}for(var t=a=u,n=0;n<t.length;n++){(0,t[n])()}return e}return p({type:T.INIT}),(r={dispatch:p,subscribe:f,getState:s,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,p({type:T.INIT})}})[M.a]=function(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[M.a]=function(){return this},e},r}function P(e,t){var n=t&&t.type;return"Given action "+(n&&'"'+n.toString()+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function O(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i=Object.keys(n);var a=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:T.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+T.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){a=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(a)throw a;for(var r=!1,o={},u=0;u<i.length;u++){var l=i[u],c=n[l],s=e[l],f=c(s,t);if(void 0===f){var p=P(l,t);throw new Error(p)}o[l]=f,r=r||f!==s}return r?o:e}}function N(e,t){return function(){return t(e.apply(void 0,arguments))}}function A(e,t){if("function"==typeof e)return N(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],a=e[i];"function"==typeof a&&(r[i]=N(a,t))}return r}function R(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}var j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function L(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(n,r,o){var i,a=e(n,r,o),u=a.dispatch,l={getState:a.getState,dispatch:function(e){return u(e)}};return i=t.map(function(e){return e(l)}),u=R.apply(void 0,i)(a.dispatch),j({},a,{dispatch:u})}}}n.d(t,"createStore",function(){return C}),n.d(t,"combineReducers",function(){return O}),n.d(t,"bindActionCreators",function(){return A}),n.d(t,"applyMiddleware",function(){return L}),n.d(t,"compose",function(){return R})},function(e,t,n){"use strict";t.__esModule=!0,t.connect=t.Provider=void 0;var r=i(n(29)),o=i(n(32));function i(e){return e&&e.__esModule?e:{default:e}}t.Provider=r.default,t.connect=o.default},function(e,t,n){var r,o;!function(){var i={version:"3.5.17"},a=[].slice,u=function(e){return a.call(e)},l=this.document;function c(e){return e&&(e.ownerDocument||e.document||e).documentElement}function s(e){return e&&(e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView)}if(l)try{u(l.documentElement.childNodes)[0].nodeType}catch(e){u=function(e){for(var t=e.length,n=new Array(t);t--;)n[t]=e[t];return n}}if(Date.now||(Date.now=function(){return+new Date}),l)try{l.createElement("DIV").style.setProperty("opacity",0,"")}catch(e){var f=this.Element.prototype,p=f.setAttribute,d=f.setAttributeNS,h=this.CSSStyleDeclaration.prototype,v=h.setProperty;f.setAttribute=function(e,t){p.call(this,e,t+"")},f.setAttributeNS=function(e,t,n){d.call(this,e,t,n+"")},h.setProperty=function(e,t,n){v.call(this,e,t+"",n)}}function g(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function m(e){return null===e?NaN:+e}function y(e){return!isNaN(e)}function b(e){return{left:function(t,n,r,o){for(arguments.length<3&&(r=0),arguments.length<4&&(o=t.length);r<o;){var i=r+o>>>1;e(t[i],n)<0?r=i+1:o=i}return r},right:function(t,n,r,o){for(arguments.length<3&&(r=0),arguments.length<4&&(o=t.length);r<o;){var i=r+o>>>1;e(t[i],n)>0?o=i:r=i+1}return r}}}i.ascending=g,i.descending=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN},i.min=function(e,t){var n,r,o=-1,i=e.length;if(1===arguments.length){for(;++o<i;)if(null!=(r=e[o])&&r>=r){n=r;break}for(;++o<i;)null!=(r=e[o])&&n>r&&(n=r)}else{for(;++o<i;)if(null!=(r=t.call(e,e[o],o))&&r>=r){n=r;break}for(;++o<i;)null!=(r=t.call(e,e[o],o))&&n>r&&(n=r)}return n},i.max=function(e,t){var n,r,o=-1,i=e.length;if(1===arguments.length){for(;++o<i;)if(null!=(r=e[o])&&r>=r){n=r;break}for(;++o<i;)null!=(r=e[o])&&r>n&&(n=r)}else{for(;++o<i;)if(null!=(r=t.call(e,e[o],o))&&r>=r){n=r;break}for(;++o<i;)null!=(r=t.call(e,e[o],o))&&r>n&&(n=r)}return n},i.extent=function(e,t){var n,r,o,i=-1,a=e.length;if(1===arguments.length){for(;++i<a;)if(null!=(r=e[i])&&r>=r){n=o=r;break}for(;++i<a;)null!=(r=e[i])&&(n>r&&(n=r),o<r&&(o=r))}else{for(;++i<a;)if(null!=(r=t.call(e,e[i],i))&&r>=r){n=o=r;break}for(;++i<a;)null!=(r=t.call(e,e[i],i))&&(n>r&&(n=r),o<r&&(o=r))}return[n,o]},i.sum=function(e,t){var n,r=0,o=e.length,i=-1;if(1===arguments.length)for(;++i<o;)y(n=+e[i])&&(r+=n);else for(;++i<o;)y(n=+t.call(e,e[i],i))&&(r+=n);return r},i.mean=function(e,t){var n,r=0,o=e.length,i=-1,a=o;if(1===arguments.length)for(;++i<o;)y(n=m(e[i]))?r+=n:--a;else for(;++i<o;)y(n=m(t.call(e,e[i],i)))?r+=n:--a;if(a)return r/a},i.quantile=function(e,t){var n=(e.length-1)*t+1,r=Math.floor(n),o=+e[r-1],i=n-r;return i?o+i*(e[r]-o):o},i.median=function(e,t){var n,r=[],o=e.length,a=-1;if(1===arguments.length)for(;++a<o;)y(n=m(e[a]))&&r.push(n);else for(;++a<o;)y(n=m(t.call(e,e[a],a)))&&r.push(n);if(r.length)return i.quantile(r.sort(g),.5)},i.variance=function(e,t){var n,r,o=e.length,i=0,a=0,u=-1,l=0;if(1===arguments.length)for(;++u<o;)y(n=m(e[u]))&&(a+=(r=n-i)*(n-(i+=r/++l)));else for(;++u<o;)y(n=m(t.call(e,e[u],u)))&&(a+=(r=n-i)*(n-(i+=r/++l)));if(l>1)return a/(l-1)},i.deviation=function(){var e=i.variance.apply(this,arguments);return e?Math.sqrt(e):e};var x=b(g);function w(e){return e.length}i.bisectLeft=x.left,i.bisect=i.bisectRight=x.right,i.bisector=function(e){return b(1===e.length?function(t,n){return g(e(t),n)}:e)},i.shuffle=function(e,t,n){(i=arguments.length)<3&&(n=e.length,i<2&&(t=0));for(var r,o,i=n-t;i;)o=Math.random()*i--|0,r=e[i+t],e[i+t]=e[o+t],e[o+t]=r;return e},i.permute=function(e,t){for(var n=t.length,r=new Array(n);n--;)r[n]=e[t[n]];return r},i.pairs=function(e){for(var t=0,n=e.length-1,r=e[0],o=new Array(n<0?0:n);t<n;)o[t]=[r,r=e[++t]];return o},i.transpose=function(e){if(!(o=e.length))return[];for(var t=-1,n=i.min(e,w),r=new Array(n);++t<n;)for(var o,a=-1,u=r[t]=new Array(o);++a<o;)u[a]=e[a][t];return r},i.zip=function(){return i.transpose(arguments)},i.keys=function(e){var t=[];for(var n in e)t.push(n);return t},i.values=function(e){var t=[];for(var n in e)t.push(e[n]);return t},i.entries=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t},i.merge=function(e){for(var t,n,r,o=e.length,i=-1,a=0;++i<o;)a+=e[i].length;for(n=new Array(a);--o>=0;)for(t=(r=e[o]).length;--t>=0;)n[--a]=r[t];return n};var _=Math.abs;function k(e,t){for(var n in t)Object.defineProperty(e.prototype,n,{value:t[n],enumerable:!1})}function E(){this._=Object.create(null)}i.range=function(e,t,n){if(arguments.length<3&&(n=1,arguments.length<2&&(t=e,e=0)),(t-e)/n==1/0)throw new Error("infinite range");var r,o=[],i=function(e){var t=1;for(;e*t%1;)t*=10;return t}(_(n)),a=-1;if(e*=i,t*=i,(n*=i)<0)for(;(r=e+n*++a)>t;)o.push(r/i);else for(;(r=e+n*++a)<t;)o.push(r/i);return o},i.map=function(e,t){var n=new E;if(e instanceof E)e.forEach(function(e,t){n.set(e,t)});else if(Array.isArray(e)){var r,o=-1,i=e.length;if(1===arguments.length)for(;++o<i;)n.set(o,e[o]);else for(;++o<i;)n.set(t.call(e,r=e[o],o),r)}else for(var a in e)n.set(a,e[a]);return n};var S="__proto__",M="\0";function T(e){return(e+="")===S||e[0]===M?M+e:e}function C(e){return(e+="")[0]===M?e.slice(1):e}function P(e){return T(e)in this._}function O(e){return(e=T(e))in this._&&delete this._[e]}function N(){var e=[];for(var t in this._)e.push(C(t));return e}function A(){var e=0;for(var t in this._)++e;return e}function R(){for(var e in this._)return!1;return!0}function j(){this._=Object.create(null)}function L(e){return e}function D(e,t,n){return function(){var r=n.apply(t,arguments);return r===t?e:r}}function I(e,t){if(t in e)return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var n=0,r=U.length;n<r;++n){var o=U[n]+t;if(o in e)return o}}k(E,{has:P,get:function(e){return this._[T(e)]},set:function(e,t){return this._[T(e)]=t},remove:O,keys:N,values:function(){var e=[];for(var t in this._)e.push(this._[t]);return e},entries:function(){var e=[];for(var t in this._)e.push({key:C(t),value:this._[t]});return e},size:A,empty:R,forEach:function(e){for(var t in this._)e.call(this,C(t),this._[t])}}),i.nest=function(){var e,t,n={},r=[],o=[];function a(o,i,u){if(u>=r.length)return t?t.call(n,i):e?i.sort(e):i;for(var l,c,s,f,p=-1,d=i.length,h=r[u++],v=new E;++p<d;)(f=v.get(l=h(c=i[p])))?f.push(c):v.set(l,[c]);return o?(c=o(),s=function(e,t){c.set(e,a(o,t,u))}):(c={},s=function(e,t){c[e]=a(o,t,u)}),v.forEach(s),c}return n.map=function(e,t){return a(t,e,0)},n.entries=function(e){return function e(t,n){if(n>=r.length)return t;var i=[],a=o[n++];return t.forEach(function(t,r){i.push({key:t,values:e(r,n)})}),a?i.sort(function(e,t){return a(e.key,t.key)}):i}(a(i.map,e,0),0)},n.key=function(e){return r.push(e),n},n.sortKeys=function(e){return o[r.length-1]=e,n},n.sortValues=function(t){return e=t,n},n.rollup=function(e){return t=e,n},n},i.set=function(e){var t=new j;if(e)for(var n=0,r=e.length;n<r;++n)t.add(e[n]);return t},k(j,{has:P,add:function(e){return this._[T(e+="")]=!0,e},remove:O,values:N,size:A,empty:R,forEach:function(e){for(var t in this._)e.call(this,C(t))}}),i.behavior={},i.rebind=function(e,t){for(var n,r=1,o=arguments.length;++r<o;)e[n=arguments[r]]=D(e,t,t[n]);return e};var U=["webkit","ms","moz","Moz","o","O"];function z(){}function F(){}function q(e){var t=[],n=new E;function r(){for(var n,r=t,o=-1,i=r.length;++o<i;)(n=r[o].on)&&n.apply(this,arguments);return e}return r.on=function(r,o){var i,a=n.get(r);return arguments.length<2?a&&a.on:(a&&(a.on=null,t=t.slice(0,i=t.indexOf(a)).concat(t.slice(i+1)),n.remove(r)),o&&t.push(n.set(r,{on:o})),e)},r}function H(){i.event.preventDefault()}function B(){for(var e,t=i.event;e=t.sourceEvent;)t=e;return t}function V(e){for(var t=new F,n=0,r=arguments.length;++n<r;)t[arguments[n]]=q(t);return t.of=function(n,r){return function(o){try{var a=o.sourceEvent=i.event;o.target=e,i.event=o,t[o.type].apply(n,r)}finally{i.event=a}}},t}i.dispatch=function(){for(var e=new F,t=-1,n=arguments.length;++t<n;)e[arguments[t]]=q(e);return e},F.prototype.on=function(e,t){var n=e.indexOf("."),r="";if(n>=0&&(r=e.slice(n+1),e=e.slice(0,n)),e)return arguments.length<2?this[e].on(r):this[e].on(r,t);if(2===arguments.length){if(null==t)for(e in this)this.hasOwnProperty(e)&&this[e].on(r,null);return this}},i.event=null,i.requote=function(e){return e.replace(W,"\\$&")};var W=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,G={}.__proto__?function(e,t){e.__proto__=t}:function(e,t){for(var n in t)e[n]=t[n]};function Q(e){return G(e,X),e}var $=function(e,t){return t.querySelector(e)},Y=function(e,t){return t.querySelectorAll(e)},K=function(e,t){var n=e.matches||e[I(e,"matchesSelector")];return(K=function(e,t){return n.call(e,t)})(e,t)};"function"==typeof Sizzle&&($=function(e,t){return Sizzle(e,t)[0]||null},Y=Sizzle,K=Sizzle.matchesSelector),i.selection=function(){return i.select(l.documentElement)};var X=i.selection.prototype=[];function Z(e){return"function"==typeof e?e:function(){return $(e,this)}}function J(e){return"function"==typeof e?e:function(){return Y(e,this)}}X.select=function(e){var t,n,r,o,i=[];e=Z(e);for(var a=-1,u=this.length;++a<u;){i.push(t=[]),t.parentNode=(r=this[a]).parentNode;for(var l=-1,c=r.length;++l<c;)(o=r[l])?(t.push(n=e.call(o,o.__data__,l,a)),n&&"__data__"in o&&(n.__data__=o.__data__)):t.push(null)}return Q(i)},X.selectAll=function(e){var t,n,r=[];e=J(e);for(var o=-1,i=this.length;++o<i;)for(var a=this[o],l=-1,c=a.length;++l<c;)(n=a[l])&&(r.push(t=u(e.call(n,n.__data__,l,o))),t.parentNode=n);return Q(r)};var ee="http://www.w3.org/1999/xhtml",te={svg:"http://www.w3.org/2000/svg",xhtml:ee,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function ne(e,t){return e=i.ns.qualify(e),null==t?e.local?function(){this.removeAttributeNS(e.space,e.local)}:function(){this.removeAttribute(e)}:"function"==typeof t?e.local?function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}:function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}:e.local?function(){this.setAttributeNS(e.space,e.local,t)}:function(){this.setAttribute(e,t)}}function re(e){return e.trim().replace(/\s+/g," ")}function oe(e){return new RegExp("(?:^|\\s+)"+i.requote(e)+"(?:\\s+|$)","g")}function ie(e){return(e+"").trim().split(/^|\s+/)}function ae(e,t){var n=(e=ie(e).map(ue)).length;return"function"==typeof t?function(){for(var r=-1,o=t.apply(this,arguments);++r<n;)e[r](this,o)}:function(){for(var r=-1;++r<n;)e[r](this,t)}}function ue(e){var t=oe(e);return function(n,r){if(o=n.classList)return r?o.add(e):o.remove(e);var o=n.getAttribute("class")||"";r?(t.lastIndex=0,t.test(o)||n.setAttribute("class",re(o+" "+e))):n.setAttribute("class",re(o.replace(t," ")))}}function le(e,t,n){return null==t?function(){this.style.removeProperty(e)}:"function"==typeof t?function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}:function(){this.style.setProperty(e,t,n)}}function ce(e,t){return null==t?function(){delete this[e]}:"function"==typeof t?function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}:function(){this[e]=t}}function se(e){return"function"==typeof e?e:(e=i.ns.qualify(e)).local?function(){return this.ownerDocument.createElementNS(e.space,e.local)}:function(){var t=this.ownerDocument,n=this.namespaceURI;return n===ee&&t.documentElement.namespaceURI===ee?t.createElement(e):t.createElementNS(n,e)}}function fe(){var e=this.parentNode;e&&e.removeChild(this)}function pe(e){return{__data__:e}}function de(e){return function(){return K(this,e)}}function he(e,t){for(var n=0,r=e.length;n<r;n++)for(var o,i=e[n],a=0,u=i.length;a<u;a++)(o=i[a])&&t(o,a,n);return e}function ve(e){return G(e,ge),e}i.ns={prefix:te,qualify:function(e){var t=e.indexOf(":"),n=e;return t>=0&&"xmlns"!==(n=e.slice(0,t))&&(e=e.slice(t+1)),te.hasOwnProperty(n)?{space:te[n],local:e}:e}},X.attr=function(e,t){if(arguments.length<2){if("string"==typeof e){var n=this.node();return(e=i.ns.qualify(e)).local?n.getAttributeNS(e.space,e.local):n.getAttribute(e)}for(t in e)this.each(ne(t,e[t]));return this}return this.each(ne(e,t))},X.classed=function(e,t){if(arguments.length<2){if("string"==typeof e){var n=this.node(),r=(e=ie(e)).length,o=-1;if(t=n.classList){for(;++o<r;)if(!t.contains(e[o]))return!1}else for(t=n.getAttribute("class");++o<r;)if(!oe(e[o]).test(t))return!1;return!0}for(t in e)this.each(ae(t,e[t]));return this}return this.each(ae(e,t))},X.style=function(e,t,n){var r=arguments.length;if(r<3){if("string"!=typeof e){for(n in r<2&&(t=""),e)this.each(le(n,e[n],t));return this}if(r<2){var o=this.node();return s(o).getComputedStyle(o,null).getPropertyValue(e)}n=""}return this.each(le(e,t,n))},X.property=function(e,t){if(arguments.length<2){if("string"==typeof e)return this.node()[e];for(t in e)this.each(ce(t,e[t]));return this}return this.each(ce(e,t))},X.text=function(e){return arguments.length?this.each("function"==typeof e?function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}:null==e?function(){this.textContent=""}:function(){this.textContent=e}):this.node().textContent},X.html=function(e){return arguments.length?this.each("function"==typeof e?function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}:null==e?function(){this.innerHTML=""}:function(){this.innerHTML=e}):this.node().innerHTML},X.append=function(e){return e=se(e),this.select(function(){return this.appendChild(e.apply(this,arguments))})},X.insert=function(e,t){return e=se(e),t=Z(t),this.select(function(){return this.insertBefore(e.apply(this,arguments),t.apply(this,arguments)||null)})},X.remove=function(){return this.each(fe)},X.data=function(e,t){var n,r,o=-1,i=this.length;if(!arguments.length){for(e=new Array(i=(n=this[0]).length);++o<i;)(r=n[o])&&(e[o]=r.__data__);return e}function a(e,n){var r,o,i,a=e.length,s=n.length,f=Math.min(a,s),p=new Array(s),d=new Array(s),h=new Array(a);if(t){var v,g=new E,m=new Array(a);for(r=-1;++r<a;)(o=e[r])&&(g.has(v=t.call(o,o.__data__,r))?h[r]=o:g.set(v,o),m[r]=v);for(r=-1;++r<s;)(o=g.get(v=t.call(n,i=n[r],r)))?!0!==o&&(p[r]=o,o.__data__=i):d[r]=pe(i),g.set(v,!0);for(r=-1;++r<a;)r in m&&!0!==g.get(m[r])&&(h[r]=e[r])}else{for(r=-1;++r<f;)o=e[r],i=n[r],o?(o.__data__=i,p[r]=o):d[r]=pe(i);for(;r<s;++r)d[r]=pe(n[r]);for(;r<a;++r)h[r]=e[r]}d.update=p,d.parentNode=p.parentNode=h.parentNode=e.parentNode,u.push(d),l.push(p),c.push(h)}var u=ve([]),l=Q([]),c=Q([]);if("function"==typeof e)for(;++o<i;)a(n=this[o],e.call(n,n.parentNode.__data__,o));else for(;++o<i;)a(n=this[o],e);return l.enter=function(){return u},l.exit=function(){return c},l},X.datum=function(e){return arguments.length?this.property("__data__",e):this.property("__data__")},X.filter=function(e){var t,n,r,o=[];"function"!=typeof e&&(e=de(e));for(var i=0,a=this.length;i<a;i++){o.push(t=[]),t.parentNode=(n=this[i]).parentNode;for(var u=0,l=n.length;u<l;u++)(r=n[u])&&e.call(r,r.__data__,u,i)&&t.push(r)}return Q(o)},X.order=function(){for(var e=-1,t=this.length;++e<t;)for(var n,r=this[e],o=r.length-1,i=r[o];--o>=0;)(n=r[o])&&(i&&i!==n.nextSibling&&i.parentNode.insertBefore(n,i),i=n);return this},X.sort=function(e){e=function(e){arguments.length||(e=g);return function(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}}.apply(this,arguments);for(var t=-1,n=this.length;++t<n;)this[t].sort(e);return this.order()},X.each=function(e){return he(this,function(t,n,r){e.call(t,t.__data__,n,r)})},X.call=function(e){var t=u(arguments);return e.apply(t[0]=this,t),this},X.empty=function(){return!this.node()},X.node=function(){for(var e=0,t=this.length;e<t;e++)for(var n=this[e],r=0,o=n.length;r<o;r++){var i=n[r];if(i)return i}return null},X.size=function(){var e=0;return he(this,function(){++e}),e};var ge=[];function me(e,t,n){var r="__on"+e,o=e.indexOf("."),a=be;o>0&&(e=e.slice(0,o));var l=ye.get(e);function c(){var t=this[r];t&&(this.removeEventListener(e,t,t.$),delete this[r])}return l&&(e=l,a=xe),o?t?function(){var o=a(t,u(arguments));c.call(this),this.addEventListener(e,this[r]=o,o.$=n),o._=t}:c:t?z:function(){var t,n=new RegExp("^__on([^.]+)"+i.requote(e)+"$");for(var r in this)if(t=r.match(n)){var o=this[r];this.removeEventListener(t[1],o,o.$),delete this[r]}}}i.selection.enter=ve,i.selection.enter.prototype=ge,ge.append=X.append,ge.empty=X.empty,ge.node=X.node,ge.call=X.call,ge.size=X.size,ge.select=function(e){for(var t,n,r,o,i,a=[],u=-1,l=this.length;++u<l;){r=(o=this[u]).update,a.push(t=[]),t.parentNode=o.parentNode;for(var c=-1,s=o.length;++c<s;)(i=o[c])?(t.push(r[c]=n=e.call(o.parentNode,i.__data__,c,u)),n.__data__=i.__data__):t.push(null)}return Q(a)},ge.insert=function(e,t){var n,r,o;return arguments.length<2&&(n=this,t=function(e,t,i){var a,u=n[i].update,l=u.length;for(i!=o&&(o=i,r=0),t>=r&&(r=t+1);!(a=u[r])&&++r<l;);return a}),X.insert.call(this,e,t)},i.select=function(e){var t;return"string"==typeof e?(t=[$(e,l)]).parentNode=l.documentElement:(t=[e]).parentNode=c(e),Q([t])},i.selectAll=function(e){var t;return"string"==typeof e?(t=u(Y(e,l))).parentNode=l.documentElement:(t=u(e)).parentNode=null,Q([t])},X.on=function(e,t,n){var r=arguments.length;if(r<3){if("string"!=typeof e){for(n in r<2&&(t=!1),e)this.each(me(n,e[n],t));return this}if(r<2)return(r=this.node()["__on"+e])&&r._;n=!1}return this.each(me(e,t,n))};var ye=i.map({mouseenter:"mouseover",mouseleave:"mouseout"});function be(e,t){return function(n){var r=i.event;i.event=n,t[0]=this.__data__;try{e.apply(this,t)}finally{i.event=r}}}function xe(e,t){var n=be(e,t);return function(e){var t=e.relatedTarget;t&&(t===this||8&t.compareDocumentPosition(this))||n.call(this,e)}}l&&ye.forEach(function(e){"on"+e in l&&ye.remove(e)});var we,_e=0;function ke(e){var t=".dragsuppress-"+ ++_e,n="click"+t,r=i.select(s(e)).on("touchmove"+t,H).on("dragstart"+t,H).on("selectstart"+t,H);if(null==we&&(we=!("onselectstart"in e)&&I(e.style,"userSelect")),we){var o=c(e).style,a=o[we];o[we]="none"}return function(e){if(r.on(t,null),we&&(o[we]=a),e){var i=function(){r.on(n,null)};r.on(n,function(){H(),i()},!0),setTimeout(i,0)}}}i.mouse=function(e){return Se(e,B())};var Ee=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;function Se(e,t){t.changedTouches&&(t=t.changedTouches[0]);var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();if(Ee<0){var o=s(e);if(o.scrollX||o.scrollY){var a=(n=i.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important"))[0][0].getScreenCTM();Ee=!(a.f||a.e),n.remove()}}return Ee?(r.x=t.pageX,r.y=t.pageY):(r.x=t.clientX,r.y=t.clientY),[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var u=e.getBoundingClientRect();return[t.clientX-u.left-e.clientLeft,t.clientY-u.top-e.clientTop]}function Me(){return i.event.changedTouches[0].identifier}i.touch=function(e,t,n){if(arguments.length<3&&(n=t,t=B().changedTouches),t)for(var r,o=0,i=t.length;o<i;++o)if((r=t[o]).identifier===n)return Se(e,r)},i.behavior.drag=function(){var e=V(o,"drag","dragstart","dragend"),t=null,n=a(z,i.mouse,s,"mousemove","mouseup"),r=a(Me,i.touch,L,"touchmove","touchend");function o(){this.on("mousedown.drag",n).on("touchstart.drag",r)}function a(n,r,o,a,u){return function(){var l,c=i.event.target.correspondingElement||i.event.target,s=this.parentNode,f=e.of(this,arguments),p=0,d=n(),h=".drag"+(null==d?"":"-"+d),v=i.select(o(c)).on(a+h,function(){var e,t,n=r(s,d);if(!n)return;e=n[0]-m[0],t=n[1]-m[1],p|=e|t,m=n,f({type:"drag",x:n[0]+l[0],y:n[1]+l[1],dx:e,dy:t})}).on(u+h,function(){if(!r(s,d))return;v.on(a+h,null).on(u+h,null),g(p),f({type:"dragend"})}),g=ke(c),m=r(s,d);l=t?[(l=t.apply(this,arguments)).x-m[0],l.y-m[1]]:[0,0],f({type:"dragstart"})}}return o.origin=function(e){return arguments.length?(t=e,o):t},i.rebind(o,e,"on")},i.touches=function(e,t){return arguments.length<2&&(t=B().touches),t?u(t).map(function(t){var n=Se(e,t);return n.identifier=t.identifier,n}):[]};var Te=1e-6,Ce=Te*Te,Pe=Math.PI,Oe=2*Pe,Ne=Oe-Te,Ae=Pe/2,Re=Pe/180,je=180/Pe;function Le(e){return e>0?1:e<0?-1:0}function De(e,t,n){return(t[0]-e[0])*(n[1]-e[1])-(t[1]-e[1])*(n[0]-e[0])}function Ie(e){return e>1?0:e<-1?Pe:Math.acos(e)}function Ue(e){return e>1?Ae:e<-1?-Ae:Math.asin(e)}function ze(e){return((e=Math.exp(e))+1/e)/2}function Fe(e){return(e=Math.sin(e/2))*e}var qe=Math.SQRT2;i.interpolateZoom=function(e,t){var n,r,o=e[0],i=e[1],a=e[2],u=t[0],l=t[1],c=t[2],s=u-o,f=l-i,p=s*s+f*f;if(p<Ce)r=Math.log(c/a)/qe,n=function(e){return[o+e*s,i+e*f,a*Math.exp(qe*e*r)]};else{var d=Math.sqrt(p),h=(c*c-a*a+4*p)/(2*a*2*d),v=(c*c-a*a-4*p)/(2*c*2*d),g=Math.log(Math.sqrt(h*h+1)-h),m=Math.log(Math.sqrt(v*v+1)-v);r=(m-g)/qe,n=function(e){var t,n=e*r,u=ze(g),l=a/(2*d)*(u*(t=qe*n+g,((t=Math.exp(2*t))-1)/(t+1))-function(e){return((e=Math.exp(e))-1/e)/2}(g));return[o+l*s,i+l*f,a*u/ze(qe*n+g)]}}return n.duration=1e3*r,n},i.behavior.zoom=function(){var e,t,n,r,o,a,u,c,f,p={x:0,y:0,k:1},d=[960,500],h=Ve,v=250,g=0,m="mousedown.zoom",y="mousemove.zoom",b="mouseup.zoom",x="touchstart.zoom",w=V(_,"zoomstart","zoom","zoomend");function _(e){e.on(m,N).on(Be+".zoom",R).on("dblclick.zoom",j).on(x,A)}function k(e){return[(e[0]-p.x)/p.k,(e[1]-p.y)/p.k]}function E(e){p.k=Math.max(h[0],Math.min(h[1],e))}function S(e,t){t=function(e){return[e[0]*p.k+p.x,e[1]*p.k+p.y]}(t),p.x+=e[0]-t[0],p.y+=e[1]-t[1]}function M(e,n,r,o){e.__chart__={x:p.x,y:p.y,k:p.k},E(Math.pow(2,o)),S(t=n,r),e=i.select(e),v>0&&(e=e.transition().duration(v)),e.call(_.event)}function T(){u&&u.domain(a.range().map(function(e){return(e-p.x)/p.k}).map(a.invert)),f&&f.domain(c.range().map(function(e){return(e-p.y)/p.k}).map(c.invert))}function C(e){g++||e({type:"zoomstart"})}function P(e){T(),e({type:"zoom",scale:p.k,translate:[p.x,p.y]})}function O(e){--g||(e({type:"zoomend"}),t=null)}function N(){var e=this,t=w.of(e,arguments),n=0,r=i.select(s(e)).on(y,function(){n=1,S(i.mouse(e),o),P(t)}).on(b,function(){r.on(y,null).on(b,null),a(n),O(t)}),o=k(i.mouse(e)),a=ke(e);mu.call(e),C(t)}function A(){var e,t=this,n=w.of(t,arguments),r={},a=0,u=".zoom-"+i.event.changedTouches[0].identifier,l="touchmove"+u,c="touchend"+u,s=[],f=i.select(t),d=ke(t);function h(){var n=i.touches(t);return e=p.k,n.forEach(function(e){e.identifier in r&&(r[e.identifier]=k(e))}),n}function v(){var e=i.event.target;i.select(e).on(l,g).on(c,y),s.push(e);for(var n=i.event.changedTouches,u=0,f=n.length;u<f;++u)r[n[u].identifier]=null;var d=h(),v=Date.now();if(1===d.length){if(v-o<500){var m=d[0];M(t,m,r[m.identifier],Math.floor(Math.log(p.k)/Math.LN2)+1),H()}o=v}else if(d.length>1){m=d[0];var b=d[1],x=m[0]-b[0],w=m[1]-b[1];a=x*x+w*w}}function g(){var u,l,c,s,f=i.touches(t);mu.call(t);for(var p=0,d=f.length;p<d;++p,s=null)if(c=f[p],s=r[c.identifier]){if(l)break;u=c,l=s}if(s){var h=(h=c[0]-u[0])*h+(h=c[1]-u[1])*h,v=a&&Math.sqrt(h/a);u=[(u[0]+c[0])/2,(u[1]+c[1])/2],l=[(l[0]+s[0])/2,(l[1]+s[1])/2],E(v*e)}o=null,S(u,l),P(n)}function y(){if(i.event.touches.length){for(var e=i.event.changedTouches,t=0,o=e.length;t<o;++t)delete r[e[t].identifier];for(var a in r)return void h()}i.selectAll(s).on(u,null),f.on(m,N).on(x,A),d(),O(n)}v(),C(n),f.on(m,null).on(x,v)}function R(){var o=w.of(this,arguments);r?clearTimeout(r):(mu.call(this),e=k(t=n||i.mouse(this)),C(o)),r=setTimeout(function(){r=null,O(o)},50),H(),E(Math.pow(2,.002*He())*p.k),S(t,e),P(o)}function j(){var e=i.mouse(this),t=Math.log(p.k)/Math.LN2;M(this,e,k(e),i.event.shiftKey?Math.ceil(t)-1:Math.floor(t)+1)}return Be||(Be="onwheel"in l?(He=function(){return-i.event.deltaY*(i.event.deltaMode?120:1)},"wheel"):"onmousewheel"in l?(He=function(){return i.event.wheelDelta},"mousewheel"):(He=function(){return-i.event.detail},"MozMousePixelScroll")),_.event=function(e){e.each(function(){var e=w.of(this,arguments),n=p;xu?i.select(this).transition().each("start.zoom",function(){p=this.__chart__||{x:0,y:0,k:1},C(e)}).tween("zoom:zoom",function(){var r=d[0],o=d[1],a=t?t[0]:r/2,u=t?t[1]:o/2,l=i.interpolateZoom([(a-p.x)/p.k,(u-p.y)/p.k,r/p.k],[(a-n.x)/n.k,(u-n.y)/n.k,r/n.k]);return function(t){var n=l(t),o=r/n[2];this.__chart__=p={x:a-n[0]*o,y:u-n[1]*o,k:o},P(e)}}).each("interrupt.zoom",function(){O(e)}).each("end.zoom",function(){O(e)}):(this.__chart__=p,C(e),P(e),O(e))})},_.translate=function(e){return arguments.length?(p={x:+e[0],y:+e[1],k:p.k},T(),_):[p.x,p.y]},_.scale=function(e){return arguments.length?(p={x:p.x,y:p.y,k:null},E(+e),T(),_):p.k},_.scaleExtent=function(e){return arguments.length?(h=null==e?Ve:[+e[0],+e[1]],_):h},_.center=function(e){return arguments.length?(n=e&&[+e[0],+e[1]],_):n},_.size=function(e){return arguments.length?(d=e&&[+e[0],+e[1]],_):d},_.duration=function(e){return arguments.length?(v=+e,_):v},_.x=function(e){return arguments.length?(u=e,a=e.copy(),p={x:0,y:0,k:1},_):u},_.y=function(e){return arguments.length?(f=e,c=e.copy(),p={x:0,y:0,k:1},_):f},i.rebind(_,w,"on")};var He,Be,Ve=[0,1/0];function We(){}function Ge(e,t,n){return this instanceof Ge?(this.h=+e,this.s=+t,void(this.l=+n)):arguments.length<2?e instanceof Ge?new Ge(e.h,e.s,e.l):ht(""+e,vt,Ge):new Ge(e,t,n)}i.color=We,We.prototype.toString=function(){return this.rgb()+""},i.hsl=Ge;var Qe=Ge.prototype=new We;function $e(e,t,n){var r,o;function i(e){return Math.round(255*function(e){return e>360?e-=360:e<0&&(e+=360),e<60?r+(o-r)*e/60:e<180?o:e<240?r+(o-r)*(240-e)/60:r}(e))}return e=isNaN(e)?0:(e%=360)<0?e+360:e,t=isNaN(t)?0:t<0?0:t>1?1:t,r=2*(n=n<0?0:n>1?1:n)-(o=n<=.5?n*(1+t):n+t-n*t),new ct(i(e+120),i(e),i(e-120))}function Ye(e,t,n){return this instanceof Ye?(this.h=+e,this.c=+t,void(this.l=+n)):arguments.length<2?e instanceof Ye?new Ye(e.h,e.c,e.l):it(e instanceof Ze?e.l:(e=gt((e=i.rgb(e)).r,e.g,e.b)).l,e.a,e.b):new Ye(e,t,n)}Qe.brighter=function(e){return e=Math.pow(.7,arguments.length?e:1),new Ge(this.h,this.s,this.l/e)},Qe.darker=function(e){return e=Math.pow(.7,arguments.length?e:1),new Ge(this.h,this.s,e*this.l)},Qe.rgb=function(){return $e(this.h,this.s,this.l)},i.hcl=Ye;var Ke=Ye.prototype=new We;function Xe(e,t,n){return isNaN(e)&&(e=0),isNaN(t)&&(t=0),new Ze(n,Math.cos(e*=Re)*t,Math.sin(e)*t)}function Ze(e,t,n){return this instanceof Ze?(this.l=+e,this.a=+t,void(this.b=+n)):arguments.length<2?e instanceof Ze?new Ze(e.l,e.a,e.b):e instanceof Ye?Xe(e.h,e.c,e.l):gt((e=ct(e)).r,e.g,e.b):new Ze(e,t,n)}Ke.brighter=function(e){return new Ye(this.h,this.c,Math.min(100,this.l+Je*(arguments.length?e:1)))},Ke.darker=function(e){return new Ye(this.h,this.c,Math.max(0,this.l-Je*(arguments.length?e:1)))},Ke.rgb=function(){return Xe(this.h,this.c,this.l).rgb()},i.lab=Ze;var Je=18,et=.95047,tt=1,nt=1.08883,rt=Ze.prototype=new We;function ot(e,t,n){var r=(e+16)/116,o=r+t/500,i=r-n/200;return new ct(lt(3.2404542*(o=at(o)*et)-1.5371385*(r=at(r)*tt)-.4985314*(i=at(i)*nt)),lt(-.969266*o+1.8760108*r+.041556*i),lt(.0556434*o-.2040259*r+1.0572252*i))}function it(e,t,n){return e>0?new Ye(Math.atan2(n,t)*je,Math.sqrt(t*t+n*n),e):new Ye(NaN,NaN,e)}function at(e){return e>.206893034?e*e*e:(e-4/29)/7.787037}function ut(e){return e>.008856?Math.pow(e,1/3):7.787037*e+4/29}function lt(e){return Math.round(255*(e<=.00304?12.92*e:1.055*Math.pow(e,1/2.4)-.055))}function ct(e,t,n){return this instanceof ct?(this.r=~~e,this.g=~~t,void(this.b=~~n)):arguments.length<2?e instanceof ct?new ct(e.r,e.g,e.b):ht(""+e,ct,$e):new ct(e,t,n)}function st(e){return new ct(e>>16,e>>8&255,255&e)}function ft(e){return st(e)+""}rt.brighter=function(e){return new Ze(Math.min(100,this.l+Je*(arguments.length?e:1)),this.a,this.b)},rt.darker=function(e){return new Ze(Math.max(0,this.l-Je*(arguments.length?e:1)),this.a,this.b)},rt.rgb=function(){return ot(this.l,this.a,this.b)},i.rgb=ct;var pt=ct.prototype=new We;function dt(e){return e<16?"0"+Math.max(0,e).toString(16):Math.min(255,e).toString(16)}function ht(e,t,n){var r,o,i,a=0,u=0,l=0;if(r=/([a-z]+)\((.*)\)/.exec(e=e.toLowerCase()))switch(o=r[2].split(","),r[1]){case"hsl":return n(parseFloat(o[0]),parseFloat(o[1])/100,parseFloat(o[2])/100);case"rgb":return t(yt(o[0]),yt(o[1]),yt(o[2]))}return(i=bt.get(e))?t(i.r,i.g,i.b):(null==e||"#"!==e.charAt(0)||isNaN(i=parseInt(e.slice(1),16))||(4===e.length?(a=(3840&i)>>4,a|=a>>4,u=240&i,u|=u>>4,l=15&i,l|=l<<4):7===e.length&&(a=(16711680&i)>>16,u=(65280&i)>>8,l=255&i)),t(a,u,l))}function vt(e,t,n){var r,o,i=Math.min(e/=255,t/=255,n/=255),a=Math.max(e,t,n),u=a-i,l=(a+i)/2;return u?(o=l<.5?u/(a+i):u/(2-a-i),r=e==a?(t-n)/u+(t<n?6:0):t==a?(n-e)/u+2:(e-t)/u+4,r*=60):(r=NaN,o=l>0&&l<1?0:r),new Ge(r,o,l)}function gt(e,t,n){var r=ut((.4124564*(e=mt(e))+.3575761*(t=mt(t))+.1804375*(n=mt(n)))/et),o=ut((.2126729*e+.7151522*t+.072175*n)/tt);return Ze(116*o-16,500*(r-o),200*(o-ut((.0193339*e+.119192*t+.9503041*n)/nt)))}function mt(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function yt(e){var t=parseFloat(e);return"%"===e.charAt(e.length-1)?Math.round(2.55*t):t}pt.brighter=function(e){e=Math.pow(.7,arguments.length?e:1);var t=this.r,n=this.g,r=this.b,o=30;return t||n||r?(t&&t<o&&(t=o),n&&n<o&&(n=o),r&&r<o&&(r=o),new ct(Math.min(255,t/e),Math.min(255,n/e),Math.min(255,r/e))):new ct(o,o,o)},pt.darker=function(e){return new ct((e=Math.pow(.7,arguments.length?e:1))*this.r,e*this.g,e*this.b)},pt.hsl=function(){return vt(this.r,this.g,this.b)},pt.toString=function(){return"#"+dt(this.r)+dt(this.g)+dt(this.b)};var bt=i.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});function xt(e){return"function"==typeof e?e:function(){return e}}function wt(e){return function(t,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=null),_t(t,n,e,r)}}function _t(e,t,n,r){var o={},a=i.dispatch("beforesend","progress","load","error"),l={},c=new XMLHttpRequest,s=null;function f(){var e,t=c.status;if(!t&&function(e){var t=e.responseType;return t&&"text"!==t?e.response:e.responseText}(c)||t>=200&&t<300||304===t){try{e=n.call(o,c)}catch(e){return void a.error.call(o,e)}a.load.call(o,e)}else a.error.call(o,c)}return!this.XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(e)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=f:c.onreadystatechange=function(){c.readyState>3&&f()},c.onprogress=function(e){var t=i.event;i.event=e;try{a.progress.call(o,c)}finally{i.event=t}},o.header=function(e,t){return e=(e+"").toLowerCase(),arguments.length<2?l[e]:(null==t?delete l[e]:l[e]=t+"",o)},o.mimeType=function(e){return arguments.length?(t=null==e?null:e+"",o):t},o.responseType=function(e){return arguments.length?(s=e,o):s},o.response=function(e){return n=e,o},["get","post"].forEach(function(e){o[e]=function(){return o.send.apply(o,[e].concat(u(arguments)))}}),o.send=function(n,r,i){if(2===arguments.length&&"function"==typeof r&&(i=r,r=null),c.open(n,e,!0),null==t||"accept"in l||(l.accept=t+",*/*"),c.setRequestHeader)for(var u in l)c.setRequestHeader(u,l[u]);return null!=t&&c.overrideMimeType&&c.overrideMimeType(t),null!=s&&(c.responseType=s),null!=i&&o.on("error",i).on("load",function(e){i(null,e)}),a.beforesend.call(o,c),c.send(null==r?null:r),o},o.abort=function(){return c.abort(),o},i.rebind(o,a,"on"),null==r?o:o.get(function(e){return 1===e.length?function(t,n){e(null==t?n:null)}:e}(r))}bt.forEach(function(e,t){bt.set(e,st(t))}),i.functor=xt,i.xhr=wt(L),i.dsv=function(e,t){var n=new RegExp('["'+e+"\n]"),r=e.charCodeAt(0);function o(e,n,r){arguments.length<3&&(r=n,n=null);var o=_t(e,t,null==n?i:a(n),r);return o.row=function(e){return arguments.length?o.response(null==(n=e)?i:a(e)):n},o}function i(e){return o.parse(e.responseText)}function a(e){return function(t){return o.parse(t.responseText,e)}}function u(t){return t.map(l).join(e)}function l(e){return n.test(e)?'"'+e.replace(/\"/g,'""')+'"':e}return o.parse=function(e,t){var n;return o.parseRows(e,function(e,r){if(n)return n(e,r-1);var o=new Function("d","return {"+e.map(function(e,t){return JSON.stringify(e)+": d["+t+"]"}).join(",")+"}");n=t?function(e,n){return t(o(e),n)}:o})},o.parseRows=function(e,t){var n,o,i={},a={},u=[],l=e.length,c=0,s=0;function f(){if(c>=l)return a;if(o)return o=!1,i;var t=c;if(34===e.charCodeAt(t)){for(var n=t;n++<l;)if(34===e.charCodeAt(n)){if(34!==e.charCodeAt(n+1))break;++n}return c=n+2,13===(u=e.charCodeAt(n+1))?(o=!0,10===e.charCodeAt(n+2)&&++c):10===u&&(o=!0),e.slice(t+1,n).replace(/""/g,'"')}for(;c<l;){var u,s=1;if(10===(u=e.charCodeAt(c++)))o=!0;else if(13===u)o=!0,10===e.charCodeAt(c)&&(++c,++s);else if(u!==r)continue;return e.slice(t,c-s)}return e.slice(t)}for(;(n=f())!==a;){for(var p=[];n!==i&&n!==a;)p.push(n),n=f();t&&null==(p=t(p,s++))||u.push(p)}return u},o.format=function(t){if(Array.isArray(t[0]))return o.formatRows(t);var n=new j,r=[];return t.forEach(function(e){for(var t in e)n.has(t)||r.push(n.add(t))}),[r.map(l).join(e)].concat(t.map(function(t){return r.map(function(e){return l(t[e])}).join(e)})).join("\n")},o.formatRows=function(e){return e.map(u).join("\n")},o},i.csv=i.dsv(",","text/csv"),i.tsv=i.dsv("\t","text/tab-separated-values");var kt,Et,St,Mt,Tt=this[I(this,"requestAnimationFrame")]||function(e){setTimeout(e,17)};function Ct(e,t,n){var r=arguments.length;r<2&&(t=0),r<3&&(n=Date.now());var o={c:e,t:n+t,n:null};return Et?Et.n=o:kt=o,Et=o,St||(Mt=clearTimeout(Mt),St=1,Tt(Pt)),o}function Pt(){var e=Ot(),t=Nt()-e;t>24?(isFinite(t)&&(clearTimeout(Mt),Mt=setTimeout(Pt,t)),St=0):(St=1,Tt(Pt))}function Ot(){for(var e=Date.now(),t=kt;t;)e>=t.t&&t.c(e-t.t)&&(t.c=null),t=t.n;return e}function Nt(){for(var e,t=kt,n=1/0;t;)t.c?(t.t<n&&(n=t.t),t=(e=t).n):t=e?e.n=t.n:kt=t.n;return Et=e,n}function At(e,t){return t-(e?Math.ceil(Math.log(e)/Math.LN10):1)}i.timer=function(){Ct.apply(this,arguments)},i.timer.flush=function(){Ot(),Nt()},i.round=function(e,t){return t?Math.round(e*(t=Math.pow(10,t)))/t:Math.round(e)};var Rt=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(function(e,t){var n=Math.pow(10,3*_(8-t));return{scale:t>8?function(e){return e/n}:function(e){return e*n},symbol:e}});function jt(e){var t=e.decimal,n=e.thousands,r=e.grouping,o=e.currency,a=r&&n?function(e,t){for(var o=e.length,i=[],a=0,u=r[0],l=0;o>0&&u>0&&(l+u+1>t&&(u=Math.max(1,t-l)),i.push(e.substring(o-=u,o+u)),!((l+=u+1)>t));)u=r[a=(a+1)%r.length];return i.reverse().join(n)}:L;return function(e){var n=Lt.exec(e),r=n[1]||" ",u=n[2]||">",l=n[3]||"-",c=n[4]||"",s=n[5],f=+n[6],p=n[7],d=n[8],h=n[9],v=1,g="",m="",y=!1,b=!0;switch(d&&(d=+d.substring(1)),(s||"0"===r&&"="===u)&&(s=r="0",u="="),h){case"n":p=!0,h="g";break;case"%":v=100,m="%",h="f";break;case"p":v=100,m="%",h="r";break;case"b":case"o":case"x":case"X":"#"===c&&(g="0"+h.toLowerCase());case"c":b=!1;case"d":y=!0,d=0;break;case"s":v=-1,h="r"}"$"===c&&(g=o[0],m=o[1]),"r"!=h||d||(h="g"),null!=d&&("g"==h?d=Math.max(1,Math.min(21,d)):"e"!=h&&"f"!=h||(d=Math.max(0,Math.min(20,d)))),h=Dt.get(h)||It;var x=s&&p;return function(e){var n=m;if(y&&e%1)return"";var o=e<0||0===e&&1/e<0?(e=-e,"-"):"-"===l?"":l;if(v<0){var c=i.formatPrefix(e,d);e=c.scale(e),n=c.symbol+m}else e*=v;var w,_,k=(e=h(e,d)).lastIndexOf(".");if(k<0){var E=b?e.lastIndexOf("e"):-1;E<0?(w=e,_=""):(w=e.substring(0,E),_=e.substring(E))}else w=e.substring(0,k),_=t+e.substring(k+1);!s&&p&&(w=a(w,1/0));var S=g.length+w.length+_.length+(x?0:o.length),M=S<f?new Array(S=f-S+1).join(r):"";return x&&(w=a(M+w,M.length?f-_.length:1/0)),o+=g,e=w+_,("<"===u?o+e+M:">"===u?M+o+e:"^"===u?M.substring(0,S>>=1)+o+e+M.substring(S):o+(x?e:M+e))+n}}}i.formatPrefix=function(e,t){var n=0;return(e=+e)&&(e<0&&(e*=-1),t&&(e=i.round(e,At(e,t))),n=1+Math.floor(1e-12+Math.log(e)/Math.LN10),n=Math.max(-24,Math.min(24,3*Math.floor((n-1)/3)))),Rt[8+n/3]};var Lt=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,Dt=i.map({b:function(e){return e.toString(2)},c:function(e){return String.fromCharCode(e)},o:function(e){return e.toString(8)},x:function(e){return e.toString(16)},X:function(e){return e.toString(16).toUpperCase()},g:function(e,t){return e.toPrecision(t)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},r:function(e,t){return(e=i.round(e,At(e,t))).toFixed(Math.max(0,Math.min(20,At(e*(1+1e-15),t))))}});function It(e){return e+""}var Ut=i.time={},zt=Date;function Ft(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}Ft.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){qt.setUTCDate.apply(this._,arguments)},setDay:function(){qt.setUTCDay.apply(this._,arguments)},setFullYear:function(){qt.setUTCFullYear.apply(this._,arguments)},setHours:function(){qt.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){qt.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){qt.setUTCMinutes.apply(this._,arguments)},setMonth:function(){qt.setUTCMonth.apply(this._,arguments)},setSeconds:function(){qt.setUTCSeconds.apply(this._,arguments)},setTime:function(){qt.setTime.apply(this._,arguments)}};var qt=Date.prototype;function Ht(e,t,n){function r(t){var n=e(t),r=i(n,1);return t-n<r-t?n:r}function o(n){return t(n=e(new zt(n-1)),1),n}function i(e,n){return t(e=new zt(+e),n),e}function a(e,r,i){var a=o(e),u=[];if(i>1)for(;a<r;)n(a)%i||u.push(new Date(+a)),t(a,1);else for(;a<r;)u.push(new Date(+a)),t(a,1);return u}e.floor=e,e.round=r,e.ceil=o,e.offset=i,e.range=a;var u=e.utc=Bt(e);return u.floor=u,u.round=Bt(r),u.ceil=Bt(o),u.offset=Bt(i),u.range=function(e,t,n){try{zt=Ft;var r=new Ft;return r._=e,a(r,t,n)}finally{zt=Date}},e}function Bt(e){return function(t,n){try{zt=Ft;var r=new Ft;return r._=t,e(r,n)._}finally{zt=Date}}}function Vt(e){var t=e.dateTime,n=e.date,r=e.time,o=e.periods,a=e.days,u=e.shortDays,l=e.months,c=e.shortMonths;function s(e){var t=e.length;function n(n){for(var r,o,i,a=[],u=-1,l=0;++u<t;)37===e.charCodeAt(u)&&(a.push(e.slice(l,u)),null!=(o=Wt[r=e.charAt(++u)])&&(r=e.charAt(++u)),(i=w[r])&&(r=i(n,null==o?"e"===r?" ":"0":o)),a.push(r),l=u+1);return a.push(e.slice(l,u)),a.join("")}return n.parse=function(t){var n={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null};if(f(n,e,t,0)!=t.length)return null;"p"in n&&(n.H=n.H%12+12*n.p);var r=null!=n.Z&&zt!==Ft,o=new(r?Ft:zt);return"j"in n?o.setFullYear(n.y,0,n.j):"W"in n||"U"in n?("w"in n||(n.w="W"in n?1:0),o.setFullYear(n.y,0,1),o.setFullYear(n.y,0,"W"in n?(n.w+6)%7+7*n.W-(o.getDay()+5)%7:n.w+7*n.U-(o.getDay()+6)%7)):o.setFullYear(n.y,n.m,n.d),o.setHours(n.H+(n.Z/100|0),n.M+n.Z%100,n.S,n.L),r?o._:o},n.toString=function(){return e},n}function f(e,t,n,r){for(var o,i,a,u=0,l=t.length,c=n.length;u<l;){if(r>=c)return-1;if(37===(o=t.charCodeAt(u++))){if(a=t.charAt(u++),!(i=_[a in Wt?t.charAt(u++):a])||(r=i(e,n,r))<0)return-1}else if(o!=n.charCodeAt(r++))return-1}return r}s.utc=function(e){var t=s(e);function n(e){try{var n=new(zt=Ft);return n._=e,t(n)}finally{zt=Date}}return n.parse=function(e){try{zt=Ft;var n=t.parse(e);return n&&n._}finally{zt=Date}},n.toString=t.toString,n},s.multi=s.utc.multi=dn;var p=i.map(),d=Yt(a),h=Kt(a),v=Yt(u),g=Kt(u),m=Yt(l),y=Kt(l),b=Yt(c),x=Kt(c);o.forEach(function(e,t){p.set(e.toLowerCase(),t)});var w={a:function(e){return u[e.getDay()]},A:function(e){return a[e.getDay()]},b:function(e){return c[e.getMonth()]},B:function(e){return l[e.getMonth()]},c:s(t),d:function(e,t){return $t(e.getDate(),t,2)},e:function(e,t){return $t(e.getDate(),t,2)},H:function(e,t){return $t(e.getHours(),t,2)},I:function(e,t){return $t(e.getHours()%12||12,t,2)},j:function(e,t){return $t(1+Ut.dayOfYear(e),t,3)},L:function(e,t){return $t(e.getMilliseconds(),t,3)},m:function(e,t){return $t(e.getMonth()+1,t,2)},M:function(e,t){return $t(e.getMinutes(),t,2)},p:function(e){return o[+(e.getHours()>=12)]},S:function(e,t){return $t(e.getSeconds(),t,2)},U:function(e,t){return $t(Ut.sundayOfYear(e),t,2)},w:function(e){return e.getDay()},W:function(e,t){return $t(Ut.mondayOfYear(e),t,2)},x:s(n),X:s(r),y:function(e,t){return $t(e.getFullYear()%100,t,2)},Y:function(e,t){return $t(e.getFullYear()%1e4,t,4)},Z:fn,"%":function(){return"%"}},_={a:function(e,t,n){v.lastIndex=0;var r=v.exec(t.slice(n));return r?(e.w=g.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(e,t,n){d.lastIndex=0;var r=d.exec(t.slice(n));return r?(e.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(e,t,n){b.lastIndex=0;var r=b.exec(t.slice(n));return r?(e.m=x.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(e,t,n){m.lastIndex=0;var r=m.exec(t.slice(n));return r?(e.m=y.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(e,t,n){return f(e,w.c.toString(),t,n)},d:on,e:on,H:un,I:un,j:an,L:sn,m:rn,M:ln,p:function(e,t,n){var r=p.get(t.slice(n,n+=2).toLowerCase());return null==r?-1:(e.p=r,n)},S:cn,U:Zt,w:Xt,W:Jt,x:function(e,t,n){return f(e,w.x.toString(),t,n)},X:function(e,t,n){return f(e,w.X.toString(),t,n)},y:tn,Y:en,Z:nn,"%":pn};return s}Ut.year=Ht(function(e){return(e=Ut.day(e)).setMonth(0,1),e},function(e,t){e.setFullYear(e.getFullYear()+t)},function(e){return e.getFullYear()}),Ut.years=Ut.year.range,Ut.years.utc=Ut.year.utc.range,Ut.day=Ht(function(e){var t=new zt(2e3,0);return t.setFullYear(e.getFullYear(),e.getMonth(),e.getDate()),t},function(e,t){e.setDate(e.getDate()+t)},function(e){return e.getDate()-1}),Ut.days=Ut.day.range,Ut.days.utc=Ut.day.utc.range,Ut.dayOfYear=function(e){var t=Ut.year(e);return Math.floor((e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(e,t){t=7-t;var n=Ut[e]=Ht(function(e){return(e=Ut.day(e)).setDate(e.getDate()-(e.getDay()+t)%7),e},function(e,t){e.setDate(e.getDate()+7*Math.floor(t))},function(e){var n=Ut.year(e).getDay();return Math.floor((Ut.dayOfYear(e)+(n+t)%7)/7)-(n!==t)});Ut[e+"s"]=n.range,Ut[e+"s"].utc=n.utc.range,Ut[e+"OfYear"]=function(e){var n=Ut.year(e).getDay();return Math.floor((Ut.dayOfYear(e)+(n+t)%7)/7)}}),Ut.week=Ut.sunday,Ut.weeks=Ut.sunday.range,Ut.weeks.utc=Ut.sunday.utc.range,Ut.weekOfYear=Ut.sundayOfYear;var Wt={"-":"",_:" ",0:"0"},Gt=/^\s*\d+/,Qt=/^%/;function $t(e,t,n){var r=e<0?"-":"",o=(r?-e:e)+"",i=o.length;return r+(i<n?new Array(n-i+1).join(t)+o:o)}function Yt(e){return new RegExp("^(?:"+e.map(i.requote).join("|")+")","i")}function Kt(e){for(var t=new E,n=-1,r=e.length;++n<r;)t.set(e[n].toLowerCase(),n);return t}function Xt(e,t,n){Gt.lastIndex=0;var r=Gt.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function Zt(e,t,n){Gt.lastIndex=0;var r=Gt.exec(t.slice(n));return r?(e.U=+r[0],n+r[0].length):-1}function Jt(e,t,n){Gt.lastIndex=0;var r=Gt.exec(t.slice(n));return r?(e.W=+r[0],n+r[0].length):-1}function en(e,t,n){Gt.lastIndex=0;var r=Gt.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function tn(e,t,n){Gt.lastIndex=0;var r,o=Gt.exec(t.slice(n,n+2));return o?(e.y=(r=+o[0])+(r>68?1900:2e3),n+o[0].length):-1}function nn(e,t,n){return/^[+-]\d{4}$/.test(t=t.slice(n,n+5))?(e.Z=-t,n+5):-1}function rn(e,t,n){Gt.lastIndex=0;var r=Gt.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function on(e,t,n){Gt.lastIndex=0;var r=Gt.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function an(e,t,n){Gt.lastIndex=0;var r=Gt.exec(t.slice(n,n+3));return r?(e.j=+r[0],n+r[0].length):-1}function un(e,t,n){Gt.lastIndex=0;var r=Gt.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function ln(e,t,n){Gt.lastIndex=0;var r=Gt.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function cn(e,t,n){Gt.lastIndex=0;var r=Gt.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function sn(e,t,n){Gt.lastIndex=0;var r=Gt.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function fn(e){var t=e.getTimezoneOffset(),n=t>0?"-":"+",r=_(t)/60|0,o=_(t)%60;return n+$t(r,"0",2)+$t(o,"0",2)}function pn(e,t,n){Qt.lastIndex=0;var r=Qt.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function dn(e){for(var t=e.length,n=-1;++n<t;)e[n][0]=this(e[n][0]);return function(t){for(var n=0,r=e[n];!r[1](t);)r=e[++n];return r[0](t)}}i.locale=function(e){return{numberFormat:jt(e),timeFormat:Vt(e)}};var hn=i.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function vn(){}i.format=hn.numberFormat,i.geo={},vn.prototype={s:0,t:0,add:function(e){mn(e,this.t,gn),mn(gn.s,this.s,this),this.s?this.t+=gn.t:this.s=gn.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var gn=new vn;function mn(e,t,n){var r=n.s=e+t,o=r-e,i=r-o;n.t=e-i+(t-o)}function yn(e,t){e&&xn.hasOwnProperty(e.type)&&xn[e.type](e,t)}i.geo.stream=function(e,t){e&&bn.hasOwnProperty(e.type)?bn[e.type](e,t):yn(e,t)};var bn={Feature:function(e,t){yn(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,o=n.length;++r<o;)yn(n[r].geometry,t)}},xn={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){wn(e.coordinates,t,0)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)wn(n[r],t,0)},Polygon:function(e,t){_n(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)_n(n[r],t)},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,o=n.length;++r<o;)yn(n[r],t)}};function wn(e,t,n){var r,o=-1,i=e.length-n;for(t.lineStart();++o<i;)r=e[o],t.point(r[0],r[1],r[2]);t.lineEnd()}function _n(e,t){var n=-1,r=e.length;for(t.polygonStart();++n<r;)wn(e[n],t,1);t.polygonEnd()}i.geo.area=function(e){return kn=0,i.geo.stream(e,Dn),kn};var kn,En,Sn,Mn,Tn,Cn,Pn,On,Nn,An,Rn,jn,Ln=new vn,Dn={sphere:function(){kn+=4*Pe},point:z,lineStart:z,lineEnd:z,polygonStart:function(){Ln.reset(),Dn.lineStart=In},polygonEnd:function(){var e=2*Ln;kn+=e<0?4*Pe+e:e,Dn.lineStart=Dn.lineEnd=Dn.point=z}};function In(){var e,t,n,r,o;function i(e,t){t=t*Re/2+Pe/4;var i=(e*=Re)-n,a=i>=0?1:-1,u=a*i,l=Math.cos(t),c=Math.sin(t),s=o*c,f=r*l+s*Math.cos(u),p=s*a*Math.sin(u);Ln.add(Math.atan2(p,f)),n=e,r=l,o=c}Dn.point=function(a,u){Dn.point=i,n=(e=a)*Re,r=Math.cos(u=(t=u)*Re/2+Pe/4),o=Math.sin(u)},Dn.lineEnd=function(){i(e,t)}}function Un(e){var t=e[0],n=e[1],r=Math.cos(n);return[r*Math.cos(t),r*Math.sin(t),Math.sin(n)]}function zn(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function Fn(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function qn(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function Hn(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function Bn(e){var t=Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}function Vn(e){return[Math.atan2(e[1],e[0]),Ue(e[2])]}function Wn(e,t){return _(e[0]-t[0])<Te&&_(e[1]-t[1])<Te}i.geo.bounds=function(){var e,t,n,r,o,a,u,l,c,s,f,p={point:d,lineStart:v,lineEnd:g,polygonStart:function(){p.point=m,p.lineStart=y,p.lineEnd=b,c=0,Dn.polygonStart()},polygonEnd:function(){Dn.polygonEnd(),p.point=d,p.lineStart=v,p.lineEnd=g,Ln<0?(e=-(n=180),t=-(r=90)):c>Te?r=90:c<-Te&&(t=-90),f[0]=e,f[1]=n}};function d(o,i){s.push(f=[e=o,n=o]),i<t&&(t=i),i>r&&(r=i)}function h(i,a){var u=Un([i*Re,a*Re]);if(l){var c=Fn(l,u),s=Fn([c[1],-c[0],0],c);Bn(s),s=Vn(s);var f=i-o,p=f>0?1:-1,h=s[0]*je*p,v=_(f)>180;if(v^(p*o<h&&h<p*i))(g=s[1]*je)>r&&(r=g);else if(v^(p*o<(h=(h+360)%360-180)&&h<p*i)){var g;(g=-s[1]*je)<t&&(t=g)}else a<t&&(t=a),a>r&&(r=a);v?i<o?x(e,i)>x(e,n)&&(n=i):x(i,n)>x(e,n)&&(e=i):n>=e?(i<e&&(e=i),i>n&&(n=i)):i>o?x(e,i)>x(e,n)&&(n=i):x(i,n)>x(e,n)&&(e=i)}else d(i,a);l=u,o=i}function v(){p.point=h}function g(){f[0]=e,f[1]=n,p.point=d,l=null}function m(e,t){if(l){var n=e-o;c+=_(n)>180?n+(n>0?360:-360):n}else a=e,u=t;Dn.point(e,t),h(e,t)}function y(){Dn.lineStart()}function b(){m(a,u),Dn.lineEnd(),_(c)>Te&&(e=-(n=180)),f[0]=e,f[1]=n,l=null}function x(e,t){return(t-=e)<0?t+360:t}function w(e,t){return e[0]-t[0]}function k(e,t){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}return function(o){if(r=n=-(e=t=1/0),s=[],i.geo.stream(o,p),c=s.length){s.sort(w);for(var a=1,u=[v=s[0]];a<c;++a)k((d=s[a])[0],v)||k(d[1],v)?(x(v[0],d[1])>x(v[0],v[1])&&(v[1]=d[1]),x(d[0],v[1])>x(v[0],v[1])&&(v[0]=d[0])):u.push(v=d);for(var l,c,d,h=-1/0,v=(a=0,u[c=u.length-1]);a<=c;v=d,++a)d=u[a],(l=x(v[1],d[0]))>h&&(h=l,e=d[0],n=v[1])}return s=f=null,e===1/0||t===1/0?[[NaN,NaN],[NaN,NaN]]:[[e,t],[n,r]]}}(),i.geo.centroid=function(e){En=Sn=Mn=Tn=Cn=Pn=On=Nn=An=Rn=jn=0,i.geo.stream(e,Gn);var t=An,n=Rn,r=jn,o=t*t+n*n+r*r;return o<Ce&&(t=Pn,n=On,r=Nn,Sn<Te&&(t=Mn,n=Tn,r=Cn),(o=t*t+n*n+r*r)<Ce)?[NaN,NaN]:[Math.atan2(n,t)*je,Ue(r/Math.sqrt(o))*je]};var Gn={sphere:z,point:Qn,lineStart:Yn,lineEnd:Kn,polygonStart:function(){Gn.lineStart=Xn},polygonEnd:function(){Gn.lineStart=Yn}};function Qn(e,t){e*=Re;var n=Math.cos(t*=Re);$n(n*Math.cos(e),n*Math.sin(e),Math.sin(t))}function $n(e,t,n){Mn+=(e-Mn)/++En,Tn+=(t-Tn)/En,Cn+=(n-Cn)/En}function Yn(){var e,t,n;function r(r,o){r*=Re;var i=Math.cos(o*=Re),a=i*Math.cos(r),u=i*Math.sin(r),l=Math.sin(o),c=Math.atan2(Math.sqrt((c=t*l-n*u)*c+(c=n*a-e*l)*c+(c=e*u-t*a)*c),e*a+t*u+n*l);Sn+=c,Pn+=c*(e+(e=a)),On+=c*(t+(t=u)),Nn+=c*(n+(n=l)),$n(e,t,n)}Gn.point=function(o,i){o*=Re;var a=Math.cos(i*=Re);e=a*Math.cos(o),t=a*Math.sin(o),n=Math.sin(i),Gn.point=r,$n(e,t,n)}}function Kn(){Gn.point=Qn}function Xn(){var e,t,n,r,o;function i(e,t){e*=Re;var i=Math.cos(t*=Re),a=i*Math.cos(e),u=i*Math.sin(e),l=Math.sin(t),c=r*l-o*u,s=o*a-n*l,f=n*u-r*a,p=Math.sqrt(c*c+s*s+f*f),d=n*a+r*u+o*l,h=p&&-Ie(d)/p,v=Math.atan2(p,d);An+=h*c,Rn+=h*s,jn+=h*f,Sn+=v,Pn+=v*(n+(n=a)),On+=v*(r+(r=u)),Nn+=v*(o+(o=l)),$n(n,r,o)}Gn.point=function(a,u){e=a,t=u,Gn.point=i,a*=Re;var l=Math.cos(u*=Re);n=l*Math.cos(a),r=l*Math.sin(a),o=Math.sin(u),$n(n,r,o)},Gn.lineEnd=function(){i(e,t),Gn.lineEnd=Kn,Gn.point=Qn}}function Zn(e,t){function n(n,r){return n=e(n,r),t(n[0],n[1])}return e.invert&&t.invert&&(n.invert=function(n,r){return(n=t.invert(n,r))&&e.invert(n[0],n[1])}),n}function Jn(){return!0}function er(e,t,n,r,o){var i=[],a=[];if(e.forEach(function(e){if(!((t=e.length-1)<=0)){var t,n=e[0],r=e[t];if(Wn(n,r)){o.lineStart();for(var u=0;u<t;++u)o.point((n=e[u])[0],n[1]);o.lineEnd()}else{var l=new nr(n,e,null,!0),c=new nr(n,null,l,!1);l.o=c,i.push(l),a.push(c),l=new nr(r,e,null,!1),c=new nr(r,null,l,!0),l.o=c,i.push(l),a.push(c)}}}),a.sort(t),tr(i),tr(a),i.length){for(var u=0,l=n,c=a.length;u<c;++u)a[u].e=l=!l;for(var s,f,p=i[0];;){for(var d=p,h=!0;d.v;)if((d=d.n)===p)return;s=d.z,o.lineStart();do{if(d.v=d.o.v=!0,d.e){if(h)for(u=0,c=s.length;u<c;++u)o.point((f=s[u])[0],f[1]);else r(d.x,d.n.x,1,o);d=d.n}else{if(h)for(u=(s=d.p.z).length-1;u>=0;--u)o.point((f=s[u])[0],f[1]);else r(d.x,d.p.x,-1,o);d=d.p}s=(d=d.o).z,h=!h}while(!d.v);o.lineEnd()}}}function tr(e){if(t=e.length){for(var t,n,r=0,o=e[0];++r<t;)o.n=n=e[r],n.p=o,o=n;o.n=n=e[0],n.p=o}}function nr(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function rr(e,t,n,r){return function(o,a){var u,l=t(a),c=o.invert(r[0],r[1]),s={point:f,lineStart:d,lineEnd:h,polygonStart:function(){s.point=x,s.lineStart=w,s.lineEnd=_,u=[],v=[]},polygonEnd:function(){s.point=f,s.lineStart=d,s.lineEnd=h,u=i.merge(u);var e=function(e,t){var n=e[0],r=e[1],o=[Math.sin(n),-Math.cos(n),0],i=0,a=0;Ln.reset();for(var u=0,l=t.length;u<l;++u){var c=t[u],s=c.length;if(s)for(var f=c[0],p=f[0],d=f[1]/2+Pe/4,h=Math.sin(d),v=Math.cos(d),g=1;;){g===s&&(g=0);var m=(e=c[g])[0],y=e[1]/2+Pe/4,b=Math.sin(y),x=Math.cos(y),w=m-p,_=w>=0?1:-1,k=_*w,E=k>Pe,S=h*b;if(Ln.add(Math.atan2(S*_*Math.sin(k),v*x+S*Math.cos(k))),i+=E?w+_*Oe:w,E^p>=n^m>=n){var M=Fn(Un(f),Un(e));Bn(M);var T=Fn(o,M);Bn(T);var C=(E^w>=0?-1:1)*Ue(T[2]);(r>C||r===C&&(M[0]||M[1]))&&(a+=E^w>=0?1:-1)}if(!g++)break;p=m,h=b,v=x,f=e}}return(i<-Te||i<Te&&Ln<-Te)^1&a}(c,v);u.length?(b||(a.polygonStart(),b=!0),er(u,ar,e,n,a)):e&&(b||(a.polygonStart(),b=!0),a.lineStart(),n(null,null,1,a),a.lineEnd()),b&&(a.polygonEnd(),b=!1),u=v=null},sphere:function(){a.polygonStart(),a.lineStart(),n(null,null,1,a),a.lineEnd(),a.polygonEnd()}};function f(t,n){var r=o(t,n);e(t=r[0],n=r[1])&&a.point(t,n)}function p(e,t){var n=o(e,t);l.point(n[0],n[1])}function d(){s.point=p,l.lineStart()}function h(){s.point=f,l.lineEnd()}var v,g,m=ir(),y=t(m),b=!1;function x(e,t){g.push([e,t]);var n=o(e,t);y.point(n[0],n[1])}function w(){y.lineStart(),g=[]}function _(){x(g[0][0],g[0][1]),y.lineEnd();var e,t=y.clean(),n=m.buffer(),r=n.length;if(g.pop(),v.push(g),g=null,r)if(1&t){var o,i=-1;if((r=(e=n[0]).length-1)>0){for(b||(a.polygonStart(),b=!0),a.lineStart();++i<r;)a.point((o=e[i])[0],o[1]);a.lineEnd()}}else r>1&&2&t&&n.push(n.pop().concat(n.shift())),u.push(n.filter(or))}return s}}function or(e){return e.length>1}function ir(){var e,t=[];return{lineStart:function(){t.push(e=[])},point:function(t,n){e.push([t,n])},lineEnd:z,buffer:function(){var n=t;return t=[],e=null,n},rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))}}}function ar(e,t){return((e=e.x)[0]<0?e[1]-Ae-Te:Ae-e[1])-((t=t.x)[0]<0?t[1]-Ae-Te:Ae-t[1])}var ur=rr(Jn,function(e){var t,n=NaN,r=NaN,o=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(i,a){var u=i>0?Pe:-Pe,l=_(i-n);_(l-Pe)<Te?(e.point(n,r=(r+a)/2>0?Ae:-Ae),e.point(o,r),e.lineEnd(),e.lineStart(),e.point(u,r),e.point(i,r),t=0):o!==u&&l>=Pe&&(_(n-o)<Te&&(n-=o*Te),_(i-u)<Te&&(i-=u*Te),r=function(e,t,n,r){var o,i,a=Math.sin(e-n);return _(a)>Te?Math.atan((Math.sin(t)*(i=Math.cos(r))*Math.sin(n)-Math.sin(r)*(o=Math.cos(t))*Math.sin(e))/(o*i*a)):(t+r)/2}(n,r,i,a),e.point(o,r),e.lineEnd(),e.lineStart(),e.point(u,r),t=0),e.point(n=i,r=a),o=u},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}},function(e,t,n,r){var o;if(null==e)o=n*Ae,r.point(-Pe,o),r.point(0,o),r.point(Pe,o),r.point(Pe,0),r.point(Pe,-o),r.point(0,-o),r.point(-Pe,-o),r.point(-Pe,0),r.point(-Pe,o);else if(_(e[0]-t[0])>Te){var i=e[0]<t[0]?Pe:-Pe;o=n*i/2,r.point(-i,o),r.point(0,o),r.point(i,o)}else r.point(t[0],t[1])},[-Pe,-Pe/2]);function lr(e,t,n,r){return function(o){var i,a=o.a,u=o.b,l=a.x,c=a.y,s=0,f=1,p=u.x-l,d=u.y-c;if(i=e-l,p||!(i>0)){if(i/=p,p<0){if(i<s)return;i<f&&(f=i)}else if(p>0){if(i>f)return;i>s&&(s=i)}if(i=n-l,p||!(i<0)){if(i/=p,p<0){if(i>f)return;i>s&&(s=i)}else if(p>0){if(i<s)return;i<f&&(f=i)}if(i=t-c,d||!(i>0)){if(i/=d,d<0){if(i<s)return;i<f&&(f=i)}else if(d>0){if(i>f)return;i>s&&(s=i)}if(i=r-c,d||!(i<0)){if(i/=d,d<0){if(i>f)return;i>s&&(s=i)}else if(d>0){if(i<s)return;i<f&&(f=i)}return s>0&&(o.a={x:l+s*p,y:c+s*d}),f<1&&(o.b={x:l+f*p,y:c+f*d}),o}}}}}}var cr=1e9;function sr(e,t,n,r){return function(l){var c,s,f,p,d,h,v,g,m,y,b,x=l,w=ir(),_=lr(e,t,n,r),k={point:M,lineStart:function(){k.point=T,s&&s.push(f=[]);y=!0,m=!1,v=g=NaN},lineEnd:function(){c&&(T(p,d),h&&m&&w.rejoin(),c.push(w.buffer()));k.point=M,m&&l.lineEnd()},polygonStart:function(){l=w,c=[],s=[],b=!0},polygonEnd:function(){l=x,c=i.merge(c);var t=function(e){for(var t=0,n=s.length,r=e[1],o=0;o<n;++o)for(var i,a=1,u=s[o],l=u.length,c=u[0];a<l;++a)i=u[a],c[1]<=r?i[1]>r&&De(c,i,e)>0&&++t:i[1]<=r&&De(c,i,e)<0&&--t,c=i;return 0!==t}([e,r]),n=b&&t,o=c.length;(n||o)&&(l.polygonStart(),n&&(l.lineStart(),E(null,null,1,l),l.lineEnd()),o&&er(c,a,t,E,l),l.polygonEnd()),c=s=f=null}};function E(i,a,l,c){var s=0,f=0;if(null==i||(s=o(i,l))!==(f=o(a,l))||u(i,a)<0^l>0)do{c.point(0===s||3===s?e:n,s>1?r:t)}while((s=(s+l+4)%4)!==f);else c.point(a[0],a[1])}function S(o,i){return e<=o&&o<=n&&t<=i&&i<=r}function M(e,t){S(e,t)&&l.point(e,t)}function T(e,t){var n=S(e=Math.max(-cr,Math.min(cr,e)),t=Math.max(-cr,Math.min(cr,t)));if(s&&f.push([e,t]),y)p=e,d=t,h=n,y=!1,n&&(l.lineStart(),l.point(e,t));else if(n&&m)l.point(e,t);else{var r={a:{x:v,y:g},b:{x:e,y:t}};_(r)?(m||(l.lineStart(),l.point(r.a.x,r.a.y)),l.point(r.b.x,r.b.y),n||l.lineEnd(),b=!1):n&&(l.lineStart(),l.point(e,t),b=!1)}v=e,g=t,m=n}return k};function o(r,o){return _(r[0]-e)<Te?o>0?0:3:_(r[0]-n)<Te?o>0?2:1:_(r[1]-t)<Te?o>0?1:0:o>0?3:2}function a(e,t){return u(e.x,t.x)}function u(e,t){var n=o(e,1),r=o(t,1);return n!==r?n-r:0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]}}function fr(e){var t=0,n=Pe/3,r=Lr(e),o=r(t,n);return o.parallels=function(e){return arguments.length?r(t=e[0]*Pe/180,n=e[1]*Pe/180):[t/Pe*180,n/Pe*180]},o}function pr(e,t){var n=Math.sin(e),r=(n+Math.sin(t))/2,o=1+n*(2*r-n),i=Math.sqrt(o)/r;function a(e,t){var n=Math.sqrt(o-2*r*Math.sin(t))/r;return[n*Math.sin(e*=r),i-n*Math.cos(e)]}return a.invert=function(e,t){var n=i-t;return[Math.atan2(e,n)/r,Ue((o-(e*e+n*n)*r*r)/(2*r))]},a}i.geo.clipExtent=function(){var e,t,n,r,o,i,a={stream:function(e){return o&&(o.valid=!1),(o=i(e)).valid=!0,o},extent:function(u){return arguments.length?(i=sr(e=+u[0][0],t=+u[0][1],n=+u[1][0],r=+u[1][1]),o&&(o.valid=!1,o=null),a):[[e,t],[n,r]]}};return a.extent([[0,0],[960,500]])},(i.geo.conicEqualArea=function(){return fr(pr)}).raw=pr,i.geo.albers=function(){return i.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},i.geo.albersUsa=function(){var e,t,n,r,o=i.geo.albers(),a=i.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=i.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(t,n){e=[t,n]}};function c(o){var i=o[0],a=o[1];return e=null,t(i,a),e||(n(i,a),e)||r(i,a),e}return c.invert=function(e){var t=o.scale(),n=o.translate(),r=(e[0]-n[0])/t,i=(e[1]-n[1])/t;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?u:o).invert(e)},c.stream=function(e){var t=o.stream(e),n=a.stream(e),r=u.stream(e);return{point:function(e,o){t.point(e,o),n.point(e,o),r.point(e,o)},sphere:function(){t.sphere(),n.sphere(),r.sphere()},lineStart:function(){t.lineStart(),n.lineStart(),r.lineStart()},lineEnd:function(){t.lineEnd(),n.lineEnd(),r.lineEnd()},polygonStart:function(){t.polygonStart(),n.polygonStart(),r.polygonStart()},polygonEnd:function(){t.polygonEnd(),n.polygonEnd(),r.polygonEnd()}}},c.precision=function(e){return arguments.length?(o.precision(e),a.precision(e),u.precision(e),c):o.precision()},c.scale=function(e){return arguments.length?(o.scale(e),a.scale(.35*e),u.scale(e),c.translate(o.translate())):o.scale()},c.translate=function(e){if(!arguments.length)return o.translate();var i=o.scale(),s=+e[0],f=+e[1];return t=o.translate(e).clipExtent([[s-.455*i,f-.238*i],[s+.455*i,f+.238*i]]).stream(l).point,n=a.translate([s-.307*i,f+.201*i]).clipExtent([[s-.425*i+Te,f+.12*i+Te],[s-.214*i-Te,f+.234*i-Te]]).stream(l).point,r=u.translate([s-.205*i,f+.212*i]).clipExtent([[s-.214*i+Te,f+.166*i+Te],[s-.115*i-Te,f+.234*i-Te]]).stream(l).point,c},c.scale(1070)};var dr,hr,vr,gr,mr,yr,br={point:z,lineStart:z,lineEnd:z,polygonStart:function(){hr=0,br.lineStart=xr},polygonEnd:function(){br.lineStart=br.lineEnd=br.point=z,dr+=_(hr/2)}};function xr(){var e,t,n,r;function o(e,t){hr+=r*e-n*t,n=e,r=t}br.point=function(i,a){br.point=o,e=n=i,t=r=a},br.lineEnd=function(){o(e,t)}}var wr={point:function(e,t){e<vr&&(vr=e);e>mr&&(mr=e);t<gr&&(gr=t);t>yr&&(yr=t)},lineStart:z,lineEnd:z,polygonStart:z,polygonEnd:z};function _r(){var e=kr(4.5),t=[],n={point:r,lineStart:function(){n.point=o},lineEnd:a,polygonStart:function(){n.lineEnd=u},polygonEnd:function(){n.lineEnd=a,n.point=r},pointRadius:function(t){return e=kr(t),n},result:function(){if(t.length){var e=t.join("");return t=[],e}}};function r(n,r){t.push("M",n,",",r,e)}function o(e,r){t.push("M",e,",",r),n.point=i}function i(e,n){t.push("L",e,",",n)}function a(){n.point=r}function u(){t.push("Z")}return n}function kr(e){return"m0,"+e+"a"+e+","+e+" 0 1,1 0,"+-2*e+"a"+e+","+e+" 0 1,1 0,"+2*e+"z"}var Er,Sr={point:Mr,lineStart:Tr,lineEnd:Cr,polygonStart:function(){Sr.lineStart=Pr},polygonEnd:function(){Sr.point=Mr,Sr.lineStart=Tr,Sr.lineEnd=Cr}};function Mr(e,t){Mn+=e,Tn+=t,++Cn}function Tr(){var e,t;function n(n,r){var o=n-e,i=r-t,a=Math.sqrt(o*o+i*i);Pn+=a*(e+n)/2,On+=a*(t+r)/2,Nn+=a,Mr(e=n,t=r)}Sr.point=function(r,o){Sr.point=n,Mr(e=r,t=o)}}function Cr(){Sr.point=Mr}function Pr(){var e,t,n,r;function o(e,t){var o=e-n,i=t-r,a=Math.sqrt(o*o+i*i);Pn+=a*(n+e)/2,On+=a*(r+t)/2,Nn+=a,An+=(a=r*e-n*t)*(n+e),Rn+=a*(r+t),jn+=3*a,Mr(n=e,r=t)}Sr.point=function(i,a){Sr.point=o,Mr(e=n=i,t=r=a)},Sr.lineEnd=function(){o(e,t)}}function Or(e){var t=4.5,n={point:r,lineStart:function(){n.point=o},lineEnd:a,polygonStart:function(){n.lineEnd=u},polygonEnd:function(){n.lineEnd=a,n.point=r},pointRadius:function(e){return t=e,n},result:z};function r(n,r){e.moveTo(n+t,r),e.arc(n,r,t,0,Oe)}function o(t,r){e.moveTo(t,r),n.point=i}function i(t,n){e.lineTo(t,n)}function a(){n.point=r}function u(){e.closePath()}return n}function Nr(e){var t=.5,n=Math.cos(30*Re),r=16;function o(t){return(r?function(t){var n,o,a,u,l,c,s,f,p,d,h,v,g={point:m,lineStart:y,lineEnd:x,polygonStart:function(){t.polygonStart(),g.lineStart=w},polygonEnd:function(){t.polygonEnd(),g.lineStart=y}};function m(n,r){n=e(n,r),t.point(n[0],n[1])}function y(){f=NaN,g.point=b,t.lineStart()}function b(n,o){var a=Un([n,o]),u=e(n,o);i(f,p,s,d,h,v,f=u[0],p=u[1],s=n,d=a[0],h=a[1],v=a[2],r,t),t.point(f,p)}function x(){g.point=m,t.lineEnd()}function w(){y(),g.point=_,g.lineEnd=k}function _(e,t){b(n=e,t),o=f,a=p,u=d,l=h,c=v,g.point=b}function k(){i(f,p,s,d,h,v,o,a,n,u,l,c,r,t),g.lineEnd=x,x()}return g}:function(t){return Rr(t,function(n,r){n=e(n,r),t.point(n[0],n[1])})})(t)}function i(r,o,a,u,l,c,s,f,p,d,h,v,g,m){var y=s-r,b=f-o,x=y*y+b*b;if(x>4*t&&g--){var w=u+d,k=l+h,E=c+v,S=Math.sqrt(w*w+k*k+E*E),M=Math.asin(E/=S),T=_(_(E)-1)<Te||_(a-p)<Te?(a+p)/2:Math.atan2(k,w),C=e(T,M),P=C[0],O=C[1],N=P-r,A=O-o,R=b*N-y*A;(R*R/x>t||_((y*N+b*A)/x-.5)>.3||u*d+l*h+c*v<n)&&(i(r,o,a,u,l,c,P,O,T,w/=S,k/=S,E,g,m),m.point(P,O),i(P,O,T,w,k,E,s,f,p,d,h,v,g,m))}}return o.precision=function(e){return arguments.length?(r=(t=e*e)>0&&16,o):Math.sqrt(t)},o}function Ar(e){this.stream=e}function Rr(e,t){return{point:t,sphere:function(){e.sphere()},lineStart:function(){e.lineStart()},lineEnd:function(){e.lineEnd()},polygonStart:function(){e.polygonStart()},polygonEnd:function(){e.polygonEnd()}}}function jr(e){return Lr(function(){return e})()}function Lr(e){var t,n,r,o,a,u,l=Nr(function(e,n){return[(e=t(e,n))[0]*c+o,a-e[1]*c]}),c=150,s=480,f=250,p=0,d=0,h=0,v=0,g=0,m=ur,y=L,b=null,x=null;function w(e){return[(e=r(e[0]*Re,e[1]*Re))[0]*c+o,a-e[1]*c]}function k(e){return(e=r.invert((e[0]-o)/c,(a-e[1])/c))&&[e[0]*je,e[1]*je]}function E(){r=Zn(n=zr(h,v,g),t);var e=t(p,d);return o=s-e[0]*c,a=f+e[1]*c,S()}function S(){return u&&(u.valid=!1,u=null),w}return w.stream=function(e){return u&&(u.valid=!1),(u=Dr(m(n,l(y(e))))).valid=!0,u},w.clipAngle=function(e){return arguments.length?(m=null==e?(b=e,ur):function(e){var t=Math.cos(e),n=t>0,r=_(t)>Te;return rr(o,function(e){var t,u,l,c,s;return{lineStart:function(){c=l=!1,s=1},point:function(f,p){var d,h=[f,p],v=o(f,p),g=n?v?0:a(f,p):v?a(f+(f<0?Pe:-Pe),p):0;if(!t&&(c=l=v)&&e.lineStart(),v!==l&&(d=i(t,h),(Wn(t,d)||Wn(h,d))&&(h[0]+=Te,h[1]+=Te,v=o(h[0],h[1]))),v!==l)s=0,v?(e.lineStart(),d=i(h,t),e.point(d[0],d[1])):(d=i(t,h),e.point(d[0],d[1]),e.lineEnd()),t=d;else if(r&&t&&n^v){var m;g&u||!(m=i(h,t,!0))||(s=0,n?(e.lineStart(),e.point(m[0][0],m[0][1]),e.point(m[1][0],m[1][1]),e.lineEnd()):(e.point(m[1][0],m[1][1]),e.lineEnd(),e.lineStart(),e.point(m[0][0],m[0][1])))}!v||t&&Wn(t,h)||e.point(h[0],h[1]),t=h,l=v,u=g},lineEnd:function(){l&&e.lineEnd(),t=null},clean:function(){return s|(c&&l)<<1}}},Br(e,6*Re),n?[0,-e]:[-Pe,e-Pe]);function o(e,n){return Math.cos(e)*Math.cos(n)>t}function i(e,n,r){var o=[1,0,0],i=Fn(Un(e),Un(n)),a=zn(i,i),u=i[0],l=a-u*u;if(!l)return!r&&e;var c=t*a/l,s=-t*u/l,f=Fn(o,i),p=Hn(o,c);qn(p,Hn(i,s));var d=f,h=zn(p,d),v=zn(d,d),g=h*h-v*(zn(p,p)-1);if(!(g<0)){var m=Math.sqrt(g),y=Hn(d,(-h-m)/v);if(qn(y,p),y=Vn(y),!r)return y;var b,x=e[0],w=n[0],k=e[1],E=n[1];w<x&&(b=x,x=w,w=b);var S=w-x,M=_(S-Pe)<Te;if(!M&&E<k&&(b=k,k=E,E=b),M||S<Te?M?k+E>0^y[1]<(_(y[0]-x)<Te?k:E):k<=y[1]&&y[1]<=E:S>Pe^(x<=y[0]&&y[0]<=w)){var T=Hn(d,(-h+m)/v);return qn(T,p),[y,Vn(T)]}}}function a(t,r){var o=n?e:Pe-e,i=0;return t<-o?i|=1:t>o&&(i|=2),r<-o?i|=4:r>o&&(i|=8),i}}((b=+e)*Re),S()):b},w.clipExtent=function(e){return arguments.length?(x=e,y=e?sr(e[0][0],e[0][1],e[1][0],e[1][1]):L,S()):x},w.scale=function(e){return arguments.length?(c=+e,E()):c},w.translate=function(e){return arguments.length?(s=+e[0],f=+e[1],E()):[s,f]},w.center=function(e){return arguments.length?(p=e[0]%360*Re,d=e[1]%360*Re,E()):[p*je,d*je]},w.rotate=function(e){return arguments.length?(h=e[0]%360*Re,v=e[1]%360*Re,g=e.length>2?e[2]%360*Re:0,E()):[h*je,v*je,g*je]},i.rebind(w,l,"precision"),function(){return t=e.apply(this,arguments),w.invert=t.invert&&k,E()}}function Dr(e){return Rr(e,function(t,n){e.point(t*Re,n*Re)})}function Ir(e,t){return[e,t]}function Ur(e,t){return[e>Pe?e-Oe:e<-Pe?e+Oe:e,t]}function zr(e,t,n){return e?t||n?Zn(qr(e),Hr(t,n)):qr(e):t||n?Hr(t,n):Ur}function Fr(e){return function(t,n){return[(t+=e)>Pe?t-Oe:t<-Pe?t+Oe:t,n]}}function qr(e){var t=Fr(e);return t.invert=Fr(-e),t}function Hr(e,t){var n=Math.cos(e),r=Math.sin(e),o=Math.cos(t),i=Math.sin(t);function a(e,t){var a=Math.cos(t),u=Math.cos(e)*a,l=Math.sin(e)*a,c=Math.sin(t),s=c*n+u*r;return[Math.atan2(l*o-s*i,u*n-c*r),Ue(s*o+l*i)]}return a.invert=function(e,t){var a=Math.cos(t),u=Math.cos(e)*a,l=Math.sin(e)*a,c=Math.sin(t),s=c*o-l*i;return[Math.atan2(l*o+c*i,u*n+s*r),Ue(s*n-u*r)]},a}function Br(e,t){var n=Math.cos(e),r=Math.sin(e);return function(o,i,a,u){var l=a*t;null!=o?(o=Vr(n,o),i=Vr(n,i),(a>0?o<i:o>i)&&(o+=a*Oe)):(o=e+a*Oe,i=e-.5*l);for(var c,s=o;a>0?s>i:s<i;s-=l)u.point((c=Vn([n,-r*Math.cos(s),-r*Math.sin(s)]))[0],c[1])}}function Vr(e,t){var n=Un(t);n[0]-=e,Bn(n);var r=Ie(-n[1]);return((-n[2]<0?-r:r)+2*Math.PI-Te)%(2*Math.PI)}function Wr(e,t,n){var r=i.range(e,t-Te,n).concat(t);return function(e){return r.map(function(t){return[e,t]})}}function Gr(e,t,n){var r=i.range(e,t-Te,n).concat(t);return function(e){return r.map(function(t){return[t,e]})}}function Qr(e){return e.source}function $r(e){return e.target}i.geo.path=function(){var e,t,n,r,o,a=4.5;function u(e){return e&&("function"==typeof a&&r.pointRadius(+a.apply(this,arguments)),o&&o.valid||(o=n(r)),i.geo.stream(e,o)),r.result()}function l(){return o=null,u}return u.area=function(e){return dr=0,i.geo.stream(e,n(br)),dr},u.centroid=function(e){return Mn=Tn=Cn=Pn=On=Nn=An=Rn=jn=0,i.geo.stream(e,n(Sr)),jn?[An/jn,Rn/jn]:Nn?[Pn/Nn,On/Nn]:Cn?[Mn/Cn,Tn/Cn]:[NaN,NaN]},u.bounds=function(e){return mr=yr=-(vr=gr=1/0),i.geo.stream(e,n(wr)),[[vr,gr],[mr,yr]]},u.projection=function(t){return arguments.length?(n=(e=t)?t.stream||(r=t,o=Nr(function(e,t){return r([e*je,t*je])}),function(e){return Dr(o(e))}):L,l()):e;var r,o},u.context=function(e){return arguments.length?(r=null==(t=e)?new _r:new Or(e),"function"!=typeof a&&r.pointRadius(a),l()):t},u.pointRadius=function(e){return arguments.length?(a="function"==typeof e?e:(r.pointRadius(+e),+e),u):a},u.projection(i.geo.albersUsa()).context(null)},i.geo.transform=function(e){return{stream:function(t){var n=new Ar(t);for(var r in e)n[r]=e[r];return n}}},Ar.prototype={point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},i.geo.projection=jr,i.geo.projectionMutator=Lr,(i.geo.equirectangular=function(){return jr(Ir)}).raw=Ir.invert=Ir,i.geo.rotation=function(e){function t(t){return(t=e(t[0]*Re,t[1]*Re))[0]*=je,t[1]*=je,t}return e=zr(e[0]%360*Re,e[1]*Re,e.length>2?e[2]*Re:0),t.invert=function(t){return(t=e.invert(t[0]*Re,t[1]*Re))[0]*=je,t[1]*=je,t},t},Ur.invert=Ir,i.geo.circle=function(){var e,t,n=[0,0],r=6;function o(){var e="function"==typeof n?n.apply(this,arguments):n,r=zr(-e[0]*Re,-e[1]*Re,0).invert,o=[];return t(null,null,1,{point:function(e,t){o.push(e=r(e,t)),e[0]*=je,e[1]*=je}}),{type:"Polygon",coordinates:[o]}}return o.origin=function(e){return arguments.length?(n=e,o):n},o.angle=function(n){return arguments.length?(t=Br((e=+n)*Re,r*Re),o):e},o.precision=function(n){return arguments.length?(t=Br(e*Re,(r=+n)*Re),o):r},o.angle(90)},i.geo.distance=function(e,t){var n,r=(t[0]-e[0])*Re,o=e[1]*Re,i=t[1]*Re,a=Math.sin(r),u=Math.cos(r),l=Math.sin(o),c=Math.cos(o),s=Math.sin(i),f=Math.cos(i);return Math.atan2(Math.sqrt((n=f*a)*n+(n=c*s-l*f*u)*n),l*s+c*f*u)},i.geo.graticule=function(){var e,t,n,r,o,a,u,l,c,s,f,p,d=10,h=d,v=90,g=360,m=2.5;function y(){return{type:"MultiLineString",coordinates:b()}}function b(){return i.range(Math.ceil(r/v)*v,n,v).map(f).concat(i.range(Math.ceil(l/g)*g,u,g).map(p)).concat(i.range(Math.ceil(t/d)*d,e,d).filter(function(e){return _(e%v)>Te}).map(c)).concat(i.range(Math.ceil(a/h)*h,o,h).filter(function(e){return _(e%g)>Te}).map(s))}return y.lines=function(){return b().map(function(e){return{type:"LineString",coordinates:e}})},y.outline=function(){return{type:"Polygon",coordinates:[f(r).concat(p(u).slice(1),f(n).reverse().slice(1),p(l).reverse().slice(1))]}},y.extent=function(e){return arguments.length?y.majorExtent(e).minorExtent(e):y.minorExtent()},y.majorExtent=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],l=+e[0][1],u=+e[1][1],r>n&&(e=r,r=n,n=e),l>u&&(e=l,l=u,u=e),y.precision(m)):[[r,l],[n,u]]},y.minorExtent=function(n){return arguments.length?(t=+n[0][0],e=+n[1][0],a=+n[0][1],o=+n[1][1],t>e&&(n=t,t=e,e=n),a>o&&(n=a,a=o,o=n),y.precision(m)):[[t,a],[e,o]]},y.step=function(e){return arguments.length?y.majorStep(e).minorStep(e):y.minorStep()},y.majorStep=function(e){return arguments.length?(v=+e[0],g=+e[1],y):[v,g]},y.minorStep=function(e){return arguments.length?(d=+e[0],h=+e[1],y):[d,h]},y.precision=function(i){return arguments.length?(m=+i,c=Wr(a,o,90),s=Gr(t,e,m),f=Wr(l,u,90),p=Gr(r,n,m),y):m},y.majorExtent([[-180,-90+Te],[180,90-Te]]).minorExtent([[-180,-80-Te],[180,80+Te]])},i.geo.greatArc=function(){var e,t,n=Qr,r=$r;function o(){return{type:"LineString",coordinates:[e||n.apply(this,arguments),t||r.apply(this,arguments)]}}return o.distance=function(){return i.geo.distance(e||n.apply(this,arguments),t||r.apply(this,arguments))},o.source=function(t){return arguments.length?(n=t,e="function"==typeof t?null:t,o):n},o.target=function(e){return arguments.length?(r=e,t="function"==typeof e?null:e,o):r},o.precision=function(){return arguments.length?o:0},o},i.geo.interpolate=function(e,t){return n=e[0]*Re,r=e[1]*Re,o=t[0]*Re,i=t[1]*Re,a=Math.cos(r),u=Math.sin(r),l=Math.cos(i),c=Math.sin(i),s=a*Math.cos(n),f=a*Math.sin(n),p=l*Math.cos(o),d=l*Math.sin(o),h=2*Math.asin(Math.sqrt(Fe(i-r)+a*l*Fe(o-n))),v=1/Math.sin(h),(g=h?function(e){var t=Math.sin(e*=h)*v,n=Math.sin(h-e)*v,r=n*s+t*p,o=n*f+t*d,i=n*u+t*c;return[Math.atan2(o,r)*je,Math.atan2(i,Math.sqrt(r*r+o*o))*je]}:function(){return[n*je,r*je]}).distance=h,g;var n,r,o,i,a,u,l,c,s,f,p,d,h,v,g},i.geo.length=function(e){return Er=0,i.geo.stream(e,Yr),Er};var Yr={sphere:z,point:z,lineStart:function(){var e,t,n;function r(r,o){var i=Math.sin(o*=Re),a=Math.cos(o),u=_((r*=Re)-e),l=Math.cos(u);Er+=Math.atan2(Math.sqrt((u=a*Math.sin(u))*u+(u=n*i-t*a*l)*u),t*i+n*a*l),e=r,t=i,n=a}Yr.point=function(o,i){e=o*Re,t=Math.sin(i*=Re),n=Math.cos(i),Yr.point=r},Yr.lineEnd=function(){Yr.point=Yr.lineEnd=z}},lineEnd:z,polygonStart:z,polygonEnd:z};function Kr(e,t){function n(t,n){var r=Math.cos(t),o=Math.cos(n),i=e(r*o);return[i*o*Math.sin(t),i*Math.sin(n)]}return n.invert=function(e,n){var r=Math.sqrt(e*e+n*n),o=t(r),i=Math.sin(o),a=Math.cos(o);return[Math.atan2(e*i,r*a),Math.asin(r&&n*i/r)]},n}var Xr=Kr(function(e){return Math.sqrt(2/(1+e))},function(e){return 2*Math.asin(e/2)});(i.geo.azimuthalEqualArea=function(){return jr(Xr)}).raw=Xr;var Zr=Kr(function(e){var t=Math.acos(e);return t&&t/Math.sin(t)},L);function Jr(e,t){var n=Math.cos(e),r=function(e){return Math.tan(Pe/4+e/2)},o=e===t?Math.sin(e):Math.log(n/Math.cos(t))/Math.log(r(t)/r(e)),i=n*Math.pow(r(e),o)/o;if(!o)return no;function a(e,t){i>0?t<-Ae+Te&&(t=-Ae+Te):t>Ae-Te&&(t=Ae-Te);var n=i/Math.pow(r(t),o);return[n*Math.sin(o*e),i-n*Math.cos(o*e)]}return a.invert=function(e,t){var n=i-t,r=Le(o)*Math.sqrt(e*e+n*n);return[Math.atan2(e,n)/o,2*Math.atan(Math.pow(i/r,1/o))-Ae]},a}function eo(e,t){var n=Math.cos(e),r=e===t?Math.sin(e):(n-Math.cos(t))/(t-e),o=n/r+e;if(_(r)<Te)return Ir;function i(e,t){var n=o-t;return[n*Math.sin(r*e),o-n*Math.cos(r*e)]}return i.invert=function(e,t){var n=o-t;return[Math.atan2(e,n)/r,o-Le(r)*Math.sqrt(e*e+n*n)]},i}(i.geo.azimuthalEquidistant=function(){return jr(Zr)}).raw=Zr,(i.geo.conicConformal=function(){return fr(Jr)}).raw=Jr,(i.geo.conicEquidistant=function(){return fr(eo)}).raw=eo;var to=Kr(function(e){return 1/e},Math.atan);function no(e,t){return[e,Math.log(Math.tan(Pe/4+t/2))]}function ro(e){var t,n=jr(e),r=n.scale,o=n.translate,i=n.clipExtent;return n.scale=function(){var e=r.apply(n,arguments);return e===n?t?n.clipExtent(null):n:e},n.translate=function(){var e=o.apply(n,arguments);return e===n?t?n.clipExtent(null):n:e},n.clipExtent=function(e){var a=i.apply(n,arguments);if(a===n){if(t=null==e){var u=Pe*r(),l=o();i([[l[0]-u,l[1]-u],[l[0]+u,l[1]+u]])}}else t&&(a=null);return a},n.clipExtent(null)}(i.geo.gnomonic=function(){return jr(to)}).raw=to,no.invert=function(e,t){return[e,2*Math.atan(Math.exp(t))-Ae]},(i.geo.mercator=function(){return ro(no)}).raw=no;var oo=Kr(function(){return 1},Math.asin);(i.geo.orthographic=function(){return jr(oo)}).raw=oo;var io=Kr(function(e){return 1/(1+e)},function(e){return 2*Math.atan(e)});function ao(e,t){return[Math.log(Math.tan(Pe/4+t/2)),-e]}function uo(e){return e[0]}function lo(e){return e[1]}function co(e){for(var t=e.length,n=[0,1],r=2,o=2;o<t;o++){for(;r>1&&De(e[n[r-2]],e[n[r-1]],e[o])<=0;)--r;n[r++]=o}return n.slice(0,r)}function so(e,t){return e[0]-t[0]||e[1]-t[1]}(i.geo.stereographic=function(){return jr(io)}).raw=io,ao.invert=function(e,t){return[-t,2*Math.atan(Math.exp(e))-Ae]},(i.geo.transverseMercator=function(){var e=ro(ao),t=e.center,n=e.rotate;return e.center=function(e){return e?t([-e[1],e[0]]):[(e=t())[1],-e[0]]},e.rotate=function(e){return e?n([e[0],e[1],e.length>2?e[2]+90:90]):[(e=n())[0],e[1],e[2]-90]},n([0,0,90])}).raw=ao,i.geom={},i.geom.hull=function(e){var t=uo,n=lo;if(arguments.length)return r(e);function r(e){if(e.length<3)return[];var r,o=xt(t),i=xt(n),a=e.length,u=[],l=[];for(r=0;r<a;r++)u.push([+o.call(this,e[r],r),+i.call(this,e[r],r),r]);for(u.sort(so),r=0;r<a;r++)l.push([u[r][0],-u[r][1]]);var c=co(u),s=co(l),f=s[0]===c[0],p=s[s.length-1]===c[c.length-1],d=[];for(r=c.length-1;r>=0;--r)d.push(e[u[c[r]][2]]);for(r=+f;r<s.length-p;++r)d.push(e[u[s[r]][2]]);return d}return r.x=function(e){return arguments.length?(t=e,r):t},r.y=function(e){return arguments.length?(n=e,r):n},r},i.geom.polygon=function(e){return G(e,fo),e};var fo=i.geom.polygon.prototype=[];function po(e,t,n){return(n[0]-t[0])*(e[1]-t[1])<(n[1]-t[1])*(e[0]-t[0])}function ho(e,t,n,r){var o=e[0],i=n[0],a=t[0]-o,u=r[0]-i,l=e[1],c=n[1],s=t[1]-l,f=r[1]-c,p=(u*(l-c)-f*(o-i))/(f*a-u*s);return[o+p*a,l+p*s]}function vo(e){var t=e[0],n=e[e.length-1];return!(t[0]-n[0]||t[1]-n[1])}fo.area=function(){for(var e,t=-1,n=this.length,r=this[n-1],o=0;++t<n;)e=r,r=this[t],o+=e[1]*r[0]-e[0]*r[1];return.5*o},fo.centroid=function(e){var t,n,r=-1,o=this.length,i=0,a=0,u=this[o-1];for(arguments.length||(e=-1/(6*this.area()));++r<o;)t=u,u=this[r],n=t[0]*u[1]-u[0]*t[1],i+=(t[0]+u[0])*n,a+=(t[1]+u[1])*n;return[i*e,a*e]},fo.clip=function(e){for(var t,n,r,o,i,a,u=vo(e),l=-1,c=this.length-vo(this),s=this[c-1];++l<c;){for(t=e.slice(),e.length=0,o=this[l],i=t[(r=t.length-u)-1],n=-1;++n<r;)po(a=t[n],s,o)?(po(i,s,o)||e.push(ho(i,a,s,o)),e.push(a)):po(i,s,o)&&e.push(ho(i,a,s,o)),i=a;u&&e.push(e[0]),s=o}return e};var go,mo,yo,bo,xo,wo=[],_o=[];function ko(){qo(this),this.edge=this.site=this.circle=null}function Eo(e){var t=wo.pop()||new ko;return t.site=e,t}function So(e){jo(e),yo.remove(e),wo.push(e),qo(e)}function Mo(e){var t=e.circle,n=t.x,r=t.cy,o={x:n,y:r},i=e.P,a=e.N,u=[e];So(e);for(var l=i;l.circle&&_(n-l.circle.x)<Te&&_(r-l.circle.cy)<Te;)i=l.P,u.unshift(l),So(l),l=i;u.unshift(l),jo(l);for(var c=a;c.circle&&_(n-c.circle.x)<Te&&_(r-c.circle.cy)<Te;)a=c.N,u.push(c),So(c),c=a;u.push(c),jo(c);var s,f=u.length;for(s=1;s<f;++s)c=u[s],l=u[s-1],Uo(c.edge,l.site,c.site,o);l=u[0],(c=u[f-1]).edge=Io(l.site,c.site,null,o),Ro(l),Ro(c)}function To(e){for(var t,n,r,o,i=e.x,a=e.y,u=yo._;u;)if((r=Co(u,a)-i)>Te)u=u.L;else{if(!((o=i-Po(u,a))>Te)){r>-Te?(t=u.P,n=u):o>-Te?(t=u,n=u.N):t=n=u;break}if(!u.R){t=u;break}u=u.R}var l=Eo(e);if(yo.insert(t,l),t||n){if(t===n)return jo(t),n=Eo(t.site),yo.insert(l,n),l.edge=n.edge=Io(t.site,l.site),Ro(t),void Ro(n);if(n){jo(t),jo(n);var c=t.site,s=c.x,f=c.y,p=e.x-s,d=e.y-f,h=n.site,v=h.x-s,g=h.y-f,m=2*(p*g-d*v),y=p*p+d*d,b=v*v+g*g,x={x:(g*y-d*b)/m+s,y:(p*b-v*y)/m+f};Uo(n.edge,c,h,x),l.edge=Io(c,e,null,x),n.edge=Io(e,h,null,x),Ro(t),Ro(n)}else l.edge=Io(t.site,l.site)}}function Co(e,t){var n=e.site,r=n.x,o=n.y,i=o-t;if(!i)return r;var a=e.P;if(!a)return-1/0;var u=(n=a.site).x,l=n.y,c=l-t;if(!c)return u;var s=u-r,f=1/i-1/c,p=s/c;return f?(-p+Math.sqrt(p*p-2*f*(s*s/(-2*c)-l+c/2+o-i/2)))/f+r:(r+u)/2}function Po(e,t){var n=e.N;if(n)return Co(n,t);var r=e.site;return r.y===t?r.x:1/0}function Oo(e){this.site=e,this.edges=[]}function No(e,t){return t.angle-e.angle}function Ao(){qo(this),this.x=this.y=this.arc=this.site=this.cy=null}function Ro(e){var t=e.P,n=e.N;if(t&&n){var r=t.site,o=e.site,i=n.site;if(r!==i){var a=o.x,u=o.y,l=r.x-a,c=r.y-u,s=i.x-a,f=2*(l*(g=i.y-u)-c*s);if(!(f>=-Ce)){var p=l*l+c*c,d=s*s+g*g,h=(g*p-c*d)/f,v=(l*d-s*p)/f,g=v+u,m=_o.pop()||new Ao;m.arc=e,m.site=o,m.x=h+a,m.y=g+Math.sqrt(h*h+v*v),m.cy=g,e.circle=m;for(var y=null,b=xo._;b;)if(m.y<b.y||m.y===b.y&&m.x<=b.x){if(!b.L){y=b.P;break}b=b.L}else{if(!b.R){y=b;break}b=b.R}xo.insert(y,m),y||(bo=m)}}}}function jo(e){var t=e.circle;t&&(t.P||(bo=t.N),xo.remove(t),_o.push(t),qo(t),e.circle=null)}function Lo(e,t){var n=e.b;if(n)return!0;var r,o,i=e.a,a=t[0][0],u=t[1][0],l=t[0][1],c=t[1][1],s=e.l,f=e.r,p=s.x,d=s.y,h=f.x,v=f.y,g=(p+h)/2,m=(d+v)/2;if(v===d){if(g<a||g>=u)return;if(p>h){if(i){if(i.y>=c)return}else i={x:g,y:l};n={x:g,y:c}}else{if(i){if(i.y<l)return}else i={x:g,y:c};n={x:g,y:l}}}else if(o=m-(r=(p-h)/(v-d))*g,r<-1||r>1)if(p>h){if(i){if(i.y>=c)return}else i={x:(l-o)/r,y:l};n={x:(c-o)/r,y:c}}else{if(i){if(i.y<l)return}else i={x:(c-o)/r,y:c};n={x:(l-o)/r,y:l}}else if(d<v){if(i){if(i.x>=u)return}else i={x:a,y:r*a+o};n={x:u,y:r*u+o}}else{if(i){if(i.x<a)return}else i={x:u,y:r*u+o};n={x:a,y:r*a+o}}return e.a=i,e.b=n,!0}function Do(e,t){this.l=e,this.r=t,this.a=this.b=null}function Io(e,t,n,r){var o=new Do(e,t);return go.push(o),n&&Uo(o,e,t,n),r&&Uo(o,t,e,r),mo[e.i].edges.push(new zo(o,e,t)),mo[t.i].edges.push(new zo(o,t,e)),o}function Uo(e,t,n,r){e.a||e.b?e.l===n?e.b=r:e.a=r:(e.a=r,e.l=t,e.r=n)}function zo(e,t,n){var r=e.a,o=e.b;this.edge=e,this.site=t,this.angle=n?Math.atan2(n.y-t.y,n.x-t.x):e.l===t?Math.atan2(o.x-r.x,r.y-o.y):Math.atan2(r.x-o.x,o.y-r.y)}function Fo(){this._=null}function qo(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function Ho(e,t){var n=t,r=t.R,o=n.U;o?o.L===n?o.L=r:o.R=r:e._=r,r.U=o,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Bo(e,t){var n=t,r=t.L,o=n.U;o?o.L===n?o.L=r:o.R=r:e._=r,r.U=o,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Vo(e){for(;e.L;)e=e.L;return e}function Wo(e,t){var n,r,o,i=e.sort(Go).pop();for(go=[],mo=new Array(e.length),yo=new Fo,xo=new Fo;;)if(o=bo,i&&(!o||i.y<o.y||i.y===o.y&&i.x<o.x))i.x===n&&i.y===r||(mo[i.i]=new Oo(i),To(i),n=i.x,r=i.y),i=e.pop();else{if(!o)break;Mo(o.arc)}t&&(function(e){for(var t,n=go,r=lr(e[0][0],e[0][1],e[1][0],e[1][1]),o=n.length;o--;)(!Lo(t=n[o],e)||!r(t)||_(t.a.x-t.b.x)<Te&&_(t.a.y-t.b.y)<Te)&&(t.a=t.b=null,n.splice(o,1))}(t),function(e){for(var t,n,r,o,i,a,u,l,c,s,f=e[0][0],p=e[1][0],d=e[0][1],h=e[1][1],v=mo,g=v.length;g--;)if((i=v[g])&&i.prepare())for(l=(u=i.edges).length,a=0;a<l;)r=(s=u[a].end()).x,o=s.y,t=(c=u[++a%l].start()).x,n=c.y,(_(r-t)>Te||_(o-n)>Te)&&(u.splice(a,0,new zo((m=i.site,y=s,b=_(r-f)<Te&&h-o>Te?{x:f,y:_(t-f)<Te?n:h}:_(o-h)<Te&&p-r>Te?{x:_(n-h)<Te?t:p,y:h}:_(r-p)<Te&&o-d>Te?{x:p,y:_(t-p)<Te?n:d}:_(o-d)<Te&&r-f>Te?{x:_(n-d)<Te?t:f,y:d}:null,x=void 0,x=new Do(m,null),x.a=y,x.b=b,go.push(x),x),i.site,null)),++l);var m,y,b,x}(t));var a={cells:mo,edges:go};return yo=xo=go=mo=null,a}function Go(e,t){return t.y-e.y||t.x-e.x}Oo.prototype.prepare=function(){for(var e,t=this.edges,n=t.length;n--;)(e=t[n].edge).b&&e.a||t.splice(n,1);return t.sort(No),t.length},zo.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},Fo.prototype={insert:function(e,t){var n,r,o;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=Vo(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)n===(r=n.U).L?(o=r.R)&&o.C?(n.C=o.C=!1,r.C=!0,e=r):(e===n.R&&(Ho(this,n),n=(e=n).U),n.C=!1,r.C=!0,Bo(this,r)):(o=r.L)&&o.C?(n.C=o.C=!1,r.C=!0,e=r):(e===n.L&&(Bo(this,n),n=(e=n).U),n.C=!1,r.C=!0,Ho(this,r)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,r,o=e.U,i=e.L,a=e.R;if(n=i?a?Vo(a):i:a,o?o.L===e?o.L=n:o.R=n:this._=n,i&&a?(r=n.C,n.C=e.C,n.L=i,i.U=n,n!==a?(o=n.U,n.U=e.U,e=n.R,o.L=e,n.R=a,a.U=n):(n.U=o,o=n,e=n.R)):(r=e.C,e=n),e&&(e.U=o),!r)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===o.L){if((t=o.R).C&&(t.C=!1,o.C=!0,Ho(this,o),t=o.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,Bo(this,t),t=o.R),t.C=o.C,o.C=t.R.C=!1,Ho(this,o),e=this._;break}}else if((t=o.L).C&&(t.C=!1,o.C=!0,Bo(this,o),t=o.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,Ho(this,t),t=o.L),t.C=o.C,o.C=t.L.C=!1,Bo(this,o),e=this._;break}t.C=!0,e=o,o=o.U}while(!e.C);e&&(e.C=!1)}}},i.geom.voronoi=function(e){var t=uo,n=lo,r=t,o=n,i=Qo;if(e)return a(e);function a(e){var t=new Array(e.length),n=i[0][0],r=i[0][1],o=i[1][0],a=i[1][1];return Wo(u(e),i).cells.forEach(function(i,u){var l=i.edges,c=i.site;(t[u]=l.length?l.map(function(e){var t=e.start();return[t.x,t.y]}):c.x>=n&&c.x<=o&&c.y>=r&&c.y<=a?[[n,a],[o,a],[o,r],[n,r]]:[]).point=e[u]}),t}function u(e){return e.map(function(e,t){return{x:Math.round(r(e,t)/Te)*Te,y:Math.round(o(e,t)/Te)*Te,i:t}})}return a.links=function(e){return Wo(u(e)).edges.filter(function(e){return e.l&&e.r}).map(function(t){return{source:e[t.l.i],target:e[t.r.i]}})},a.triangles=function(e){var t=[];return Wo(u(e)).cells.forEach(function(n,r){for(var o,i,a,u,l=n.site,c=n.edges.sort(No),s=-1,f=c.length,p=c[f-1].edge,d=p.l===l?p.r:p.l;++s<f;)p,o=d,d=(p=c[s].edge).l===l?p.r:p.l,r<o.i&&r<d.i&&(a=o,u=d,((i=l).x-u.x)*(a.y-i.y)-(i.x-a.x)*(u.y-i.y)<0)&&t.push([e[r],e[o.i],e[d.i]])}),t},a.x=function(e){return arguments.length?(r=xt(t=e),a):t},a.y=function(e){return arguments.length?(o=xt(n=e),a):n},a.clipExtent=function(e){return arguments.length?(i=null==e?Qo:e,a):i===Qo?null:i},a.size=function(e){return arguments.length?a.clipExtent(e&&[[0,0],e]):i===Qo?null:i&&i[1]},a};var Qo=[[-1e6,-1e6],[1e6,1e6]];function $o(e){return e.x}function Yo(e){return e.y}function Ko(e,t){e=i.rgb(e),t=i.rgb(t);var n=e.r,r=e.g,o=e.b,a=t.r-n,u=t.g-r,l=t.b-o;return function(e){return"#"+dt(Math.round(n+a*e))+dt(Math.round(r+u*e))+dt(Math.round(o+l*e))}}function Xo(e,t){var n,r={},o={};for(n in e)n in t?r[n]=ni(e[n],t[n]):o[n]=e[n];for(n in t)n in e||(o[n]=t[n]);return function(e){for(n in r)o[n]=r[n](e);return o}}function Zo(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}function Jo(e,t){var n,r,o,i=ei.lastIndex=ti.lastIndex=0,a=-1,u=[],l=[];for(e+="",t+="";(n=ei.exec(e))&&(r=ti.exec(t));)(o=r.index)>i&&(o=t.slice(i,o),u[a]?u[a]+=o:u[++a]=o),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,l.push({i:a,x:Zo(n,r)})),i=ti.lastIndex;return i<t.length&&(o=t.slice(i),u[a]?u[a]+=o:u[++a]=o),u.length<2?l[0]?(t=l[0].x,function(e){return t(e)+""}):function(){return t}:(t=l.length,function(e){for(var n,r=0;r<t;++r)u[(n=l[r]).i]=n.x(e);return u.join("")})}i.geom.delaunay=function(e){return i.geom.voronoi().triangles(e)},i.geom.quadtree=function(e,t,n,r,o){var i,a=uo,u=lo;if(i=arguments.length)return a=$o,u=Yo,3===i&&(o=n,r=t,n=t=0),l(e);function l(e){var l,c,s,f,p,d,h,v,g,m=xt(a),y=xt(u);if(null!=t)d=t,h=n,v=r,g=o;else if(v=g=-(d=h=1/0),c=[],s=[],p=e.length,i)for(f=0;f<p;++f)(l=e[f]).x<d&&(d=l.x),l.y<h&&(h=l.y),l.x>v&&(v=l.x),l.y>g&&(g=l.y),c.push(l.x),s.push(l.y);else for(f=0;f<p;++f){var b=+m(l=e[f],f),x=+y(l,f);b<d&&(d=b),x<h&&(h=x),b>v&&(v=b),x>g&&(g=x),c.push(b),s.push(x)}var w=v-d,k=g-h;function E(e,t,n,r,o,i,a,u){if(!isNaN(n)&&!isNaN(r))if(e.leaf){var l=e.x,c=e.y;if(null!=l)if(_(l-n)+_(c-r)<.01)S(e,t,n,r,o,i,a,u);else{var s=e.point;e.x=e.y=e.point=null,S(e,s,l,c,o,i,a,u),S(e,t,n,r,o,i,a,u)}else e.x=n,e.y=r,e.point=t}else S(e,t,n,r,o,i,a,u)}function S(e,t,n,r,o,i,a,u){var l=.5*(o+a),c=.5*(i+u),s=n>=l,f=r>=c,p=f<<1|s;e.leaf=!1,s?o=l:a=l,f?i=c:u=c,E(e=e.nodes[p]||(e.nodes[p]={leaf:!0,nodes:[],point:null,x:null,y:null}),t,n,r,o,i,a,u)}w>k?g=h+w:v=d+k;var M={leaf:!0,nodes:[],point:null,x:null,y:null,add:function(e){E(M,e,+m(e,++f),+y(e,f),d,h,v,g)}};if(M.visit=function(e){!function e(t,n,r,o,i,a){if(!t(n,r,o,i,a)){var u=.5*(r+i),l=.5*(o+a),c=n.nodes;c[0]&&e(t,c[0],r,o,u,l),c[1]&&e(t,c[1],u,o,i,l),c[2]&&e(t,c[2],r,l,u,a),c[3]&&e(t,c[3],u,l,i,a)}}(e,M,d,h,v,g)},M.find=function(e){return function(e,t,n,r,o,i,a){var u,l=1/0;return function e(c,s,f,p,d){if(!(s>i||f>a||p<r||d<o)){if(h=c.point){var h,v=t-c.x,g=n-c.y,m=v*v+g*g;if(m<l){var y=Math.sqrt(l=m);r=t-y,o=n-y,i=t+y,a=n+y,u=h}}for(var b=c.nodes,x=.5*(s+p),w=.5*(f+d),_=(n>=w)<<1|t>=x,k=_+4;_<k;++_)if(c=b[3&_])switch(3&_){case 0:e(c,s,f,x,w);break;case 1:e(c,x,f,p,w);break;case 2:e(c,s,w,x,d);break;case 3:e(c,x,w,p,d)}}}(e,r,o,i,a),u}(M,e[0],e[1],d,h,v,g)},f=-1,null==t){for(;++f<p;)E(M,e[f],c[f],s[f],d,h,v,g);--f}else e.forEach(M.add);return c=s=e=l=null,M}return l.x=function(e){return arguments.length?(a=e,l):a},l.y=function(e){return arguments.length?(u=e,l):u},l.extent=function(e){return arguments.length?(null==e?t=n=r=o=null:(t=+e[0][0],n=+e[0][1],r=+e[1][0],o=+e[1][1]),l):null==t?null:[[t,n],[r,o]]},l.size=function(e){return arguments.length?(null==e?t=n=r=o=null:(t=n=0,r=+e[0],o=+e[1]),l):null==t?null:[r-t,o-n]},l},i.interpolateRgb=Ko,i.interpolateObject=Xo,i.interpolateNumber=Zo,i.interpolateString=Jo;var ei=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ti=new RegExp(ei.source,"g");function ni(e,t){for(var n,r=i.interpolators.length;--r>=0&&!(n=i.interpolators[r](e,t)););return n}function ri(e,t){var n,r=[],o=[],i=e.length,a=t.length,u=Math.min(e.length,t.length);for(n=0;n<u;++n)r.push(ni(e[n],t[n]));for(;n<i;++n)o[n]=e[n];for(;n<a;++n)o[n]=t[n];return function(e){for(n=0;n<u;++n)o[n]=r[n](e);return o}}i.interpolate=ni,i.interpolators=[function(e,t){var n=typeof t;return("string"===n?bt.has(t.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(t)?Ko:Jo:t instanceof We?Ko:Array.isArray(t)?ri:"object"===n&&isNaN(t)?Xo:Zo)(e,t)}],i.interpolateArray=ri;var oi=function(){return L},ii=i.map({linear:oi,poly:function(e){return function(t){return Math.pow(t,e)}},quad:function(){return ci},cubic:function(){return si},sin:function(){return pi},exp:function(){return di},circle:function(){return hi},elastic:function(e,t){var n;arguments.length<2&&(t=.45);arguments.length?n=t/Oe*Math.asin(1/e):(e=1,n=t/4);return function(r){return 1+e*Math.pow(2,-10*r)*Math.sin((r-n)*Oe/t)}},back:function(e){e||(e=1.70158);return function(t){return t*t*((e+1)*t-e)}},bounce:function(){return vi}}),ai=i.map({in:L,out:ui,"in-out":li,"out-in":function(e){return li(ui(e))}});function ui(e){return function(t){return 1-e(1-t)}}function li(e){return function(t){return.5*(t<.5?e(2*t):2-e(2-2*t))}}function ci(e){return e*e}function si(e){return e*e*e}function fi(e){if(e<=0)return 0;if(e>=1)return 1;var t=e*e,n=t*e;return 4*(e<.5?n:3*(e-t)+n-.75)}function pi(e){return 1-Math.cos(e*Ae)}function di(e){return Math.pow(2,10*(e-1))}function hi(e){return 1-Math.sqrt(1-e*e)}function vi(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375}function gi(e,t){return t-=e,function(n){return Math.round(e+t*n)}}function mi(e){var t,n,r,o=[e.a,e.b],i=[e.c,e.d],a=bi(o),u=yi(o,i),l=bi(((t=i)[0]+=(r=-u)*(n=o)[0],t[1]+=r*n[1],t))||0;o[0]*i[1]<i[0]*o[1]&&(o[0]*=-1,o[1]*=-1,a*=-1,u*=-1),this.rotate=(a?Math.atan2(o[1],o[0]):Math.atan2(-i[0],i[1]))*je,this.translate=[e.e,e.f],this.scale=[a,l],this.skew=l?Math.atan2(u,l)*je:0}function yi(e,t){return e[0]*t[0]+e[1]*t[1]}function bi(e){var t=Math.sqrt(yi(e,e));return t&&(e[0]/=t,e[1]/=t),t}i.ease=function(e){var t,n=e.indexOf("-"),r=n>=0?e.slice(0,n):e,o=n>=0?e.slice(n+1):"in";return r=ii.get(r)||oi,o=ai.get(o)||L,t=o(r.apply(null,a.call(arguments,1))),function(e){return e<=0?0:e>=1?1:t(e)}},i.interpolateHcl=function(e,t){e=i.hcl(e),t=i.hcl(t);var n=e.h,r=e.c,o=e.l,a=t.h-n,u=t.c-r,l=t.l-o;isNaN(u)&&(u=0,r=isNaN(r)?t.c:r);isNaN(a)?(a=0,n=isNaN(n)?t.h:n):a>180?a-=360:a<-180&&(a+=360);return function(e){return Xe(n+a*e,r+u*e,o+l*e)+""}},i.interpolateHsl=function(e,t){e=i.hsl(e),t=i.hsl(t);var n=e.h,r=e.s,o=e.l,a=t.h-n,u=t.s-r,l=t.l-o;isNaN(u)&&(u=0,r=isNaN(r)?t.s:r);isNaN(a)?(a=0,n=isNaN(n)?t.h:n):a>180?a-=360:a<-180&&(a+=360);return function(e){return $e(n+a*e,r+u*e,o+l*e)+""}},i.interpolateLab=function(e,t){e=i.lab(e),t=i.lab(t);var n=e.l,r=e.a,o=e.b,a=t.l-n,u=t.a-r,l=t.b-o;return function(e){return ot(n+a*e,r+u*e,o+l*e)+""}},i.interpolateRound=gi,i.transform=function(e){var t=l.createElementNS(i.ns.prefix.svg,"g");return(i.transform=function(e){if(null!=e){t.setAttribute("transform",e);var n=t.transform.baseVal.consolidate()}return new mi(n?n.matrix:xi)})(e)},mi.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var xi={a:1,b:0,c:0,d:1,e:0,f:0};function wi(e){return e.length?e.pop()+",":""}function _i(e,t){var n=[],r=[];return e=i.transform(e),t=i.transform(t),function(e,t,n,r){if(e[0]!==t[0]||e[1]!==t[1]){var o=n.push("translate(",null,",",null,")");r.push({i:o-4,x:Zo(e[0],t[0])},{i:o-2,x:Zo(e[1],t[1])})}else(t[0]||t[1])&&n.push("translate("+t+")")}(e.translate,t.translate,n,r),function(e,t,n,r){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),r.push({i:n.push(wi(n)+"rotate(",null,")")-2,x:Zo(e,t)})):t&&n.push(wi(n)+"rotate("+t+")")}(e.rotate,t.rotate,n,r),function(e,t,n,r){e!==t?r.push({i:n.push(wi(n)+"skewX(",null,")")-2,x:Zo(e,t)}):t&&n.push(wi(n)+"skewX("+t+")")}(e.skew,t.skew,n,r),function(e,t,n,r){if(e[0]!==t[0]||e[1]!==t[1]){var o=n.push(wi(n)+"scale(",null,",",null,")");r.push({i:o-4,x:Zo(e[0],t[0])},{i:o-2,x:Zo(e[1],t[1])})}else 1===t[0]&&1===t[1]||n.push(wi(n)+"scale("+t+")")}(e.scale,t.scale,n,r),e=t=null,function(e){for(var t,o=-1,i=r.length;++o<i;)n[(t=r[o]).i]=t.x(e);return n.join("")}}function ki(e,t){return t=(t-=e=+e)||1/t,function(n){return(n-e)/t}}function Ei(e,t){return t=(t-=e=+e)||1/t,function(n){return Math.max(0,Math.min(1,(n-e)/t))}}function Si(e){for(var t=e.source,n=e.target,r=function(e,t){if(e===t)return e;var n=Mi(e),r=Mi(t),o=n.pop(),i=r.pop(),a=null;for(;o===i;)a=o,o=n.pop(),i=r.pop();return a}(t,n),o=[t];t!==r;)t=t.parent,o.push(t);for(var i=o.length;n!==r;)o.splice(i,0,n),n=n.parent;return o}function Mi(e){for(var t=[],n=e.parent;null!=n;)t.push(e),e=n,n=n.parent;return t.push(e),t}function Ti(e){e.fixed|=2}function Ci(e){e.fixed&=-7}function Pi(e){e.fixed|=4,e.px=e.x,e.py=e.y}function Oi(e){e.fixed&=-5}i.interpolateTransform=_i,i.layout={},i.layout.bundle=function(){return function(e){for(var t=[],n=-1,r=e.length;++n<r;)t.push(Si(e[n]));return t}},i.layout.chord=function(){var e,t,n,r,o,a,u,l={},c=0;function s(){var l,s,p,d,h,v={},g=[],m=i.range(r),y=[];for(e=[],t=[],l=0,d=-1;++d<r;){for(s=0,h=-1;++h<r;)s+=n[d][h];g.push(s),y.push(i.range(r)),l+=s}for(o&&m.sort(function(e,t){return o(g[e],g[t])}),a&&y.forEach(function(e,t){e.sort(function(e,r){return a(n[t][e],n[t][r])})}),l=(Oe-c*r)/l,s=0,d=-1;++d<r;){for(p=s,h=-1;++h<r;){var b=m[d],x=y[b][h],w=n[b][x],_=s,k=s+=w*l;v[b+"-"+x]={index:b,subindex:x,startAngle:_,endAngle:k,value:w}}t[b]={index:b,startAngle:p,endAngle:s,value:g[b]},s+=c}for(d=-1;++d<r;)for(h=d-1;++h<r;){var E=v[d+"-"+h],S=v[h+"-"+d];(E.value||S.value)&&e.push(E.value<S.value?{source:S,target:E}:{source:E,target:S})}u&&f()}function f(){e.sort(function(e,t){return u((e.source.value+e.target.value)/2,(t.source.value+t.target.value)/2)})}return l.matrix=function(o){return arguments.length?(r=(n=o)&&n.length,e=t=null,l):n},l.padding=function(n){return arguments.length?(c=n,e=t=null,l):c},l.sortGroups=function(n){return arguments.length?(o=n,e=t=null,l):o},l.sortSubgroups=function(t){return arguments.length?(a=t,e=null,l):a},l.sortChords=function(t){return arguments.length?(u=t,e&&f(),l):u},l.chords=function(){return e||s(),e},l.groups=function(){return t||s(),t},l},i.layout.force=function(){var e,t,n,r,o,a,u={},l=i.dispatch("start","tick","end"),c=[1,1],s=.9,f=Ni,p=Ai,d=-30,h=Ri,v=.1,g=.64,m=[],y=[];function b(e){return function(t,n,r,o){if(t.point!==e){var i=t.cx-e.x,a=t.cy-e.y,u=o-n,l=i*i+a*a;if(u*u/g<l){if(l<h){var c=t.charge/l;e.px-=i*c,e.py-=a*c}return!0}if(t.point&&l&&l<h){c=t.pointCharge/l;e.px-=i*c,e.py-=a*c}}return!t.charge}}function x(e){e.px=i.event.x,e.py=i.event.y,u.resume()}return u.tick=function(){if((n*=.99)<.005)return e=null,l.end({type:"end",alpha:n=0}),!0;var t,u,f,p,h,g,x,w,_,k=m.length,E=y.length;for(u=0;u<E;++u)p=(f=y[u]).source,(g=(w=(h=f.target).x-p.x)*w+(_=h.y-p.y)*_)&&(w*=g=n*o[u]*((g=Math.sqrt(g))-r[u])/g,_*=g,h.x-=w*(x=p.weight+h.weight?p.weight/(p.weight+h.weight):.5),h.y-=_*x,p.x+=w*(x=1-x),p.y+=_*x);if((x=n*v)&&(w=c[0]/2,_=c[1]/2,u=-1,x))for(;++u<k;)(f=m[u]).x+=(w-f.x)*x,f.y+=(_-f.y)*x;if(d)for(!function e(t,n,r){var o=0,i=0;t.charge=0;if(!t.leaf)for(var a,u=t.nodes,l=u.length,c=-1;++c<l;)null!=(a=u[c])&&(e(a,n,r),t.charge+=a.charge,o+=a.charge*a.cx,i+=a.charge*a.cy);if(t.point){t.leaf||(t.point.x+=Math.random()-.5,t.point.y+=Math.random()-.5);var s=n*r[t.point.index];t.charge+=t.pointCharge=s,o+=s*t.point.x,i+=s*t.point.y}t.cx=o/t.charge;t.cy=i/t.charge}(t=i.geom.quadtree(m),n,a),u=-1;++u<k;)(f=m[u]).fixed||t.visit(b(f));for(u=-1;++u<k;)(f=m[u]).fixed?(f.x=f.px,f.y=f.py):(f.x-=(f.px-(f.px=f.x))*s,f.y-=(f.py-(f.py=f.y))*s);l.tick({type:"tick",alpha:n})},u.nodes=function(e){return arguments.length?(m=e,u):m},u.links=function(e){return arguments.length?(y=e,u):y},u.size=function(e){return arguments.length?(c=e,u):c},u.linkDistance=function(e){return arguments.length?(f="function"==typeof e?e:+e,u):f},u.distance=u.linkDistance,u.linkStrength=function(e){return arguments.length?(p="function"==typeof e?e:+e,u):p},u.friction=function(e){return arguments.length?(s=+e,u):s},u.charge=function(e){return arguments.length?(d="function"==typeof e?e:+e,u):d},u.chargeDistance=function(e){return arguments.length?(h=e*e,u):Math.sqrt(h)},u.gravity=function(e){return arguments.length?(v=+e,u):v},u.theta=function(e){return arguments.length?(g=e*e,u):Math.sqrt(g)},u.alpha=function(t){return arguments.length?(t=+t,n?t>0?n=t:(e.c=null,e.t=NaN,e=null,l.end({type:"end",alpha:n=0})):t>0&&(l.start({type:"start",alpha:n=t}),e=Ct(u.tick)),u):n},u.start=function(){var e,t,n,i=m.length,l=y.length,s=c[0],h=c[1];for(e=0;e<i;++e)(n=m[e]).index=e,n.weight=0;for(e=0;e<l;++e)"number"==typeof(n=y[e]).source&&(n.source=m[n.source]),"number"==typeof n.target&&(n.target=m[n.target]),++n.source.weight,++n.target.weight;for(e=0;e<i;++e)n=m[e],isNaN(n.x)&&(n.x=v("x",s)),isNaN(n.y)&&(n.y=v("y",h)),isNaN(n.px)&&(n.px=n.x),isNaN(n.py)&&(n.py=n.y);if(r=[],"function"==typeof f)for(e=0;e<l;++e)r[e]=+f.call(this,y[e],e);else for(e=0;e<l;++e)r[e]=f;if(o=[],"function"==typeof p)for(e=0;e<l;++e)o[e]=+p.call(this,y[e],e);else for(e=0;e<l;++e)o[e]=p;if(a=[],"function"==typeof d)for(e=0;e<i;++e)a[e]=+d.call(this,m[e],e);else for(e=0;e<i;++e)a[e]=d;function v(n,r){if(!t){for(t=new Array(i),c=0;c<i;++c)t[c]=[];for(c=0;c<l;++c){var o=y[c];t[o.source.index].push(o.target),t[o.target.index].push(o.source)}}for(var a,u=t[e],c=-1,s=u.length;++c<s;)if(!isNaN(a=u[c][n]))return a;return Math.random()*r}return u.resume()},u.resume=function(){return u.alpha(.1)},u.stop=function(){return u.alpha(0)},u.drag=function(){if(t||(t=i.behavior.drag().origin(L).on("dragstart.force",Ti).on("drag.force",x).on("dragend.force",Ci)),!arguments.length)return t;this.on("mouseover.force",Pi).on("mouseout.force",Oi).call(t)},i.rebind(u,l,"on")};var Ni=20,Ai=1,Ri=1/0;function ji(e,t){return i.rebind(e,t,"sort","children","value"),e.nodes=e,e.links=Fi,e}function Li(e,t){for(var n=[e];null!=(e=n.pop());)if(t(e),(o=e.children)&&(r=o.length))for(var r,o;--r>=0;)n.push(o[r])}function Di(e,t){for(var n=[e],r=[];null!=(e=n.pop());)if(r.push(e),(i=e.children)&&(o=i.length))for(var o,i,a=-1;++a<o;)n.push(i[a]);for(;null!=(e=r.pop());)t(e)}function Ii(e){return e.children}function Ui(e){return e.value}function zi(e,t){return t.value-e.value}function Fi(e){return i.merge(e.map(function(e){return(e.children||[]).map(function(t){return{source:e,target:t}})}))}i.layout.hierarchy=function(){var e=zi,t=Ii,n=Ui;function r(o){var i,a=[o],u=[];for(o.depth=0;null!=(i=a.pop());)if(u.push(i),(c=t.call(r,i,i.depth))&&(l=c.length)){for(var l,c,s;--l>=0;)a.push(s=c[l]),s.parent=i,s.depth=i.depth+1;n&&(i.value=0),i.children=c}else n&&(i.value=+n.call(r,i,i.depth)||0),delete i.children;return Di(o,function(t){var r,o;e&&(r=t.children)&&r.sort(e),n&&(o=t.parent)&&(o.value+=t.value)}),u}return r.sort=function(t){return arguments.length?(e=t,r):e},r.children=function(e){return arguments.length?(t=e,r):t},r.value=function(e){return arguments.length?(n=e,r):n},r.revalue=function(e){return n&&(Li(e,function(e){e.children&&(e.value=0)}),Di(e,function(e){var t;e.children||(e.value=+n.call(r,e,e.depth)||0),(t=e.parent)&&(t.value+=e.value)})),e},r},i.layout.partition=function(){var e=i.layout.hierarchy(),t=[1,1];function n(n,r){var o=e.call(this,n,r);return function e(t,n,r,o){var i=t.children;if(t.x=n,t.y=t.depth*o,t.dx=r,t.dy=o,i&&(a=i.length)){var a,u,l,c=-1;for(r=t.value?r/t.value:0;++c<a;)e(u=i[c],n,l=u.value*r,o),n+=l}}(o[0],0,t[0],t[1]/function e(t){var n=t.children,r=0;if(n&&(o=n.length))for(var o,i=-1;++i<o;)r=Math.max(r,e(n[i]));return 1+r}(o[0])),o}return n.size=function(e){return arguments.length?(t=e,n):t},ji(n,e)},i.layout.pie=function(){var e=Number,t=qi,n=0,r=Oe,o=0;function a(u){var l,c=u.length,s=u.map(function(t,n){return+e.call(a,t,n)}),f=+("function"==typeof n?n.apply(this,arguments):n),p=("function"==typeof r?r.apply(this,arguments):r)-f,d=Math.min(Math.abs(p)/c,+("function"==typeof o?o.apply(this,arguments):o)),h=d*(p<0?-1:1),v=i.sum(s),g=v?(p-c*h)/v:0,m=i.range(c),y=[];return null!=t&&m.sort(t===qi?function(e,t){return s[t]-s[e]}:function(e,n){return t(u[e],u[n])}),m.forEach(function(e){y[e]={data:u[e],value:l=s[e],startAngle:f,endAngle:f+=l*g+h,padAngle:d}}),y}return a.value=function(t){return arguments.length?(e=t,a):e},a.sort=function(e){return arguments.length?(t=e,a):t},a.startAngle=function(e){return arguments.length?(n=e,a):n},a.endAngle=function(e){return arguments.length?(r=e,a):r},a.padAngle=function(e){return arguments.length?(o=e,a):o},a};var qi={};function Hi(e){return e.x}function Bi(e){return e.y}function Vi(e,t,n){e.y0=t,e.y=n}i.layout.stack=function(){var e=L,t=Qi,n=$i,r=Vi,o=Hi,a=Bi;function u(l,c){if(!(d=l.length))return l;var s=l.map(function(t,n){return e.call(u,t,n)}),f=s.map(function(e){return e.map(function(e,t){return[o.call(u,e,t),a.call(u,e,t)]})}),p=t.call(u,f,c);s=i.permute(s,p),f=i.permute(f,p);var d,h,v,g,m=n.call(u,f,c),y=s[0].length;for(v=0;v<y;++v)for(r.call(u,s[0][v],g=m[v],f[0][v][1]),h=1;h<d;++h)r.call(u,s[h][v],g+=f[h-1][v][1],f[h][v][1]);return l}return u.values=function(t){return arguments.length?(e=t,u):e},u.order=function(e){return arguments.length?(t="function"==typeof e?e:Wi.get(e)||Qi,u):t},u.offset=function(e){return arguments.length?(n="function"==typeof e?e:Gi.get(e)||$i,u):n},u.x=function(e){return arguments.length?(o=e,u):o},u.y=function(e){return arguments.length?(a=e,u):a},u.out=function(e){return arguments.length?(r=e,u):r},u};var Wi=i.map({"inside-out":function(e){var t,n,r=e.length,o=e.map(Yi),a=e.map(Ki),u=i.range(r).sort(function(e,t){return o[e]-o[t]}),l=0,c=0,s=[],f=[];for(t=0;t<r;++t)n=u[t],l<c?(l+=a[n],s.push(n)):(c+=a[n],f.push(n));return f.reverse().concat(s)},reverse:function(e){return i.range(e.length).reverse()},default:Qi}),Gi=i.map({silhouette:function(e){var t,n,r,o=e.length,i=e[0].length,a=[],u=0,l=[];for(n=0;n<i;++n){for(t=0,r=0;t<o;t++)r+=e[t][n][1];r>u&&(u=r),a.push(r)}for(n=0;n<i;++n)l[n]=(u-a[n])/2;return l},wiggle:function(e){var t,n,r,o,i,a,u,l,c,s=e.length,f=e[0],p=f.length,d=[];for(d[0]=l=c=0,n=1;n<p;++n){for(t=0,o=0;t<s;++t)o+=e[t][n][1];for(t=0,i=0,u=f[n][0]-f[n-1][0];t<s;++t){for(r=0,a=(e[t][n][1]-e[t][n-1][1])/(2*u);r<t;++r)a+=(e[r][n][1]-e[r][n-1][1])/u;i+=a*e[t][n][1]}d[n]=l-=o?i/o*u:0,l<c&&(c=l)}for(n=0;n<p;++n)d[n]-=c;return d},expand:function(e){var t,n,r,o=e.length,i=e[0].length,a=1/o,u=[];for(n=0;n<i;++n){for(t=0,r=0;t<o;t++)r+=e[t][n][1];if(r)for(t=0;t<o;t++)e[t][n][1]/=r;else for(t=0;t<o;t++)e[t][n][1]=a}for(n=0;n<i;++n)u[n]=0;return u},zero:$i});function Qi(e){return i.range(e.length)}function $i(e){for(var t=-1,n=e[0].length,r=[];++t<n;)r[t]=0;return r}function Yi(e){for(var t,n=1,r=0,o=e[0][1],i=e.length;n<i;++n)(t=e[n][1])>o&&(r=n,o=t);return r}function Ki(e){return e.reduce(Xi,0)}function Xi(e,t){return e+t[1]}function Zi(e,t){return Ji(e,Math.ceil(Math.log(t.length)/Math.LN2+1))}function Ji(e,t){for(var n=-1,r=+e[0],o=(e[1]-r)/t,i=[];++n<=t;)i[n]=o*n+r;return i}function ea(e){return[i.min(e),i.max(e)]}function ta(e,t){return e.value-t.value}function na(e,t){var n=e._pack_next;e._pack_next=t,t._pack_prev=e,t._pack_next=n,n._pack_prev=t}function ra(e,t){e._pack_next=t,t._pack_prev=e}function oa(e,t){var n=t.x-e.x,r=t.y-e.y,o=e.r+t.r;return.999*o*o>n*n+r*r}function ia(e){if((t=e.children)&&(l=t.length)){var t,n,r,o,i,a,u,l,c=1/0,s=-1/0,f=1/0,p=-1/0;if(t.forEach(aa),(n=t[0]).x=-n.r,n.y=0,b(n),l>1&&((r=t[1]).x=r.r,r.y=0,b(r),l>2))for(la(n,r,o=t[2]),b(o),na(n,o),n._pack_prev=o,na(o,r),r=n._pack_next,i=3;i<l;i++){la(n,r,o=t[i]);var d=0,h=1,v=1;for(a=r._pack_next;a!==r;a=a._pack_next,h++)if(oa(a,o)){d=1;break}if(1==d)for(u=n._pack_prev;u!==a._pack_prev&&!oa(u,o);u=u._pack_prev,v++);d?(h<v||h==v&&r.r<n.r?ra(n,r=a):ra(n=u,r),i--):(na(n,o),r=o,b(o))}var g=(c+s)/2,m=(f+p)/2,y=0;for(i=0;i<l;i++)(o=t[i]).x-=g,o.y-=m,y=Math.max(y,o.r+Math.sqrt(o.x*o.x+o.y*o.y));e.r=y,t.forEach(ua)}function b(e){c=Math.min(e.x-e.r,c),s=Math.max(e.x+e.r,s),f=Math.min(e.y-e.r,f),p=Math.max(e.y+e.r,p)}}function aa(e){e._pack_next=e._pack_prev=e}function ua(e){delete e._pack_next,delete e._pack_prev}function la(e,t,n){var r=e.r+n.r,o=t.x-e.x,i=t.y-e.y;if(r&&(o||i)){var a=t.r+n.r,u=o*o+i*i,l=.5+((r*=r)-(a*=a))/(2*u),c=Math.sqrt(Math.max(0,2*a*(r+u)-(r-=u)*r-a*a))/(2*u);n.x=e.x+l*o+c*i,n.y=e.y+l*i-c*o}else n.x=e.x+r,n.y=e.y}function ca(e,t){return e.parent==t.parent?1:2}function sa(e){var t=e.children;return t.length?t[0]:e.t}function fa(e){var t,n=e.children;return(t=n.length)?n[t-1]:e.t}function pa(e,t,n){var r=n/(t.i-e.i);t.c-=r,t.s+=n,e.c+=r,t.z+=n,t.m+=n}function da(e,t,n){return e.a.parent===t.parent?e.a:n}function ha(e){return{x:e.x,y:e.y,dx:e.dx,dy:e.dy}}function va(e,t){var n=e.x+t[3],r=e.y+t[0],o=e.dx-t[1]-t[3],i=e.dy-t[0]-t[2];return o<0&&(n+=o/2,o=0),i<0&&(r+=i/2,i=0),{x:n,y:r,dx:o,dy:i}}function ga(e){var t=e[0],n=e[e.length-1];return t<n?[t,n]:[n,t]}function ma(e){return e.rangeExtent?e.rangeExtent():ga(e.range())}function ya(e,t,n,r){var o=n(e[0],e[1]),i=r(t[0],t[1]);return function(e){return i(o(e))}}function ba(e,t){var n,r=0,o=e.length-1,i=e[r],a=e[o];return a<i&&(n=r,r=o,o=n,n=i,i=a,a=n),e[r]=t.floor(i),e[o]=t.ceil(a),e}function xa(e){return e?{floor:function(t){return Math.floor(t/e)*e},ceil:function(t){return Math.ceil(t/e)*e}}:wa}i.layout.histogram=function(){var e=!0,t=Number,n=ea,r=Zi;function o(o,a){for(var u,l,c=[],s=o.map(t,this),f=n.call(this,s,a),p=r.call(this,f,s,a),d=(a=-1,s.length),h=p.length-1,v=e?1:1/d;++a<h;)(u=c[a]=[]).dx=p[a+1]-(u.x=p[a]),u.y=0;if(h>0)for(a=-1;++a<d;)(l=s[a])>=f[0]&&l<=f[1]&&((u=c[i.bisect(p,l,1,h)-1]).y+=v,u.push(o[a]));return c}return o.value=function(e){return arguments.length?(t=e,o):t},o.range=function(e){return arguments.length?(n=xt(e),o):n},o.bins=function(e){return arguments.length?(r="number"==typeof e?function(t){return Ji(t,e)}:xt(e),o):r},o.frequency=function(t){return arguments.length?(e=!!t,o):e},o},i.layout.pack=function(){var e,t=i.layout.hierarchy().sort(ta),n=0,r=[1,1];function o(o,i){var a=t.call(this,o,i),u=a[0],l=r[0],c=r[1],s=null==e?Math.sqrt:"function"==typeof e?e:function(){return e};if(u.x=u.y=0,Di(u,function(e){e.r=+s(e.value)}),Di(u,ia),n){var f=n*(e?1:Math.max(2*u.r/l,2*u.r/c))/2;Di(u,function(e){e.r+=f}),Di(u,ia),Di(u,function(e){e.r-=f})}return function e(t,n,r,o){var i=t.children;t.x=n+=o*t.x;t.y=r+=o*t.y;t.r*=o;if(i)for(var a=-1,u=i.length;++a<u;)e(i[a],n,r,o)}(u,l/2,c/2,e?1:1/Math.max(2*u.r/l,2*u.r/c)),a}return o.size=function(e){return arguments.length?(r=e,o):r},o.radius=function(t){return arguments.length?(e=null==t||"function"==typeof t?t:+t,o):e},o.padding=function(e){return arguments.length?(n=+e,o):n},ji(o,t)},i.layout.tree=function(){var e=i.layout.hierarchy().sort(null).value(null),t=ca,n=[1,1],r=null;function o(o,i){var c=e.call(this,o,i),s=c[0],f=function(e){var t,n={A:null,children:[e]},r=[n];for(;null!=(t=r.pop());)for(var o,i=t.children,a=0,u=i.length;a<u;++a)r.push((i[a]=o={_:i[a],parent:t,children:(o=i[a].children)&&o.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:a}).a=o);return n.children[0]}(s);if(Di(f,a),f.parent.m=-f.z,Li(f,u),r)Li(s,l);else{var p=s,d=s,h=s;Li(s,function(e){e.x<p.x&&(p=e),e.x>d.x&&(d=e),e.depth>h.depth&&(h=e)});var v=t(p,d)/2-p.x,g=n[0]/(d.x+t(d,p)/2+v),m=n[1]/(h.depth||1);Li(s,function(e){e.x=(e.x+v)*g,e.y=e.depth*m})}return c}function a(e){var n=e.children,r=e.parent.children,o=e.i?r[e.i-1]:null;if(n.length){!function(e){var t,n=0,r=0,o=e.children,i=o.length;for(;--i>=0;)(t=o[i]).z+=n,t.m+=n,n+=t.s+(r+=t.c)}(e);var i=(n[0].z+n[n.length-1].z)/2;o?(e.z=o.z+t(e._,o._),e.m=e.z-i):e.z=i}else o&&(e.z=o.z+t(e._,o._));e.parent.A=function(e,n,r){if(n){for(var o,i=e,a=e,u=n,l=i.parent.children[0],c=i.m,s=a.m,f=u.m,p=l.m;u=fa(u),i=sa(i),u&&i;)l=sa(l),(a=fa(a)).a=e,(o=u.z+f-i.z-c+t(u._,i._))>0&&(pa(da(u,e,r),e,o),c+=o,s+=o),f+=u.m,c+=i.m,p+=l.m,s+=a.m;u&&!fa(a)&&(a.t=u,a.m+=f-s),i&&!sa(l)&&(l.t=i,l.m+=c-p,r=e)}return r}(e,o,e.parent.A||r[0])}function u(e){e._.x=e.z+e.parent.m,e.m+=e.parent.m}function l(e){e.x*=n[0],e.y=e.depth*n[1]}return o.separation=function(e){return arguments.length?(t=e,o):t},o.size=function(e){return arguments.length?(r=null==(n=e)?l:null,o):r?null:n},o.nodeSize=function(e){return arguments.length?(r=null==(n=e)?null:l,o):r?n:null},ji(o,e)},i.layout.cluster=function(){var e=i.layout.hierarchy().sort(null).value(null),t=ca,n=[1,1],r=!1;function o(o,a){var u,l=e.call(this,o,a),c=l[0],s=0;Di(c,function(e){var n=e.children;n&&n.length?(e.x=function(e){return e.reduce(function(e,t){return e+t.x},0)/e.length}(n),e.y=function(e){return 1+i.max(e,function(e){return e.y})}(n)):(e.x=u?s+=t(e,u):0,e.y=0,u=e)});var f=function e(t){var n=t.children;return n&&n.length?e(n[0]):t}(c),p=function e(t){var n,r=t.children;return r&&(n=r.length)?e(r[n-1]):t}(c),d=f.x-t(f,p)/2,h=p.x+t(p,f)/2;return Di(c,r?function(e){e.x=(e.x-c.x)*n[0],e.y=(c.y-e.y)*n[1]}:function(e){e.x=(e.x-d)/(h-d)*n[0],e.y=(1-(c.y?e.y/c.y:1))*n[1]}),l}return o.separation=function(e){return arguments.length?(t=e,o):t},o.size=function(e){return arguments.length?(r=null==(n=e),o):r?null:n},o.nodeSize=function(e){return arguments.length?(r=null!=(n=e),o):r?n:null},ji(o,e)},i.layout.treemap=function(){var e,t=i.layout.hierarchy(),n=Math.round,r=[1,1],o=null,a=ha,u=!1,l="squarify",c=.5*(1+Math.sqrt(5));function s(e,t){for(var n,r,o=-1,i=e.length;++o<i;)r=(n=e[o]).value*(t<0?0:t),n.area=isNaN(r)||r<=0?0:r}function f(e){var t=e.children;if(t&&t.length){var n,r,o,i=a(e),u=[],c=t.slice(),p=1/0,v="slice"===l?i.dx:"dice"===l?i.dy:"slice-dice"===l?1&e.depth?i.dy:i.dx:Math.min(i.dx,i.dy);for(s(c,i.dx*i.dy/e.value),u.area=0;(o=c.length)>0;)u.push(n=c[o-1]),u.area+=n.area,"squarify"!==l||(r=d(u,v))<=p?(c.pop(),p=r):(u.area-=u.pop().area,h(u,v,i,!1),v=Math.min(i.dx,i.dy),u.length=u.area=0,p=1/0);u.length&&(h(u,v,i,!0),u.length=u.area=0),t.forEach(f)}}function p(e){var t=e.children;if(t&&t.length){var n,r=a(e),o=t.slice(),i=[];for(s(o,r.dx*r.dy/e.value),i.area=0;n=o.pop();)i.push(n),i.area+=n.area,null!=n.z&&(h(i,n.z?r.dx:r.dy,r,!o.length),i.length=i.area=0);t.forEach(p)}}function d(e,t){for(var n,r=e.area,o=0,i=1/0,a=-1,u=e.length;++a<u;)(n=e[a].area)&&(n<i&&(i=n),n>o&&(o=n));return t*=t,(r*=r)?Math.max(t*o*c/r,r/(t*i*c)):1/0}function h(e,t,r,o){var i,a=-1,u=e.length,l=r.x,c=r.y,s=t?n(e.area/t):0;if(t==r.dx){for((o||s>r.dy)&&(s=r.dy);++a<u;)(i=e[a]).x=l,i.y=c,i.dy=s,l+=i.dx=Math.min(r.x+r.dx-l,s?n(i.area/s):0);i.z=!0,i.dx+=r.x+r.dx-l,r.y+=s,r.dy-=s}else{for((o||s>r.dx)&&(s=r.dx);++a<u;)(i=e[a]).x=l,i.y=c,i.dx=s,c+=i.dy=Math.min(r.y+r.dy-c,s?n(i.area/s):0);i.z=!1,i.dy+=r.y+r.dy-c,r.x+=s,r.dx-=s}}function v(n){var o=e||t(n),i=o[0];return i.x=i.y=0,i.value?(i.dx=r[0],i.dy=r[1]):i.dx=i.dy=0,e&&t.revalue(i),s([i],i.dx*i.dy/i.value),(e?p:f)(i),u&&(e=o),o}return v.size=function(e){return arguments.length?(r=e,v):r},v.padding=function(e){if(!arguments.length)return o;function t(t){return va(t,e)}var n;return a=null==(o=e)?ha:"function"==(n=typeof e)?function(t){var n=e.call(v,t,t.depth);return null==n?ha(t):va(t,"number"==typeof n?[n,n,n,n]:n)}:"number"===n?(e=[e,e,e,e],t):t,v},v.round=function(e){return arguments.length?(n=e?Math.round:Number,v):n!=Number},v.sticky=function(t){return arguments.length?(u=t,e=null,v):u},v.ratio=function(e){return arguments.length?(c=e,v):c},v.mode=function(e){return arguments.length?(l=e+"",v):l},ji(v,t)},i.random={normal:function(e,t){var n=arguments.length;return n<2&&(t=1),n<1&&(e=0),function(){var n,r,o;do{o=(n=2*Math.random()-1)*n+(r=2*Math.random()-1)*r}while(!o||o>1);return e+t*n*Math.sqrt(-2*Math.log(o)/o)}},logNormal:function(){var e=i.random.normal.apply(i,arguments);return function(){return Math.exp(e())}},bates:function(e){var t=i.random.irwinHall(e);return function(){return t()/e}},irwinHall:function(e){return function(){for(var t=0,n=0;n<e;n++)t+=Math.random();return t}}},i.scale={};var wa={floor:L,ceil:L};function _a(e,t,n,r){var o=[],a=[],u=0,l=Math.min(e.length,t.length)-1;for(e[l]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++u<=l;)o.push(n(e[u-1],e[u])),a.push(r(t[u-1],t[u]));return function(t){var n=i.bisect(e,t,1,l)-1;return a[n](o[n](t))}}function ka(e,t){return i.rebind(e,t,"range","rangeRound","interpolate","clamp")}function Ea(e,t){return ba(e,xa(Sa(e,t)[2])),ba(e,xa(Sa(e,t)[2])),e}function Sa(e,t){null==t&&(t=10);var n=ga(e),r=n[1]-n[0],o=Math.pow(10,Math.floor(Math.log(r/t)/Math.LN10)),i=t/r*o;return i<=.15?o*=10:i<=.35?o*=5:i<=.75&&(o*=2),n[0]=Math.ceil(n[0]/o)*o,n[1]=Math.floor(n[1]/o)*o+.5*o,n[2]=o,n}function Ma(e,t){return i.range.apply(i,Sa(e,t))}function Ta(e,t,n){var r=Sa(e,t);if(n){var o=Lt.exec(n);if(o.shift(),"s"===o[8]){var a=i.formatPrefix(Math.max(_(r[0]),_(r[1])));return o[7]||(o[7]="."+Pa(a.scale(r[2]))),o[8]="f",n=i.format(o.join("")),function(e){return n(a.scale(e))+a.symbol}}o[7]||(o[7]="."+function(e,t){var n=Pa(t[2]);return e in Ca?Math.abs(n-Pa(Math.max(_(t[0]),_(t[1]))))+ +("e"!==e):n-2*("%"===e)}(o[8],r)),n=o.join("")}else n=",."+Pa(r[2])+"f";return i.format(n)}i.scale.linear=function(){return function e(t,n,r,o){var i,a;function u(){var e=Math.min(t.length,n.length)>2?_a:ya,u=o?Ei:ki;return i=e(t,n,u,r),a=e(n,t,u,ni),l}function l(e){return i(e)}l.invert=function(e){return a(e)};l.domain=function(e){return arguments.length?(t=e.map(Number),u()):t};l.range=function(e){return arguments.length?(n=e,u()):n};l.rangeRound=function(e){return l.range(e).interpolate(gi)};l.clamp=function(e){return arguments.length?(o=e,u()):o};l.interpolate=function(e){return arguments.length?(r=e,u()):r};l.ticks=function(e){return Ma(t,e)};l.tickFormat=function(e,n){return Ta(t,e,n)};l.nice=function(e){return Ea(t,e),u()};l.copy=function(){return e(t,n,r,o)};return u()}([0,1],[0,1],ni,!1)};var Ca={s:1,g:1,p:1,r:1,e:1};function Pa(e){return-Math.floor(Math.log(e)/Math.LN10+.01)}i.scale.log=function(){return function e(t,n,r,o){function a(e){return(r?Math.log(e<0?0:e):-Math.log(e>0?0:-e))/Math.log(n)}function u(e){return r?Math.pow(n,e):-Math.pow(n,-e)}function l(e){return t(a(e))}l.invert=function(e){return u(t.invert(e))};l.domain=function(e){return arguments.length?(r=e[0]>=0,t.domain((o=e.map(Number)).map(a)),l):o};l.base=function(e){return arguments.length?(n=+e,t.domain(o.map(a)),l):n};l.nice=function(){var e=ba(o.map(a),r?Math:Na);return t.domain(e),o=e.map(u),l};l.ticks=function(){var e=ga(o),t=[],i=e[0],l=e[1],c=Math.floor(a(i)),s=Math.ceil(a(l)),f=n%1?2:n;if(isFinite(s-c)){if(r){for(;c<s;c++)for(var p=1;p<f;p++)t.push(u(c)*p);t.push(u(c))}else for(t.push(u(c));c++<s;)for(var p=f-1;p>0;p--)t.push(u(c)*p);for(c=0;t[c]<i;c++);for(s=t.length;t[s-1]>l;s--);t=t.slice(c,s)}return t};l.tickFormat=function(e,t){if(!arguments.length)return Oa;arguments.length<2?t=Oa:"function"!=typeof t&&(t=i.format(t));var r=Math.max(1,n*e/l.ticks().length);return function(e){var o=e/u(Math.round(a(e)));return o*n<n-.5&&(o*=n),o<=r?t(e):""}};l.copy=function(){return e(t.copy(),n,r,o)};return ka(l,t)}(i.scale.linear().domain([0,1]),10,!0,[1,10])};var Oa=i.format(".0e"),Na={floor:function(e){return-Math.ceil(-e)},ceil:function(e){return-Math.floor(-e)}};function Aa(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}i.scale.pow=function(){return function e(t,n,r){var o=Aa(n),i=Aa(1/n);function a(e){return t(o(e))}a.invert=function(e){return i(t.invert(e))};a.domain=function(e){return arguments.length?(t.domain((r=e.map(Number)).map(o)),a):r};a.ticks=function(e){return Ma(r,e)};a.tickFormat=function(e,t){return Ta(r,e,t)};a.nice=function(e){return a.domain(Ea(r,e))};a.exponent=function(e){return arguments.length?(o=Aa(n=e),i=Aa(1/n),t.domain(r.map(o)),a):n};a.copy=function(){return e(t.copy(),n,r)};return ka(a,t)}(i.scale.linear(),1,[0,1])},i.scale.sqrt=function(){return i.scale.pow().exponent(.5)},i.scale.ordinal=function(){return function e(t,n){var r,o,a;function u(e){return o[((r.get(e)||("range"===n.t?r.set(e,t.push(e)):NaN))-1)%o.length]}function l(e,n){return i.range(t.length).map(function(t){return e+n*t})}u.domain=function(e){if(!arguments.length)return t;t=[],r=new E;for(var o,i=-1,a=e.length;++i<a;)r.has(o=e[i])||r.set(o,t.push(o));return u[n.t].apply(u,n.a)};u.range=function(e){return arguments.length?(o=e,a=0,n={t:"range",a:arguments},u):o};u.rangePoints=function(e,r){arguments.length<2&&(r=0);var i=e[0],c=e[1],s=t.length<2?(i=(i+c)/2,0):(c-i)/(t.length-1+r);return o=l(i+s*r/2,s),a=0,n={t:"rangePoints",a:arguments},u};u.rangeRoundPoints=function(e,r){arguments.length<2&&(r=0);var i=e[0],c=e[1],s=t.length<2?(i=c=Math.round((i+c)/2),0):(c-i)/(t.length-1+r)|0;return o=l(i+Math.round(s*r/2+(c-i-(t.length-1+r)*s)/2),s),a=0,n={t:"rangeRoundPoints",a:arguments},u};u.rangeBands=function(e,r,i){arguments.length<2&&(r=0),arguments.length<3&&(i=r);var c=e[1]<e[0],s=e[c-0],f=e[1-c],p=(f-s)/(t.length-r+2*i);return o=l(s+p*i,p),c&&o.reverse(),a=p*(1-r),n={t:"rangeBands",a:arguments},u};u.rangeRoundBands=function(e,r,i){arguments.length<2&&(r=0),arguments.length<3&&(i=r);var c=e[1]<e[0],s=e[c-0],f=e[1-c],p=Math.floor((f-s)/(t.length-r+2*i));return o=l(s+Math.round((f-s-(t.length-r)*p)/2),p),c&&o.reverse(),a=Math.round(p*(1-r)),n={t:"rangeRoundBands",a:arguments},u};u.rangeBand=function(){return a};u.rangeExtent=function(){return ga(n.a[0])};u.copy=function(){return e(t,n)};return u.domain(t)}([],{t:"range",a:[[]]})},i.scale.category10=function(){return i.scale.ordinal().range(Ra)},i.scale.category20=function(){return i.scale.ordinal().range(ja)},i.scale.category20b=function(){return i.scale.ordinal().range(La)},i.scale.category20c=function(){return i.scale.ordinal().range(Da)};var Ra=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(ft),ja=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(ft),La=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(ft),Da=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(ft);function Ia(){return 0}i.scale.quantile=function(){return function e(t,n){var r;function o(){var e=0,o=n.length;for(r=[];++e<o;)r[e-1]=i.quantile(t,e/o);return a}function a(e){if(!isNaN(e=+e))return n[i.bisect(r,e)]}a.domain=function(e){return arguments.length?(t=e.map(m).filter(y).sort(g),o()):t};a.range=function(e){return arguments.length?(n=e,o()):n};a.quantiles=function(){return r};a.invertExtent=function(e){return(e=n.indexOf(e))<0?[NaN,NaN]:[e>0?r[e-1]:t[0],e<r.length?r[e]:t[t.length-1]]};a.copy=function(){return e(t,n)};return o()}([],[])},i.scale.quantize=function(){return function e(t,n,r){var o,i;function a(e){return r[Math.max(0,Math.min(i,Math.floor(o*(e-t))))]}function u(){return o=r.length/(n-t),i=r.length-1,a}a.domain=function(e){return arguments.length?(t=+e[0],n=+e[e.length-1],u()):[t,n]};a.range=function(e){return arguments.length?(r=e,u()):r};a.invertExtent=function(e){return[e=(e=r.indexOf(e))<0?NaN:e/o+t,e+1/o]};a.copy=function(){return e(t,n,r)};return u()}(0,1,[0,1])},i.scale.threshold=function(){return function e(t,n){function r(e){if(e<=e)return n[i.bisect(t,e)]}r.domain=function(e){return arguments.length?(t=e,r):t};r.range=function(e){return arguments.length?(n=e,r):n};r.invertExtent=function(e){return e=n.indexOf(e),[t[e-1],t[e]]};r.copy=function(){return e(t,n)};return r}([.5],[0,1])},i.scale.identity=function(){return function e(t){function n(e){return+e}n.invert=n;n.domain=n.range=function(e){return arguments.length?(t=e.map(n),n):t};n.ticks=function(e){return Ma(t,e)};n.tickFormat=function(e,n){return Ta(t,e,n)};n.copy=function(){return e(t)};return n}([0,1])},i.svg={},i.svg.arc=function(){var e=za,t=Fa,n=Ia,r=Ua,o=qa,i=Ha,a=Ba;function u(){var u=Math.max(0,+e.apply(this,arguments)),c=Math.max(0,+t.apply(this,arguments)),s=o.apply(this,arguments)-Ae,f=i.apply(this,arguments)-Ae,p=Math.abs(f-s),d=s>f?0:1;if(c<u&&(h=c,c=u,u=h),p>=Ne)return l(c,d)+(u?l(u,1-d):"")+"Z";var h,v,g,m,y,b,x,w,_,k,E,S,M=0,T=0,C=[];if((m=(+a.apply(this,arguments)||0)/2)&&(g=r===Ua?Math.sqrt(u*u+c*c):+r.apply(this,arguments),d||(T*=-1),c&&(T=Ue(g/c*Math.sin(m))),u&&(M=Ue(g/u*Math.sin(m)))),c){y=c*Math.cos(s+T),b=c*Math.sin(s+T),x=c*Math.cos(f-T),w=c*Math.sin(f-T);var P=Math.abs(f-s-2*T)<=Pe?0:1;if(T&&Va(y,b,x,w)===d^P){var O=(s+f)/2;y=c*Math.cos(O),b=c*Math.sin(O),x=w=null}}else y=b=0;if(u){_=u*Math.cos(f-M),k=u*Math.sin(f-M),E=u*Math.cos(s+M),S=u*Math.sin(s+M);var N=Math.abs(s-f+2*M)<=Pe?0:1;if(M&&Va(_,k,E,S)===1-d^N){var A=(s+f)/2;_=u*Math.cos(A),k=u*Math.sin(A),E=S=null}}else _=k=0;if(p>Te&&(h=Math.min(Math.abs(c-u)/2,+n.apply(this,arguments)))>.001){v=u<c^d?0:1;var R=h,j=h;if(p<Pe){var L=null==E?[_,k]:null==x?[y,b]:ho([y,b],[E,S],[x,w],[_,k]),D=y-L[0],I=b-L[1],U=x-L[0],z=w-L[1],F=1/Math.sin(Math.acos((D*U+I*z)/(Math.sqrt(D*D+I*I)*Math.sqrt(U*U+z*z)))/2),q=Math.sqrt(L[0]*L[0]+L[1]*L[1]);j=Math.min(h,(u-q)/(F-1)),R=Math.min(h,(c-q)/(F+1))}if(null!=x){var H=Wa(null==E?[_,k]:[E,S],[y,b],c,R,d),B=Wa([x,w],[_,k],c,R,d);h===R?C.push("M",H[0],"A",R,",",R," 0 0,",v," ",H[1],"A",c,",",c," 0 ",1-d^Va(H[1][0],H[1][1],B[1][0],B[1][1]),",",d," ",B[1],"A",R,",",R," 0 0,",v," ",B[0]):C.push("M",H[0],"A",R,",",R," 0 1,",v," ",B[0])}else C.push("M",y,",",b);if(null!=E){var V=Wa([y,b],[E,S],u,-j,d),W=Wa([_,k],null==x?[y,b]:[x,w],u,-j,d);h===j?C.push("L",W[0],"A",j,",",j," 0 0,",v," ",W[1],"A",u,",",u," 0 ",d^Va(W[1][0],W[1][1],V[1][0],V[1][1]),",",1-d," ",V[1],"A",j,",",j," 0 0,",v," ",V[0]):C.push("L",W[0],"A",j,",",j," 0 0,",v," ",V[0])}else C.push("L",_,",",k)}else C.push("M",y,",",b),null!=x&&C.push("A",c,",",c," 0 ",P,",",d," ",x,",",w),C.push("L",_,",",k),null!=E&&C.push("A",u,",",u," 0 ",N,",",1-d," ",E,",",S);return C.push("Z"),C.join("")}function l(e,t){return"M0,"+e+"A"+e+","+e+" 0 1,"+t+" 0,"+-e+"A"+e+","+e+" 0 1,"+t+" 0,"+e}return u.innerRadius=function(t){return arguments.length?(e=xt(t),u):e},u.outerRadius=function(e){return arguments.length?(t=xt(e),u):t},u.cornerRadius=function(e){return arguments.length?(n=xt(e),u):n},u.padRadius=function(e){return arguments.length?(r=e==Ua?Ua:xt(e),u):r},u.startAngle=function(e){return arguments.length?(o=xt(e),u):o},u.endAngle=function(e){return arguments.length?(i=xt(e),u):i},u.padAngle=function(e){return arguments.length?(a=xt(e),u):a},u.centroid=function(){var n=(+e.apply(this,arguments)+ +t.apply(this,arguments))/2,r=(+o.apply(this,arguments)+ +i.apply(this,arguments))/2-Ae;return[Math.cos(r)*n,Math.sin(r)*n]},u};var Ua="auto";function za(e){return e.innerRadius}function Fa(e){return e.outerRadius}function qa(e){return e.startAngle}function Ha(e){return e.endAngle}function Ba(e){return e&&e.padAngle}function Va(e,t,n,r){return(e-n)*t-(t-r)*e>0?0:1}function Wa(e,t,n,r,o){var i=e[0]-t[0],a=e[1]-t[1],u=(o?r:-r)/Math.sqrt(i*i+a*a),l=u*a,c=-u*i,s=e[0]+l,f=e[1]+c,p=t[0]+l,d=t[1]+c,h=(s+p)/2,v=(f+d)/2,g=p-s,m=d-f,y=g*g+m*m,b=n-r,x=s*d-p*f,w=(m<0?-1:1)*Math.sqrt(Math.max(0,b*b*y-x*x)),_=(x*m-g*w)/y,k=(-x*g-m*w)/y,E=(x*m+g*w)/y,S=(-x*g+m*w)/y,M=_-h,T=k-v,C=E-h,P=S-v;return M*M+T*T>C*C+P*P&&(_=E,k=S),[[_-l,k-c],[_*n/b,k*n/b]]}function Ga(e){var t=uo,n=lo,r=Jn,o=$a,i=o.key,a=.7;function u(i){var u,l=[],c=[],s=-1,f=i.length,p=xt(t),d=xt(n);function h(){l.push("M",o(e(c),a))}for(;++s<f;)r.call(this,u=i[s],s)?c.push([+p.call(this,u,s),+d.call(this,u,s)]):c.length&&(h(),c=[]);return c.length&&h(),l.length?l.join(""):null}return u.x=function(e){return arguments.length?(t=e,u):t},u.y=function(e){return arguments.length?(n=e,u):n},u.defined=function(e){return arguments.length?(r=e,u):r},u.interpolate=function(e){return arguments.length?(i="function"==typeof e?o=e:(o=Qa.get(e)||$a).key,u):i},u.tension=function(e){return arguments.length?(a=e,u):a},u}i.svg.line=function(){return Ga(L)};var Qa=i.map({linear:$a,"linear-closed":Ya,step:function(e){var t=0,n=e.length,r=e[0],o=[r[0],",",r[1]];for(;++t<n;)o.push("H",(r[0]+(r=e[t])[0])/2,"V",r[1]);n>1&&o.push("H",r[0]);return o.join("")},"step-before":Ka,"step-after":Xa,basis:eu,"basis-open":function(e){if(e.length<4)return $a(e);var t,n=[],r=-1,o=e.length,i=[0],a=[0];for(;++r<3;)t=e[r],i.push(t[0]),a.push(t[1]);n.push(tu(ou,i)+","+tu(ou,a)),--r;for(;++r<o;)t=e[r],i.shift(),i.push(t[0]),a.shift(),a.push(t[1]),iu(n,i,a);return n.join("")},"basis-closed":function(e){var t,n,r=-1,o=e.length,i=o+4,a=[],u=[];for(;++r<4;)n=e[r%o],a.push(n[0]),u.push(n[1]);t=[tu(ou,a),",",tu(ou,u)],--r;for(;++r<i;)n=e[r%o],a.shift(),a.push(n[0]),u.shift(),u.push(n[1]),iu(t,a,u);return t.join("")},bundle:function(e,t){var n=e.length-1;if(n)for(var r,o,i=e[0][0],a=e[0][1],u=e[n][0]-i,l=e[n][1]-a,c=-1;++c<=n;)r=e[c],o=c/n,r[0]=t*r[0]+(1-t)*(i+o*u),r[1]=t*r[1]+(1-t)*(a+o*l);return eu(e)},cardinal:function(e,t){return e.length<3?$a(e):e[0]+Za(e,Ja(e,t))},"cardinal-open":function(e,t){return e.length<4?$a(e):e[1]+Za(e.slice(1,-1),Ja(e,t))},"cardinal-closed":function(e,t){return e.length<3?Ya(e):e[0]+Za((e.push(e[0]),e),Ja([e[e.length-2]].concat(e,[e[1]]),t))},monotone:function(e){return e.length<3?$a(e):e[0]+Za(e,function(e){var t,n,r,o,i=[],a=function(e){var t=0,n=e.length-1,r=[],o=e[0],i=e[1],a=r[0]=au(o,i);for(;++t<n;)r[t]=(a+(a=au(o=i,i=e[t+1])))/2;return r[t]=a,r}(e),u=-1,l=e.length-1;for(;++u<l;)t=au(e[u],e[u+1]),_(t)<Te?a[u]=a[u+1]=0:(n=a[u]/t,r=a[u+1]/t,(o=n*n+r*r)>9&&(o=3*t/Math.sqrt(o),a[u]=o*n,a[u+1]=o*r));u=-1;for(;++u<=l;)o=(e[Math.min(l,u+1)][0]-e[Math.max(0,u-1)][0])/(6*(1+a[u]*a[u])),i.push([o||0,a[u]*o||0]);return i}(e))}});function $a(e){return e.length>1?e.join("L"):e+"Z"}function Ya(e){return e.join("L")+"Z"}function Ka(e){for(var t=0,n=e.length,r=e[0],o=[r[0],",",r[1]];++t<n;)o.push("V",(r=e[t])[1],"H",r[0]);return o.join("")}function Xa(e){for(var t=0,n=e.length,r=e[0],o=[r[0],",",r[1]];++t<n;)o.push("H",(r=e[t])[0],"V",r[1]);return o.join("")}function Za(e,t){if(t.length<1||e.length!=t.length&&e.length!=t.length+2)return $a(e);var n=e.length!=t.length,r="",o=e[0],i=e[1],a=t[0],u=a,l=1;if(n&&(r+="Q"+(i[0]-2*a[0]/3)+","+(i[1]-2*a[1]/3)+","+i[0]+","+i[1],o=e[1],l=2),t.length>1){u=t[1],i=e[l],l++,r+="C"+(o[0]+a[0])+","+(o[1]+a[1])+","+(i[0]-u[0])+","+(i[1]-u[1])+","+i[0]+","+i[1];for(var c=2;c<t.length;c++,l++)i=e[l],u=t[c],r+="S"+(i[0]-u[0])+","+(i[1]-u[1])+","+i[0]+","+i[1]}if(n){var s=e[l];r+="Q"+(i[0]+2*u[0]/3)+","+(i[1]+2*u[1]/3)+","+s[0]+","+s[1]}return r}function Ja(e,t){for(var n,r=[],o=(1-t)/2,i=e[0],a=e[1],u=1,l=e.length;++u<l;)n=i,i=a,a=e[u],r.push([o*(a[0]-n[0]),o*(a[1]-n[1])]);return r}function eu(e){if(e.length<3)return $a(e);var t=1,n=e.length,r=e[0],o=r[0],i=r[1],a=[o,o,o,(r=e[1])[0]],u=[i,i,i,r[1]],l=[o,",",i,"L",tu(ou,a),",",tu(ou,u)];for(e.push(e[n-1]);++t<=n;)r=e[t],a.shift(),a.push(r[0]),u.shift(),u.push(r[1]),iu(l,a,u);return e.pop(),l.push("L",r),l.join("")}function tu(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}Qa.forEach(function(e,t){t.key=e,t.closed=/-closed$/.test(e)});var nu=[0,2/3,1/3,0],ru=[0,1/3,2/3,0],ou=[0,1/6,2/3,1/6];function iu(e,t,n){e.push("C",tu(nu,t),",",tu(nu,n),",",tu(ru,t),",",tu(ru,n),",",tu(ou,t),",",tu(ou,n))}function au(e,t){return(t[1]-e[1])/(t[0]-e[0])}function uu(e){for(var t,n,r,o=-1,i=e.length;++o<i;)n=(t=e[o])[0],r=t[1]-Ae,t[0]=n*Math.cos(r),t[1]=n*Math.sin(r);return e}function lu(e){var t=uo,n=uo,r=0,o=lo,i=Jn,a=$a,u=a.key,l=a,c="L",s=.7;function f(u){var f,p,d,h=[],v=[],g=[],m=-1,y=u.length,b=xt(t),x=xt(r),w=t===n?function(){return p}:xt(n),_=r===o?function(){return d}:xt(o);function k(){h.push("M",a(e(g),s),c,l(e(v.reverse()),s),"Z")}for(;++m<y;)i.call(this,f=u[m],m)?(v.push([p=+b.call(this,f,m),d=+x.call(this,f,m)]),g.push([+w.call(this,f,m),+_.call(this,f,m)])):v.length&&(k(),v=[],g=[]);return v.length&&k(),h.length?h.join(""):null}return f.x=function(e){return arguments.length?(t=n=e,f):n},f.x0=function(e){return arguments.length?(t=e,f):t},f.x1=function(e){return arguments.length?(n=e,f):n},f.y=function(e){return arguments.length?(r=o=e,f):o},f.y0=function(e){return arguments.length?(r=e,f):r},f.y1=function(e){return arguments.length?(o=e,f):o},f.defined=function(e){return arguments.length?(i=e,f):i},f.interpolate=function(e){return arguments.length?(u="function"==typeof e?a=e:(a=Qa.get(e)||$a).key,l=a.reverse||a,c=a.closed?"M":"L",f):u},f.tension=function(e){return arguments.length?(s=e,f):s},f}function cu(e){return e.radius}function su(e){return[e.x,e.y]}function fu(){return 64}function pu(){return"circle"}function du(e){var t=Math.sqrt(e/Pe);return"M0,"+t+"A"+t+","+t+" 0 1,1 0,"+-t+"A"+t+","+t+" 0 1,1 0,"+t+"Z"}i.svg.line.radial=function(){var e=Ga(uu);return e.radius=e.x,delete e.x,e.angle=e.y,delete e.y,e},Ka.reverse=Xa,Xa.reverse=Ka,i.svg.area=function(){return lu(L)},i.svg.area.radial=function(){var e=lu(uu);return e.radius=e.x,delete e.x,e.innerRadius=e.x0,delete e.x0,e.outerRadius=e.x1,delete e.x1,e.angle=e.y,delete e.y,e.startAngle=e.y0,delete e.y0,e.endAngle=e.y1,delete e.y1,e},i.svg.chord=function(){var e=Qr,t=$r,n=cu,r=qa,o=Ha;function i(n,r){var o,i,c=a(this,e,n,r),s=a(this,t,n,r);return"M"+c.p0+u(c.r,c.p1,c.a1-c.a0)+(i=s,(o=c).a0==i.a0&&o.a1==i.a1?l(c.r,c.p1,c.r,c.p0):l(c.r,c.p1,s.r,s.p0)+u(s.r,s.p1,s.a1-s.a0)+l(s.r,s.p1,c.r,c.p0))+"Z"}function a(e,t,i,a){var u=t.call(e,i,a),l=n.call(e,u,a),c=r.call(e,u,a)-Ae,s=o.call(e,u,a)-Ae;return{r:l,a0:c,a1:s,p0:[l*Math.cos(c),l*Math.sin(c)],p1:[l*Math.cos(s),l*Math.sin(s)]}}function u(e,t,n){return"A"+e+","+e+" 0 "+ +(n>Pe)+",1 "+t}function l(e,t,n,r){return"Q 0,0 "+r}return i.radius=function(e){return arguments.length?(n=xt(e),i):n},i.source=function(t){return arguments.length?(e=xt(t),i):e},i.target=function(e){return arguments.length?(t=xt(e),i):t},i.startAngle=function(e){return arguments.length?(r=xt(e),i):r},i.endAngle=function(e){return arguments.length?(o=xt(e),i):o},i},i.svg.diagonal=function(){var e=Qr,t=$r,n=su;function r(r,o){var i=e.call(this,r,o),a=t.call(this,r,o),u=(i.y+a.y)/2,l=[i,{x:i.x,y:u},{x:a.x,y:u},a];return"M"+(l=l.map(n))[0]+"C"+l[1]+" "+l[2]+" "+l[3]}return r.source=function(t){return arguments.length?(e=xt(t),r):e},r.target=function(e){return arguments.length?(t=xt(e),r):t},r.projection=function(e){return arguments.length?(n=e,r):n},r},i.svg.diagonal.radial=function(){var e=i.svg.diagonal(),t=su,n=e.projection;return e.projection=function(e){return arguments.length?n(function(e){return function(){var t=e.apply(this,arguments),n=t[0],r=t[1]-Ae;return[n*Math.cos(r),n*Math.sin(r)]}}(t=e)):t},e},i.svg.symbol=function(){var e=pu,t=fu;function n(n,r){return(hu.get(e.call(this,n,r))||du)(t.call(this,n,r))}return n.type=function(t){return arguments.length?(e=xt(t),n):e},n.size=function(e){return arguments.length?(t=xt(e),n):t},n};var hu=i.map({circle:du,cross:function(e){var t=Math.sqrt(e/5)/2;return"M"+-3*t+","+-t+"H"+-t+"V"+-3*t+"H"+t+"V"+-t+"H"+3*t+"V"+t+"H"+t+"V"+3*t+"H"+-t+"V"+t+"H"+-3*t+"Z"},diamond:function(e){var t=Math.sqrt(e/(2*gu)),n=t*gu;return"M0,"+-t+"L"+n+",0 0,"+t+" "+-n+",0Z"},square:function(e){var t=Math.sqrt(e)/2;return"M"+-t+","+-t+"L"+t+","+-t+" "+t+","+t+" "+-t+","+t+"Z"},"triangle-down":function(e){var t=Math.sqrt(e/vu),n=t*vu/2;return"M0,"+n+"L"+t+","+-n+" "+-t+","+-n+"Z"},"triangle-up":function(e){var t=Math.sqrt(e/vu),n=t*vu/2;return"M0,"+-n+"L"+t+","+n+" "+-t+","+n+"Z"}});i.svg.symbolTypes=hu.keys();var vu=Math.sqrt(3),gu=Math.tan(30*Re);X.transition=function(e){for(var t,n,r=xu||++ku,o=Mu(e),i=[],a=wu||{time:Date.now(),ease:fi,delay:0,duration:250},u=-1,l=this.length;++u<l;){i.push(t=[]);for(var c=this[u],s=-1,f=c.length;++s<f;)(n=c[s])&&Tu(n,s,o,r,a),t.push(n)}return bu(i,o,r)},X.interrupt=function(e){return this.each(null==e?mu:yu(Mu(e)))};var mu=yu(Mu());function yu(e){return function(){var t,n,r;(t=this[e])&&(r=t[n=t.active])&&(r.timer.c=null,r.timer.t=NaN,--t.count?delete t[n]:delete this[e],t.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function bu(e,t,n){return G(e,_u),e.namespace=t,e.id=n,e}var xu,wu,_u=[],ku=0;function Eu(e,t,n,r){var o=e.id,i=e.namespace;return he(e,"function"==typeof n?function(e,a,u){e[i][o].tween.set(t,r(n.call(e,e.__data__,a,u)))}:(n=r(n),function(e){e[i][o].tween.set(t,n)}))}function Su(e){return null==e&&(e=""),function(){this.textContent=e}}function Mu(e){return null==e?"__transition__":"__transition_"+e+"__"}function Tu(e,t,n,r,o){var i,a,u,l,c,s=e[n]||(e[n]={active:0,count:0}),f=s[r];function p(n){var o=s.active,p=s[o];for(var h in p&&(p.timer.c=null,p.timer.t=NaN,--s.count,delete s[o],p.event&&p.event.interrupt.call(e,e.__data__,p.index)),s)if(+h<r){var v=s[h];v.timer.c=null,v.timer.t=NaN,--s.count,delete s[h]}a.c=d,Ct(function(){return a.c&&d(n||1)&&(a.c=null,a.t=NaN),1},0,i),s.active=r,f.event&&f.event.start.call(e,e.__data__,t),c=[],f.tween.forEach(function(n,r){(r=r.call(e,e.__data__,t))&&c.push(r)}),l=f.ease,u=f.duration}function d(o){for(var i=o/u,a=l(i),p=c.length;p>0;)c[--p].call(e,a);if(i>=1)return f.event&&f.event.end.call(e,e.__data__,t),--s.count?delete s[r]:delete e[n],1}f||(i=o.time,a=Ct(function(e){var t=f.delay;if(a.t=t+i,t<=e)return p(e-t);a.c=p},0,i),f=s[r]={tween:new E,time:i,timer:a,delay:o.delay,duration:o.duration,ease:o.ease,index:t},o=null,++s.count)}_u.call=X.call,_u.empty=X.empty,_u.node=X.node,_u.size=X.size,i.transition=function(e,t){return e&&e.transition?xu?e.transition(t):e:i.selection().transition(e)},i.transition.prototype=_u,_u.select=function(e){var t,n,r,o=this.id,i=this.namespace,a=[];e=Z(e);for(var u=-1,l=this.length;++u<l;){a.push(t=[]);for(var c=this[u],s=-1,f=c.length;++s<f;)(r=c[s])&&(n=e.call(r,r.__data__,s,u))?("__data__"in r&&(n.__data__=r.__data__),Tu(n,s,i,o,r[i][o]),t.push(n)):t.push(null)}return bu(a,i,o)},_u.selectAll=function(e){var t,n,r,o,i,a=this.id,u=this.namespace,l=[];e=J(e);for(var c=-1,s=this.length;++c<s;)for(var f=this[c],p=-1,d=f.length;++p<d;)if(r=f[p]){i=r[u][a],n=e.call(r,r.__data__,p,c),l.push(t=[]);for(var h=-1,v=n.length;++h<v;)(o=n[h])&&Tu(o,h,u,a,i),t.push(o)}return bu(l,u,a)},_u.filter=function(e){var t,n,r=[];"function"!=typeof e&&(e=de(e));for(var o=0,i=this.length;o<i;o++){r.push(t=[]);for(var a,u=0,l=(a=this[o]).length;u<l;u++)(n=a[u])&&e.call(n,n.__data__,u,o)&&t.push(n)}return bu(r,this.namespace,this.id)},_u.tween=function(e,t){var n=this.id,r=this.namespace;return arguments.length<2?this.node()[r][n].tween.get(e):he(this,null==t?function(t){t[r][n].tween.remove(e)}:function(o){o[r][n].tween.set(e,t)})},_u.attr=function(e,t){if(arguments.length<2){for(t in e)this.attr(t,e[t]);return this}var n="transform"==e?_i:ni,r=i.ns.qualify(e);function o(){this.removeAttribute(r)}function a(){this.removeAttributeNS(r.space,r.local)}return Eu(this,"attr."+e,t,r.local?function(e){return null==e?a:(e+="",function(){var t,o=this.getAttributeNS(r.space,r.local);return o!==e&&(t=n(o,e),function(e){this.setAttributeNS(r.space,r.local,t(e))})})}:function(e){return null==e?o:(e+="",function(){var t,o=this.getAttribute(r);return o!==e&&(t=n(o,e),function(e){this.setAttribute(r,t(e))})})})},_u.attrTween=function(e,t){var n=i.ns.qualify(e);return this.tween("attr."+e,n.local?function(e,r){var o=t.call(this,e,r,this.getAttributeNS(n.space,n.local));return o&&function(e){this.setAttributeNS(n.space,n.local,o(e))}}:function(e,r){var o=t.call(this,e,r,this.getAttribute(n));return o&&function(e){this.setAttribute(n,o(e))}})},_u.style=function(e,t,n){var r=arguments.length;if(r<3){if("string"!=typeof e){for(n in r<2&&(t=""),e)this.style(n,e[n],t);return this}n=""}function o(){this.style.removeProperty(e)}return Eu(this,"style."+e,t,function(t){return null==t?o:(t+="",function(){var r,o=s(this).getComputedStyle(this,null).getPropertyValue(e);return o!==t&&(r=ni(o,t),function(t){this.style.setProperty(e,r(t),n)})})})},_u.styleTween=function(e,t,n){return arguments.length<3&&(n=""),this.tween("style."+e,function(r,o){var i=t.call(this,r,o,s(this).getComputedStyle(this,null).getPropertyValue(e));return i&&function(t){this.style.setProperty(e,i(t),n)}})},_u.text=function(e){return Eu(this,"text",e,Su)},_u.remove=function(){var e=this.namespace;return this.each("end.transition",function(){var t;this[e].count<2&&(t=this.parentNode)&&t.removeChild(this)})},_u.ease=function(e){var t=this.id,n=this.namespace;return arguments.length<1?this.node()[n][t].ease:("function"!=typeof e&&(e=i.ease.apply(i,arguments)),he(this,function(r){r[n][t].ease=e}))},_u.delay=function(e){var t=this.id,n=this.namespace;return arguments.length<1?this.node()[n][t].delay:he(this,"function"==typeof e?function(r,o,i){r[n][t].delay=+e.call(r,r.__data__,o,i)}:(e=+e,function(r){r[n][t].delay=e}))},_u.duration=function(e){var t=this.id,n=this.namespace;return arguments.length<1?this.node()[n][t].duration:he(this,"function"==typeof e?function(r,o,i){r[n][t].duration=Math.max(1,e.call(r,r.__data__,o,i))}:(e=Math.max(1,e),function(r){r[n][t].duration=e}))},_u.each=function(e,t){var n=this.id,r=this.namespace;if(arguments.length<2){var o=wu,a=xu;try{xu=n,he(this,function(t,o,i){wu=t[r][n],e.call(t,t.__data__,o,i)})}finally{wu=o,xu=a}}else he(this,function(o){var a=o[r][n];(a.event||(a.event=i.dispatch("start","end","interrupt"))).on(e,t)});return this},_u.transition=function(){for(var e,t,n,r=this.id,o=++ku,i=this.namespace,a=[],u=0,l=this.length;u<l;u++){a.push(e=[]);for(var c,s=0,f=(c=this[u]).length;s<f;s++)(t=c[s])&&Tu(t,s,i,o,{time:(n=t[i][r]).time,ease:n.ease,delay:n.delay+n.duration,duration:n.duration}),e.push(t)}return bu(a,i,o)},i.svg.axis=function(){var e,t=i.scale.linear(),n=Cu,r=6,o=6,a=3,l=[10],c=null;function s(u){u.each(function(){var u,s=i.select(this),f=this.__chart__||t,p=this.__chart__=t.copy(),d=null==c?p.ticks?p.ticks.apply(p,l):p.domain():c,h=null==e?p.tickFormat?p.tickFormat.apply(p,l):L:e,v=s.selectAll(".tick").data(d,p),g=v.enter().insert("g",".domain").attr("class","tick").style("opacity",Te),m=i.transition(v.exit()).style("opacity",Te).remove(),y=i.transition(v.order()).style("opacity",1),b=Math.max(r,0)+a,x=ma(p),w=s.selectAll(".domain").data([0]),_=(w.enter().append("path").attr("class","domain"),i.transition(w));g.append("line"),g.append("text");var k,E,S,M,T=g.select("line"),C=y.select("line"),P=v.select("text").text(h),O=g.select("text"),N=y.select("text"),A="top"===n||"left"===n?-1:1;if("bottom"===n||"top"===n?(u=Ou,k="x",S="y",E="x2",M="y2",P.attr("dy",A<0?"0em":".71em").style("text-anchor","middle"),_.attr("d","M"+x[0]+","+A*o+"V0H"+x[1]+"V"+A*o)):(u=Nu,k="y",S="x",E="y2",M="x2",P.attr("dy",".32em").style("text-anchor",A<0?"end":"start"),_.attr("d","M"+A*o+","+x[0]+"H0V"+x[1]+"H"+A*o)),T.attr(M,A*r),O.attr(S,A*b),C.attr(E,0).attr(M,A*r),N.attr(k,0).attr(S,A*b),p.rangeBand){var R=p,j=R.rangeBand()/2;f=p=function(e){return R(e)+j}}else f.rangeBand?f=p:m.call(u,p,f);g.call(u,f,p),y.call(u,p,p)})}return s.scale=function(e){return arguments.length?(t=e,s):t},s.orient=function(e){return arguments.length?(n=e in Pu?e+"":Cu,s):n},s.ticks=function(){return arguments.length?(l=u(arguments),s):l},s.tickValues=function(e){return arguments.length?(c=e,s):c},s.tickFormat=function(t){return arguments.length?(e=t,s):e},s.tickSize=function(e){var t=arguments.length;return t?(r=+e,o=+arguments[t-1],s):r},s.innerTickSize=function(e){return arguments.length?(r=+e,s):r},s.outerTickSize=function(e){return arguments.length?(o=+e,s):o},s.tickPadding=function(e){return arguments.length?(a=+e,s):a},s.tickSubdivide=function(){return arguments.length&&s},s};var Cu="bottom",Pu={top:1,right:1,bottom:1,left:1};function Ou(e,t,n){e.attr("transform",function(e){var r=t(e);return"translate("+(isFinite(r)?r:n(e))+",0)"})}function Nu(e,t,n){e.attr("transform",function(e){var r=t(e);return"translate(0,"+(isFinite(r)?r:n(e))+")"})}i.svg.brush=function(){var e,t,n=V(p,"brushstart","brush","brushend"),r=null,o=null,a=[0,0],u=[0,0],l=!0,c=!0,f=Ru[0];function p(e){e.each(function(){var e=i.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",g).on("touchstart.brush",g),t=e.selectAll(".background").data([0]);t.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),e.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var n=e.selectAll(".resize").data(f,L);n.exit().remove(),n.enter().append("g").attr("class",function(e){return"resize "+e}).style("cursor",function(e){return Au[e]}).append("rect").attr("x",function(e){return/[ew]$/.test(e)?-3:null}).attr("y",function(e){return/^[ns]/.test(e)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),n.style("display",p.empty()?"none":null);var a,u=i.transition(e),l=i.transition(t);r&&(a=ma(r),l.attr("x",a[0]).attr("width",a[1]-a[0]),h(u)),o&&(a=ma(o),l.attr("y",a[0]).attr("height",a[1]-a[0]),v(u)),d(u)})}function d(e){e.selectAll(".resize").attr("transform",function(e){return"translate("+a[+/e$/.test(e)]+","+u[+/^s/.test(e)]+")"})}function h(e){e.select(".extent").attr("x",a[0]),e.selectAll(".extent,.n>rect,.s>rect").attr("width",a[1]-a[0])}function v(e){e.select(".extent").attr("y",u[0]),e.selectAll(".extent,.e>rect,.w>rect").attr("height",u[1]-u[0])}function g(){var f,g,m=this,y=i.select(i.event.target),b=n.of(m,arguments),x=i.select(m),w=y.datum(),_=!/^(n|s)$/.test(w)&&r,k=!/^(e|w)$/.test(w)&&o,E=y.classed("extent"),S=ke(m),M=i.mouse(m),T=i.select(s(m)).on("keydown.brush",function(){32==i.event.keyCode&&(E||(f=null,M[0]-=a[1],M[1]-=u[1],E=2),H())}).on("keyup.brush",function(){32==i.event.keyCode&&2==E&&(M[0]+=a[1],M[1]+=u[1],E=0,H())});if(i.event.changedTouches?T.on("touchmove.brush",O).on("touchend.brush",A):T.on("mousemove.brush",O).on("mouseup.brush",A),x.interrupt().selectAll("*").interrupt(),E)M[0]=a[0]-M[0],M[1]=u[0]-M[1];else if(w){var C=+/w$/.test(w),P=+/^n/.test(w);g=[a[1-C]-M[0],u[1-P]-M[1]],M[0]=a[C],M[1]=u[P]}else i.event.altKey&&(f=M.slice());function O(){var e=i.mouse(m),t=!1;g&&(e[0]+=g[0],e[1]+=g[1]),E||(i.event.altKey?(f||(f=[(a[0]+a[1])/2,(u[0]+u[1])/2]),M[0]=a[+(e[0]<f[0])],M[1]=u[+(e[1]<f[1])]):f=null),_&&N(e,r,0)&&(h(x),t=!0),k&&N(e,o,1)&&(v(x),t=!0),t&&(d(x),b({type:"brush",mode:E?"move":"resize"}))}function N(n,r,o){var i,s,p=ma(r),d=p[0],h=p[1],v=M[o],g=o?u:a,m=g[1]-g[0];if(E&&(d-=v,h-=m+v),i=(o?c:l)?Math.max(d,Math.min(h,n[o])):n[o],E?s=(i+=v)+m:(f&&(v=Math.max(d,Math.min(h,2*f[o]-i))),v<i?(s=i,i=v):s=v),g[0]!=i||g[1]!=s)return o?t=null:e=null,g[0]=i,g[1]=s,!0}function A(){O(),x.style("pointer-events","all").selectAll(".resize").style("display",p.empty()?"none":null),i.select("body").style("cursor",null),T.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),S(),b({type:"brushend"})}x.style("pointer-events","none").selectAll(".resize").style("display",null),i.select("body").style("cursor",y.style("cursor")),b({type:"brushstart"}),O()}return p.event=function(r){r.each(function(){var r=n.of(this,arguments),o={x:a,y:u,i:e,j:t},l=this.__chart__||o;this.__chart__=o,xu?i.select(this).transition().each("start.brush",function(){e=l.i,t=l.j,a=l.x,u=l.y,r({type:"brushstart"})}).tween("brush:brush",function(){var n=ri(a,o.x),i=ri(u,o.y);return e=t=null,function(e){a=o.x=n(e),u=o.y=i(e),r({type:"brush",mode:"resize"})}}).each("end.brush",function(){e=o.i,t=o.j,r({type:"brush",mode:"resize"}),r({type:"brushend"})}):(r({type:"brushstart"}),r({type:"brush",mode:"resize"}),r({type:"brushend"}))})},p.x=function(e){return arguments.length?(f=Ru[!(r=e)<<1|!o],p):r},p.y=function(e){return arguments.length?(f=Ru[!r<<1|!(o=e)],p):o},p.clamp=function(e){return arguments.length?(r&&o?(l=!!e[0],c=!!e[1]):r?l=!!e:o&&(c=!!e),p):r&&o?[l,c]:r?l:o?c:null},p.extent=function(n){var i,l,c,s,f;return arguments.length?(r&&(i=n[0],l=n[1],o&&(i=i[0],l=l[0]),e=[i,l],r.invert&&(i=r(i),l=r(l)),l<i&&(f=i,i=l,l=f),i==a[0]&&l==a[1]||(a=[i,l])),o&&(c=n[0],s=n[1],r&&(c=c[1],s=s[1]),t=[c,s],o.invert&&(c=o(c),s=o(s)),s<c&&(f=c,c=s,s=f),c==u[0]&&s==u[1]||(u=[c,s])),p):(r&&(e?(i=e[0],l=e[1]):(i=a[0],l=a[1],r.invert&&(i=r.invert(i),l=r.invert(l)),l<i&&(f=i,i=l,l=f))),o&&(t?(c=t[0],s=t[1]):(c=u[0],s=u[1],o.invert&&(c=o.invert(c),s=o.invert(s)),s<c&&(f=c,c=s,s=f))),r&&o?[[i,c],[l,s]]:r?[i,l]:o&&[c,s])},p.clear=function(){return p.empty()||(a=[0,0],u=[0,0],e=t=null),p},p.empty=function(){return!!r&&a[0]==a[1]||!!o&&u[0]==u[1]},i.rebind(p,n,"on")};var Au={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ru=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],ju=Ut.format=hn.timeFormat,Lu=ju.utc,Du=Lu("%Y-%m-%dT%H:%M:%S.%LZ");function Iu(e){return e.toISOString()}function Uu(e,t,n){function r(t){return e(t)}function o(e,n){var r=(e[1]-e[0])/n,o=i.bisect(Fu,r);return o==Fu.length?[t.year,Sa(e.map(function(e){return e/31536e6}),n)[2]]:o?t[r/Fu[o-1]<Fu[o]/r?o-1:o]:[Bu,Sa(e,n)[2]]}return r.invert=function(t){return zu(e.invert(t))},r.domain=function(t){return arguments.length?(e.domain(t),r):e.domain().map(zu)},r.nice=function(e,t){var n=r.domain(),i=ga(n),a=null==e?o(i,10):"number"==typeof e&&o(i,e);function u(n){return!isNaN(n)&&!e.range(n,zu(+n+1),t).length}return a&&(e=a[0],t=a[1]),r.domain(ba(n,t>1?{floor:function(t){for(;u(t=e.floor(t));)t=zu(t-1);return t},ceil:function(t){for(;u(t=e.ceil(t));)t=zu(+t+1);return t}}:e))},r.ticks=function(e,t){var n=ga(r.domain()),i=null==e?o(n,10):"number"==typeof e?o(n,e):!e.range&&[{range:e},t];return i&&(e=i[0],t=i[1]),e.range(n[0],zu(+n[1]+1),t<1?1:t)},r.tickFormat=function(){return n},r.copy=function(){return Uu(e.copy(),t,n)},ka(r,e)}function zu(e){return new Date(e)}ju.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?Iu:Du,Iu.parse=function(e){var t=new Date(e);return isNaN(t)?null:t},Iu.toString=Du.toString,Ut.second=Ht(function(e){return new zt(1e3*Math.floor(e/1e3))},function(e,t){e.setTime(e.getTime()+1e3*Math.floor(t))},function(e){return e.getSeconds()}),Ut.seconds=Ut.second.range,Ut.seconds.utc=Ut.second.utc.range,Ut.minute=Ht(function(e){return new zt(6e4*Math.floor(e/6e4))},function(e,t){e.setTime(e.getTime()+6e4*Math.floor(t))},function(e){return e.getMinutes()}),Ut.minutes=Ut.minute.range,Ut.minutes.utc=Ut.minute.utc.range,Ut.hour=Ht(function(e){var t=e.getTimezoneOffset()/60;return new zt(36e5*(Math.floor(e/36e5-t)+t))},function(e,t){e.setTime(e.getTime()+36e5*Math.floor(t))},function(e){return e.getHours()}),Ut.hours=Ut.hour.range,Ut.hours.utc=Ut.hour.utc.range,Ut.month=Ht(function(e){return(e=Ut.day(e)).setDate(1),e},function(e,t){e.setMonth(e.getMonth()+t)},function(e){return e.getMonth()}),Ut.months=Ut.month.range,Ut.months.utc=Ut.month.utc.range;var Fu=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],qu=[[Ut.second,1],[Ut.second,5],[Ut.second,15],[Ut.second,30],[Ut.minute,1],[Ut.minute,5],[Ut.minute,15],[Ut.minute,30],[Ut.hour,1],[Ut.hour,3],[Ut.hour,6],[Ut.hour,12],[Ut.day,1],[Ut.day,2],[Ut.week,1],[Ut.month,1],[Ut.month,3],[Ut.year,1]],Hu=ju.multi([[".%L",function(e){return e.getMilliseconds()}],[":%S",function(e){return e.getSeconds()}],["%I:%M",function(e){return e.getMinutes()}],["%I %p",function(e){return e.getHours()}],["%a %d",function(e){return e.getDay()&&1!=e.getDate()}],["%b %d",function(e){return 1!=e.getDate()}],["%B",function(e){return e.getMonth()}],["%Y",Jn]]),Bu={range:function(e,t,n){return i.range(Math.ceil(e/n)*n,+t,n).map(zu)},floor:L,ceil:L};qu.year=Ut.year,Ut.scale=function(){return Uu(i.scale.linear(),qu,Hu)};var Vu=qu.map(function(e){return[e[0].utc,e[1]]}),Wu=Lu.multi([[".%L",function(e){return e.getUTCMilliseconds()}],[":%S",function(e){return e.getUTCSeconds()}],["%I:%M",function(e){return e.getUTCMinutes()}],["%I %p",function(e){return e.getUTCHours()}],["%a %d",function(e){return e.getUTCDay()&&1!=e.getUTCDate()}],["%b %d",function(e){return 1!=e.getUTCDate()}],["%B",function(e){return e.getUTCMonth()}],["%Y",Jn]]);function Gu(e){return JSON.parse(e.responseText)}function Qu(e){var t=l.createRange();return t.selectNode(l.body),t.createContextualFragment(e.responseText)}Vu.year=Ut.year.utc,Ut.scale.utc=function(){return Uu(i.scale.linear(),Vu,Wu)},i.text=wt(function(e){return e.responseText}),i.json=function(e,t){return _t(e,"application/json",Gu,t)},i.html=function(e,t){return _t(e,"text/html",Qu,t)},i.xml=wt(function(e){return e.responseXML}),this.d3=i,void 0===(o="function"==typeof(r=i)?r.call(t,n,t,e):r)||(e.exports=o)}()},function(e,t){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],t=0;t<this.length;t++){var n=this[t];n[2]?e.push("@media "+n[2]+"{"+n[1]+"}"):e.push(n[1])}return e.join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),u=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),l=null,c=0,s=[],f=n(24);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],t))}else{var u=[];for(a=0;a<r.parts.length;a++)u.push(y(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:u}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function h(e,t){var n=u(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),s.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=u(e.insertAt.before,n);n.insertBefore(t,o)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=s.indexOf(e);t>=0&&s.splice(t,1)}function g(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return m(t,e.attrs),h(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=l||(l=g(t)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,n,t),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(u=i[a.id]).refs--,r.push(u)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var u;if(0===(u=r[o]).refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete i[u.id]}}}};var b,x=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(26)},function(e,t,n){"use strict";(function(e,r){var o,i=n(17);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(6),n(35)(e))},function(e,t,n){"use strict";t.decode=t.parse=n(63),t.encode=t.stringify=n(64)},function(e,t,n){var r;!function(o,i,a){if(o){for(var u,l={8:"backspace",9:"tab",13:"enter",16:"shift",17:"ctrl",18:"alt",20:"capslock",27:"esc",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down",45:"ins",46:"del",91:"meta",93:"meta",224:"meta"},c={106:"*",107:"+",109:"-",110:".",111:"/",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},s={"~":"`","!":"1","@":"2","#":"3",$:"4","%":"5","^":"6","&":"7","*":"8","(":"9",")":"0",_:"-","+":"=",":":";",'"':"'","<":",",">":".","?":"/","|":"\\"},f={option:"alt",command:"meta",return:"enter",escape:"esc",plus:"+",mod:/Mac|iPod|iPhone|iPad/.test(navigator.platform)?"meta":"ctrl"},p=1;p<20;++p)l[111+p]="f"+p;for(p=0;p<=9;++p)l[p+96]=p.toString();y.prototype.bind=function(e,t,n){return e=e instanceof Array?e:[e],this._bindMultiple.call(this,e,t,n),this},y.prototype.unbind=function(e,t){return this.bind.call(this,e,function(){},t)},y.prototype.trigger=function(e,t){return this._directMap[e+":"+t]&&this._directMap[e+":"+t]({},e),this},y.prototype.reset=function(){return this._callbacks={},this._directMap={},this},y.prototype.stopCallback=function(e,t){return!((" "+t.className+" ").indexOf(" mousetrap ")>-1)&&(!function e(t,n){return null!==t&&t!==i&&(t===n||e(t.parentNode,n))}(t,this.target)&&("INPUT"==t.tagName||"SELECT"==t.tagName||"TEXTAREA"==t.tagName||t.isContentEditable))},y.prototype.handleKey=function(){return this._handleKey.apply(this,arguments)},y.addKeycodes=function(e){for(var t in e)e.hasOwnProperty(t)&&(l[t]=e[t]);u=null},y.init=function(){var e=y(i);for(var t in e)"_"!==t.charAt(0)&&(y[t]=function(t){return function(){return e[t].apply(e,arguments)}}(t))},y.init(),o.Mousetrap=y,e.exports&&(e.exports=y),void 0===(r=function(){return y}.call(t,n,t,e))||(e.exports=r)}function d(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)}function h(e){if("keypress"==e.type){var t=String.fromCharCode(e.which);return e.shiftKey||(t=t.toLowerCase()),t}return l[e.which]?l[e.which]:c[e.which]?c[e.which]:String.fromCharCode(e.which).toLowerCase()}function v(e){return"shift"==e||"ctrl"==e||"alt"==e||"meta"==e}function g(e,t,n){return n||(n=function(){if(!u)for(var e in u={},l)e>95&&e<112||l.hasOwnProperty(e)&&(u[l[e]]=e);return u}()[e]?"keydown":"keypress"),"keypress"==n&&t.length&&(n="keydown"),n}function m(e,t){var n,r,o,i=[];for(n=function(e){return"+"===e?["+"]:(e=e.replace(/\+{2}/g,"+plus")).split("+")}(e),o=0;o<n.length;++o)r=n[o],f[r]&&(r=f[r]),t&&"keypress"!=t&&s[r]&&(r=s[r],i.push("shift")),v(r)&&i.push(r);return{key:r,modifiers:i,action:t=g(r,i,t)}}function y(e){var t=this;if(e=e||i,!(t instanceof y))return new y(e);t.target=e,t._callbacks={},t._directMap={};var n,r={},o=!1,a=!1,u=!1;function l(e){e=e||{};var t,n=!1;for(t in r)e[t]?n=!0:r[t]=0;n||(u=!1)}function c(e,n,o,i,a,u){var l,c,s,f,p=[],d=o.type;if(!t._callbacks[e])return[];for("keyup"==d&&v(e)&&(n=[e]),l=0;l<t._callbacks[e].length;++l)if(c=t._callbacks[e][l],(i||!c.seq||r[c.seq]==c.level)&&d==c.action&&("keypress"==d&&!o.metaKey&&!o.ctrlKey||(s=n,f=c.modifiers,s.sort().join(",")===f.sort().join(",")))){var h=!i&&c.combo==a,g=i&&c.seq==i&&c.level==u;(h||g)&&t._callbacks[e].splice(l,1),p.push(c)}return p}function s(e,n,r,o){t.stopCallback(n,n.target||n.srcElement,r,o)||!1===e(n,r)&&(function(e){e.preventDefault?e.preventDefault():e.returnValue=!1}(n),function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}(n))}function f(e){"number"!=typeof e.which&&(e.which=e.keyCode);var n=h(e);n&&("keyup"!=e.type||o!==n?t.handleKey(n,function(e){var t=[];return e.shiftKey&&t.push("shift"),e.altKey&&t.push("alt"),e.ctrlKey&&t.push("ctrl"),e.metaKey&&t.push("meta"),t}(e),e):o=!1)}function p(e,t,i,a){function c(t){return function(){u=t,++r[e],clearTimeout(n),n=setTimeout(l,1e3)}}function f(t){s(i,t,e),"keyup"!==a&&(o=h(t)),setTimeout(l,10)}r[e]=0;for(var p=0;p<t.length;++p){var d=p+1===t.length?f:c(a||m(t[p+1]).action);g(t[p],d,a,e,p)}}function g(e,n,r,o,i){t._directMap[e+":"+r]=n;var a,u=(e=e.replace(/\s+/g," ")).split(" ");u.length>1?p(e,u,n,r):(a=m(e,r),t._callbacks[a.key]=t._callbacks[a.key]||[],c(a.key,a.modifiers,{type:a.action},o,e,i),t._callbacks[a.key][o?"unshift":"push"]({callback:n,modifiers:a.modifiers,action:a.action,seq:o,level:i,combo:e}))}t._handleKey=function(e,t,n){var r,o=c(e,t,n),i={},f=0,p=!1;for(r=0;r<o.length;++r)o[r].seq&&(f=Math.max(f,o[r].level));for(r=0;r<o.length;++r)if(o[r].seq){if(o[r].level!=f)continue;p=!0,i[o[r].seq]=1,s(o[r].callback,n,o[r].combo,o[r].seq)}else p||s(o[r].callback,n,o[r].combo);var d="keypress"==n.type&&a;n.type!=u||v(e)||d||l(i),a=p&&"keydown"==n.type},t._bindMultiple=function(e,t,n){for(var r=0;r<e.length;++r)g(e[r],t,n)},d(e,"keypress",f),d(e,"keydown",f),d(e,"keyup",f)}}("undefined"!=typeof window?window:null,"undefined"!=typeof window?document:null)},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var s=0;s<a.length;s++)i.call(n,a[s])&&(u[a[s]]=n[a[s]])}}return u}},function(e,t,n){e.exports=n(30)()},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(12),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default.shape({subscribe:i.default.func.isRequired,dispatch:i.default.func.isRequired,getState:i.default.func.isRequired})},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e);try{throw new Error(e)}catch(e){}}},function(e,t,n){var r=n(38).Symbol;e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={GLOBAL:{HIDE:"__react_tooltip_hide_event",REBUILD:"__react_tooltip_rebuild_event",SHOW:"__react_tooltip_show_event"}}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(6))},function(e,t,n){"use strict";e.exports=function(e){var t=e.dispatch,n=e.getState;return function(e){return function(r){return"function"==typeof r?r(t,n):e(r)}}}},function(e,t,n){"use strict";var r,o,i,a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=k(n(0)),c=k(n(48)),s=k(n(7)),f=k(n(51)),p=k(n(52)),d=k(n(53)),h=k(n(54)),v=k(n(55)),g=k(n(56)),m=k(n(57)),y=k(n(58)),b=k(n(59)),x=n(60),w=k(n(61)),_=k(n(62));function k(e){return e&&e.__esModule?e:{default:e}}var E=(0,p.default)(r=(0,d.default)(r=(0,h.default)(r=(0,v.default)(r=(0,g.default)(r=(0,m.default)((i=o=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={place:e.place||"top",desiredPlace:e.place||"top",type:"dark",effect:"float",show:!1,border:!1,offset:{},extraClass:"",html:!1,delayHide:0,delayShow:0,event:e.event||null,eventOff:e.eventOff||null,currentEvent:null,currentTarget:null,ariaProps:(0,x.parseAria)(e),isEmptyTip:!1,disable:!1,originTooltip:null,isMultiline:!1},n.bind(["showTooltip","updateTooltip","hideTooltip","getTooltipContent","globalRebuild","globalShow","globalHide","onWindowResize","mouseOnToolTip"]),n.mount=!0,n.delayShowLoop=null,n.delayHideLoop=null,n.delayReshow=null,n.intervalUpdateContent=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),u(t,[{key:"bind",value:function(e){var t=this;e.forEach(function(e){t[e]=t[e].bind(t)})}},{key:"componentDidMount",value:function(){var e=this.props,t=e.insecure,n=e.resizeHide;t&&this.setStyleHeader(),this.bindListener(),this.bindWindowEvents(n)}},{key:"componentWillReceiveProps",value:function(e){var t=this.state.ariaProps,n=(0,x.parseAria)(e);Object.keys(n).some(function(e){return n[e]!==t[e]})&&this.setState({ariaProps:n})}},{key:"componentWillUnmount",value:function(){this.mount=!1,this.clearTimer(),this.unbindListener(),this.removeScrollListener(),this.unbindWindowEvents()}},{key:"mouseOnToolTip",value:function(){return!(!this.state.show||!this.tooltipRef)&&(this.tooltipRef.matches||(this.tooltipRef.msMatchesSelector?this.tooltipRef.matches=this.tooltipRef.msMatchesSelector:this.tooltipRef.matches=this.tooltipRef.mozMatchesSelector),this.tooltipRef.matches(":hover"))}},{key:"getTargetArray",value:function(e){var t=void 0;if(e){var n=e.replace(/\\/g,"\\\\").replace(/"/g,'\\"');t=document.querySelectorAll('[data-tip][data-for="'+n+'"]')}else t=document.querySelectorAll("[data-tip]:not([data-for])");return(0,w.default)(t)}},{key:"bindListener",value:function(){var e=this,t=this.props,n=t.id,r=t.globalEventOff,o=t.isCapture;this.getTargetArray(n).forEach(function(t){var n=e.isCapture(t),r=e.getEffect(t);null===t.getAttribute("currentItem")&&t.setAttribute("currentItem","false"),e.unbindBasicListener(t),e.isCustomEvent(t)?e.customBindListener(t):(t.addEventListener("mouseenter",e.showTooltip,n),"float"===r&&t.addEventListener("mousemove",e.updateTooltip,n),t.addEventListener("mouseleave",e.hideTooltip,n))}),r&&(window.removeEventListener(r,this.hideTooltip),window.addEventListener(r,this.hideTooltip,o)),this.bindRemovalTracker()}},{key:"unbindListener",value:function(){var e=this,t=this.props,n=t.id,r=t.globalEventOff;this.getTargetArray(n).forEach(function(t){e.unbindBasicListener(t),e.isCustomEvent(t)&&e.customUnbindListener(t)}),r&&window.removeEventListener(r,this.hideTooltip),this.unbindRemovalTracker()}},{key:"unbindBasicListener",value:function(e){var t=this.isCapture(e);e.removeEventListener("mouseenter",this.showTooltip,t),e.removeEventListener("mousemove",this.updateTooltip,t),e.removeEventListener("mouseleave",this.hideTooltip,t)}},{key:"getTooltipContent",value:function(){var e=this.props,t=e.getContent,n=e.children,r=void 0;return t&&(r=Array.isArray(t)?t[0]&&t[0](this.state.originTooltip):t(this.state.originTooltip)),(0,b.default)(this.state.originTooltip,n,r,this.state.isMultiline)}},{key:"isEmptyTip",value:function(e){return"string"==typeof e&&""===e||null===e}},{key:"showTooltip",value:function(e,t){if(t&&!this.getTargetArray(this.props.id).some(function(t){return t===e.currentTarget}))return;var n=this.props,r=n.multiline,o=n.getContent,i=e.currentTarget.getAttribute("data-tip"),a=e.currentTarget.getAttribute("data-multiline")||r||!1,u=e instanceof window.FocusEvent||t,l=!0;e.currentTarget.getAttribute("data-scroll-hide")?l="true"===e.currentTarget.getAttribute("data-scroll-hide"):null!=this.props.scrollHide&&(l=this.props.scrollHide);var c=e.currentTarget.getAttribute("data-place")||this.props.place||"top",f=u?"solid":this.getEffect(e.currentTarget),p=e.currentTarget.getAttribute("data-offset")||this.props.offset||{},d=(0,y.default)(e,e.currentTarget,s.default.findDOMNode(this),c,c,f,p),h=d.isNewState?d.newState.place:c;this.clearTimer();var v=e.currentTarget,g=this.state.show?v.getAttribute("data-delay-update")||this.props.delayUpdate:0,m=this,x=function(){m.setState({originTooltip:i,isMultiline:a,desiredPlace:c,place:h,type:v.getAttribute("data-type")||m.props.type||"dark",effect:f,offset:p,html:v.getAttribute("data-html")?"true"===v.getAttribute("data-html"):m.props.html||!1,delayShow:v.getAttribute("data-delay-show")||m.props.delayShow||0,delayHide:v.getAttribute("data-delay-hide")||m.props.delayHide||0,delayUpdate:v.getAttribute("data-delay-update")||m.props.delayUpdate||0,border:v.getAttribute("data-border")?"true"===v.getAttribute("data-border"):m.props.border||!1,extraClass:v.getAttribute("data-class")||m.props.class||m.props.className||"",disable:v.getAttribute("data-tip-disable")?"true"===v.getAttribute("data-tip-disable"):m.props.disable||!1,currentTarget:v},function(){l&&m.addScrollListener(m.state.currentTarget),m.updateTooltip(e),o&&Array.isArray(o)&&(m.intervalUpdateContent=setInterval(function(){if(m.mount){var e=m.props.getContent,t=(0,b.default)(i,"",e[0](),a),n=m.isEmptyTip(t);m.setState({isEmptyTip:n}),m.updatePosition()}},o[1]))})};g?this.delayReshow=setTimeout(x,g):x()}},{key:"updateTooltip",value:function(e){var t=this,n=this.state,r=n.delayShow,o=n.disable,i=this.props.afterShow,a=this.getTooltipContent(),u=parseInt(r,10),l=e.currentTarget||e.target;if(!this.mouseOnToolTip()&&!this.isEmptyTip(a)&&!o){var c=function(){if(Array.isArray(a)&&a.length>0||a){var n=!t.state.show;t.setState({currentEvent:e,currentTarget:l,show:!0},function(){t.updatePosition(),n&&i&&i(e)})}};clearTimeout(this.delayShowLoop),r?this.delayShowLoop=setTimeout(c,u):c()}}},{key:"listenForTooltipExit",value:function(){this.state.show&&this.tooltipRef&&this.tooltipRef.addEventListener("mouseleave",this.hideTooltip)}},{key:"removeListenerForTooltipExit",value:function(){this.state.show&&this.tooltipRef&&this.tooltipRef.removeEventListener("mouseleave",this.hideTooltip)}},{key:"hideTooltip",value:function(e,t){var n=this,r=this.state,o=r.delayHide,i=r.disable,a=this.props.afterHide,u=this.getTooltipContent();if(this.mount&&!this.isEmptyTip(u)&&!i){if(t)if(!this.getTargetArray(this.props.id).some(function(t){return t===e.currentTarget})||!this.state.show)return;var l=function(){var t=n.state.show;n.mouseOnToolTip()?n.listenForTooltipExit():(n.removeListenerForTooltipExit(),n.setState({show:!1},function(){n.removeScrollListener(),t&&a&&a(e)}))};this.clearTimer(),o?this.delayHideLoop=setTimeout(l,parseInt(o,10)):l()}}},{key:"addScrollListener",value:function(e){var t=this.isCapture(e);window.addEventListener("scroll",this.hideTooltip,t)}},{key:"removeScrollListener",value:function(){window.removeEventListener("scroll",this.hideTooltip)}},{key:"updatePosition",value:function(){var e=this,t=this.state,n=t.currentEvent,r=t.currentTarget,o=t.place,i=t.desiredPlace,a=t.effect,u=t.offset,l=s.default.findDOMNode(this),c=(0,y.default)(n,r,l,o,i,a,u);if(c.isNewState)return this.setState(c.newState,function(){e.updatePosition()});l.style.left=c.position.left+"px",l.style.top=c.position.top+"px"}},{key:"setStyleHeader",value:function(){var e=document.getElementsByTagName("head")[0];if(!e.querySelector('style[id="react-tooltip"]')){var t=document.createElement("style");t.id="react-tooltip",t.innerHTML=_.default,n.nc&&t.setAttribute("nonce",n.nc),e.insertBefore(t,e.firstChild)}}},{key:"clearTimer",value:function(){clearTimeout(this.delayShowLoop),clearTimeout(this.delayHideLoop),clearTimeout(this.delayReshow),clearInterval(this.intervalUpdateContent)}},{key:"render",value:function(){var e=this,n=this.state,r=n.extraClass,o=n.html,i=n.ariaProps,u=n.disable,c=this.getTooltipContent(),s=this.isEmptyTip(c),p=(0,f.default)("__react_component_tooltip",{show:this.state.show&&!u&&!s},{border:this.state.border},{"place-top":"top"===this.state.place},{"place-bottom":"bottom"===this.state.place},{"place-left":"left"===this.state.place},{"place-right":"right"===this.state.place},{"type-dark":"dark"===this.state.type},{"type-success":"success"===this.state.type},{"type-warning":"warning"===this.state.type},{"type-error":"error"===this.state.type},{"type-info":"info"===this.state.type},{"type-light":"light"===this.state.type},{allow_hover:this.props.delayUpdate},{allow_click:this.props.clickable}),d=this.props.wrapper;return t.supportedWrappers.indexOf(d)<0&&(d=t.defaultProps.wrapper),o?l.default.createElement(d,a({className:p+" "+r,id:this.props.id,ref:function(t){return e.tooltipRef=t}},i,{"data-id":"tooltip",dangerouslySetInnerHTML:{__html:c}})):l.default.createElement(d,a({className:p+" "+r,id:this.props.id},i,{ref:function(t){return e.tooltipRef=t},"data-id":"tooltip"}),c)}}]),t}(),o.propTypes={children:c.default.any,place:c.default.string,type:c.default.string,effect:c.default.string,offset:c.default.object,multiline:c.default.bool,border:c.default.bool,insecure:c.default.bool,class:c.default.string,className:c.default.string,id:c.default.string,html:c.default.bool,delayHide:c.default.number,delayUpdate:c.default.number,delayShow:c.default.number,event:c.default.string,eventOff:c.default.string,watchWindow:c.default.bool,isCapture:c.default.bool,globalEventOff:c.default.string,getContent:c.default.any,afterShow:c.default.func,afterHide:c.default.func,disable:c.default.bool,scrollHide:c.default.bool,resizeHide:c.default.bool,wrapper:c.default.string,clickable:c.default.bool},o.defaultProps={insecure:!0,resizeHide:!0,wrapper:"div",clickable:!1},o.supportedWrappers=["div","span"],o.displayName="ReactTooltip",r=i))||r)||r)||r)||r)||r)||r;e.exports=E},function(e,t,n){e.exports=n(71)},function(e,t,n){var r=n(23);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)()).push([e.i,"body {\n  margin: 0;\n  padding: 0;\n  font-family: Roboto, sans-serif; }\n\n#credits {\n  float: left;\n  clear: left;\n  margin-left: 10px;\n  padding: 20px;\n  font-size: 12px;\n  color: #444444; }\n",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(11),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,v=o?Symbol.for("react.memo"):60115,g=o?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},x={};function w(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||b}function _(){}function k(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=w.prototype;var E=k.prototype=new _;E.constructor=k,r(E,w.prototype),E.isPureReactComponent=!0;var S={current:null},M={current:null},T=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)T.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:M.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var N=/\/+/g,A=[];function R(e,t,n,r){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function j(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function L(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case a:l=!0}}if(l)return r(o,t,""===n?"."+D(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+D(u=t[c],c);l+=e(u,s,r,o)}else if(s=null===t||"object"!=typeof t?null:"function"==typeof(s=m&&t[m]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+D(u,c++),r,o);else"object"===u&&y("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function D(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function I(e,t){e.func.call(e.context,t,e.count++)}function U(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?z(e,r,n,function(e){return e}):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(N,"$&/")+"/")+n)),r.push(e))}function z(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(N,"$&/")+"/"),L(e,U,t=R(t,i,r,o)),j(t)}function F(){var e=S.current;return null===e&&y("321"),e}var q={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return z(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;L(e,I,t=R(null,null,t,n)),j(t)},count:function(e){return L(e,function(){return null},null)},toArray:function(e){var t=[];return z(e,t,null,function(e){return e}),t},only:function(e){return O(e)||y("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:g,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:v,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return F().useCallback(e,t)},useContext:function(e,t){return F().useContext(e,t)},useEffect:function(e,t){return F().useEffect(e,t)},useImperativeHandle:function(e,t,n){return F().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return F().useLayoutEffect(e,t)},useMemo:function(e,t){return F().useMemo(e,t)},useReducer:function(e,t,n){return F().useReducer(e,t,n)},useRef:function(e){return F().useRef(e)},useState:function(e){return F().useState(e)},Fragment:u,StrictMode:l,Suspense:h,createElement:P,cloneElement:function(e,t,n){null==e&&y("267",e);var o=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=M.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)T.call(t,o)&&!C.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:i,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=P.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.8.6",unstable_ConcurrentMode:p,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:S,ReactCurrentOwner:M,assign:r}},H={default:q},B=H&&q||H;e.exports=B.default||B},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(11),i=n(27);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var u=!1,l=null,c=!1,s=null,f={onError:function(e){u=!0,l=e}};function p(e,t,n,r,o,i,a,c,s){u=!1,l=null,function(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,h={};function v(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||a("96",e),!m[n])for(var r in t.extractEvents||a("97",e),m[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,l=r;y.hasOwnProperty(l)&&a("99",l),y[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&g(c[o],u,l);o=!0}else i.registrationName?(g(i.registrationName,u,l),o=!0):o=!1;o||a("98",r,e)}}}function g(e,t,n){b[e]&&a("100",e),b[e]=t,x[e]=t.eventTypes[n].dependencies}var m=[],y={},b={},x={},w=null,_=null,k=null;function E(e,t,n){var r=e.type||"unknown-event";e.currentTarget=k(n),function(e,t,n,r,o,i,f,d,h){if(p.apply(this,arguments),u){if(u){var v=l;u=!1,l=null}else a("198"),v=void 0;c||(c=!0,s=v)}}(r,t,void 0,e),e.currentTarget=null}function S(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function M(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var T=null;function C(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)E(e,t[r],n[r]);else t&&E(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var P={injectEventPluginOrder:function(e){d&&a("101"),d=Array.prototype.slice.call(e),v()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&v()}};function O(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function N(e){if(null!==e&&(T=S(T,e)),e=T,T=null,e&&(M(e,C),T&&a("95"),c))throw e=s,c=!1,s=null,e}var A=Math.random().toString(36).slice(2),R="__reactInternalInstance$"+A,j="__reactEventHandlers$"+A;function L(e){if(e[R])return e[R];for(;!e[R];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[R]).tag||6===e.tag?e:null}function D(e){return!(e=e[R])||5!==e.tag&&6!==e.tag?null:e}function I(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function U(e){return e[j]||null}function z(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function F(e,t,n){(t=O(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function q(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=z(t);for(t=n.length;0<t--;)F(n[t],"captured",e);for(t=0;t<n.length;t++)F(n[t],"bubbled",e)}}function H(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=O(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function B(e){e&&e.dispatchConfig.registrationName&&H(e._targetInst,null,e)}function V(e){M(e,q)}var W=!("undefined"==typeof window||!window.document||!window.document.createElement);function G(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Q={animationend:G("Animation","AnimationEnd"),animationiteration:G("Animation","AnimationIteration"),animationstart:G("Animation","AnimationStart"),transitionend:G("Transition","TransitionEnd")},$={},Y={};function K(e){if($[e])return $[e];if(!Q[e])return e;var t,n=Q[e];for(t in n)if(n.hasOwnProperty(t)&&t in Y)return $[e]=n[t];return e}W&&(Y=document.createElement("div").style,"AnimationEvent"in window||(delete Q.animationend.animation,delete Q.animationiteration.animation,delete Q.animationstart.animation),"TransitionEvent"in window||delete Q.transitionend.transition);var X=K("animationend"),Z=K("animationiteration"),J=K("animationstart"),ee=K("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function ue(){return!1}function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:ue,this.isPropagationStopped=ue,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function se(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ce,e.release=se}o(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:ue,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ue,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var pe=le.extend({data:null}),de=le.extend({data:null}),he=[9,13,27,32],ve=W&&"CompositionEvent"in window,ge=null;W&&"documentMode"in document&&(ge=document.documentMode);var me=W&&"TextEvent"in window&&!ge,ye=W&&(!ve||ge&&8<ge&&11>=ge),be=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},we=!1;function _e(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ke(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ee=!1;var Se={eventTypes:xe,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ve)e:{switch(e){case"compositionstart":o=xe.compositionStart;break e;case"compositionend":o=xe.compositionEnd;break e;case"compositionupdate":o=xe.compositionUpdate;break e}o=void 0}else Ee?_e(e,n)&&(o=xe.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=xe.compositionStart);return o?(ye&&"ko"!==n.locale&&(Ee||o!==xe.compositionStart?o===xe.compositionEnd&&Ee&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,Ee=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=ke(n))&&(o.data=i),V(o),i=o):i=null,(e=me?function(e,t){switch(e){case"compositionend":return ke(t);case"keypress":return 32!==t.which?null:(we=!0,be);case"textInput":return(e=t.data)===be&&we?null:e;default:return null}}(e,n):function(e,t){if(Ee)return"compositionend"===e||!ve&&_e(e,t)?(e=ie(),oe=re=ne=null,Ee=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ye&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=de.getPooled(xe.beforeInput,t,n,r)).data=e,V(t)):t=null,null===i?t:null===t?i:[i,t]}},Me=null,Te=null,Ce=null;function Pe(e){if(e=_(e)){"function"!=typeof Me&&a("280");var t=w(e.stateNode);Me(e.stateNode,e.type,t)}}function Oe(e){Te?Ce?Ce.push(e):Ce=[e]:Te=e}function Ne(){if(Te){var e=Te,t=Ce;if(Ce=Te=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Ae(e,t){return e(t)}function Re(e,t,n){return e(t,n)}function je(){}var Le=!1;function De(e,t){if(Le)return e(t);Le=!0;try{return Ae(e,t)}finally{Le=!1,(null!==Te||null!==Ce)&&(je(),Ne())}}var Ie={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ue(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ie[e.type]:"textarea"===t}function ze(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Fe(e){if(!W)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function qe(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function He(e){e._valueTracker||(e._valueTracker=function(e){var t=qe(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=qe(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ve=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Ve.hasOwnProperty("ReactCurrentDispatcher")||(Ve.ReactCurrentDispatcher={current:null});var We=/^(.*)[\\\/]/,Ge="function"==typeof Symbol&&Symbol.for,Qe=Ge?Symbol.for("react.element"):60103,$e=Ge?Symbol.for("react.portal"):60106,Ye=Ge?Symbol.for("react.fragment"):60107,Ke=Ge?Symbol.for("react.strict_mode"):60108,Xe=Ge?Symbol.for("react.profiler"):60114,Ze=Ge?Symbol.for("react.provider"):60109,Je=Ge?Symbol.for("react.context"):60110,et=Ge?Symbol.for("react.concurrent_mode"):60111,tt=Ge?Symbol.for("react.forward_ref"):60112,nt=Ge?Symbol.for("react.suspense"):60113,rt=Ge?Symbol.for("react.memo"):60115,ot=Ge?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function ut(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ye:return"Fragment";case $e:return"Portal";case Xe:return"Profiler";case Ke:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Je:return"Context.Consumer";case Ze:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return ut(e.type);case ot:if(e=1===e._status?e._result:null)return ut(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ut(e.type);n=null,r&&(n=ut(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(We,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,st=Object.prototype.hasOwnProperty,ft={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var vt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function mt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!st.call(pt,e)||!st.call(ft,e)&&(ct.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function yt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=yt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&mt(e,"checked",t,!1)}function _t(e,t){wt(e,t);var n=yt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Et(e,t.type,n):t.hasOwnProperty("defaultValue")&&Et(e,t.type,yt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function kt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Et(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(vt,gt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(vt,gt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(vt,gt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){ht[e]=new dt(e,1,!1,e.toLowerCase(),null)});var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Mt(e,t,n){return(e=le.getPooled(St.change,e,t,n)).type="change",Oe(n),V(e),e}var Tt=null,Ct=null;function Pt(e){N(e)}function Ot(e){if(Be(I(e)))return e}function Nt(e,t){if("change"===e)return t}var At=!1;function Rt(){Tt&&(Tt.detachEvent("onpropertychange",jt),Ct=Tt=null)}function jt(e){"value"===e.propertyName&&Ot(Ct)&&De(Pt,e=Mt(Ct,e,ze(e)))}function Lt(e,t,n){"focus"===e?(Rt(),Ct=n,(Tt=t).attachEvent("onpropertychange",jt)):"blur"===e&&Rt()}function Dt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Ot(Ct)}function It(e,t){if("click"===e)return Ot(t)}function Ut(e,t){if("input"===e||"change"===e)return Ot(t)}W&&(At=Fe("input")&&(!document.documentMode||9<document.documentMode));var zt={eventTypes:St,_isInputEventSupported:At,extractEvents:function(e,t,n,r){var o=t?I(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Nt:Ue(o)?At?i=Ut:(i=Dt,a=Lt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=It),i&&(i=i(e,t)))return Mt(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Et(o,"number",o.value)}},Ft=le.extend({view:null,detail:null}),qt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=qt[e])&&!!t[e]}function Bt(){return Ht}var Vt=0,Wt=0,Gt=!1,Qt=!1,$t=Ft.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Vt;return Vt=e.screenX,Gt?"mousemove"===e.type?e.screenX-t:0:(Gt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Wt;return Wt=e.screenY,Qt?"mousemove"===e.type?e.screenY-t:0:(Qt=!0,0)}}),Yt=$t.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Kt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xt={eventTypes:Kt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?L(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=$t,u=Kt.mouseLeave,l=Kt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Yt,u=Kt.pointerLeave,l=Kt.pointerEnter,c="pointer");var s=null==i?o:I(i);if(o=null==t?o:I(t),(e=a.getPooled(u,i,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,i&&r)e:{for(o=r,c=0,a=t=i;a;a=z(a))c++;for(a=0,l=o;l;l=z(l))a++;for(;0<c-a;)t=z(t),c--;for(;0<a-c;)o=z(o),a--;for(;c--;){if(t===o||t===o.alternate)break e;t=z(t),o=z(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=z(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=z(r);for(r=0;r<t.length;r++)H(t[r],"bubbled",e);for(r=i.length;0<r--;)H(i[r],"captured",n);return[e,n]}};function Zt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Jt=Object.prototype.hasOwnProperty;function en(e,t){if(Zt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Jt.call(t,n[r])||!Zt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var u=o.child;u;){if(u===n)return nn(o),e;if(u===r)return nn(o),t;u=u.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{u=!1;for(var l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}u||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),un=Ft.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=Ft.extend({key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?sn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=$t.extend({dataTransfer:null}),dn=Ft.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vn=$t.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),gn=[["abort","abort"],[X,"animationEnd"],[Z,"animationIteration"],[J,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],mn={},yn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},mn[e]=t,yn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),gn.forEach(function(e){bn(e,!1)});var xn={eventTypes:mn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=yn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=yn[e];if(!o)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=un;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=$t;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=dn;break;case X:case Z:case J:e=on;break;case ee:e=hn;break;case"scroll":e=Ft;break;case"wheel":e=vn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Yt;break;default:e=le}return V(t=e.getPooled(o,t,n,r)),t}},wn=xn.isInteractiveTopLevelEventType,_n=[];function kn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=L(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ze(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<m.length;u++){var l=m[u];l&&(l=l.extractEvents(r,t,i,o))&&(a=S(a,l))}N(a)}}var En=!0;function Sn(e,t){if(!t)return null;var n=(wn(e)?Tn:Cn).bind(null,e);t.addEventListener(e,n,!1)}function Mn(e,t){if(!t)return null;var n=(wn(e)?Tn:Cn).bind(null,e);t.addEventListener(e,n,!0)}function Tn(e,t){Re(Cn,e,t)}function Cn(e,t){if(En){var n=ze(t);if(null===(n=L(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),_n.length){var r=_n.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{De(kn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>_n.length&&_n.push(e)}}}var Pn={},On=0,Nn="_reactListenersID"+(""+Math.random()).slice(2);function An(e){return Object.prototype.hasOwnProperty.call(e,Nn)||(e[Nn]=On++,Pn[e[Nn]]={}),Pn[e[Nn]]}function Rn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function jn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ln(e,t){var n,r=jn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=jn(r)}}function Dn(){for(var e=window,t=Rn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Rn((e=t.contentWindow).document)}return t}function In(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Un(e){var t=Dn(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&In(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=Ln(n,i);var a=Ln(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var zn=W&&"documentMode"in document&&11>=document.documentMode,Fn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},qn=null,Hn=null,Bn=null,Vn=!1;function Wn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vn||null==qn||qn!==Rn(n)?null:("selectionStart"in(n=qn)&&In(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Bn&&en(Bn,n)?null:(Bn=n,(e=le.getPooled(Fn.select,Hn,e,t)).type="select",e.target=qn,V(e),e))}var Gn={eventTypes:Fn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=An(i),o=x.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?I(t):window,e){case"focus":(Ue(i)||"true"===i.contentEditable)&&(qn=i,Hn=t,Bn=null);break;case"blur":Bn=Hn=qn=null;break;case"mousedown":Vn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vn=!1,Wn(n,r);case"selectionchange":if(zn)break;case"keydown":case"keyup":return Wn(n,r)}return null}};function Qn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function $n(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+yt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Yn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Kn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:yt(n)}}function Xn(e,t){var n=yt(t.value),r=yt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Zn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}P.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=U,_=D,k=I,P.injectEventPluginsByName({SimpleEventPlugin:xn,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:zt,SelectEventPlugin:Gn,BeforeInputEventPlugin:Se});var Jn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr,rr=void 0,or=(nr=function(e,t){if(e.namespaceURI!==Jn.svg||"innerHTML"in e)e.innerHTML=t;else{for((rr=rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,t)})}:nr);function ir(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ar={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ur=["Webkit","ms","Moz","O"];function lr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ar.hasOwnProperty(e)&&ar[e]?(""+t).trim():t+"px"}function cr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=lr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ar).forEach(function(e){ur.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ar[t]=ar[e]})});var sr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function fr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function pr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function dr(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=x[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Mn("scroll",e);break;case"focus":case"blur":Mn("focus",e),Mn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":Fe(o)&&Mn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&Sn(o,e)}n[o]=!0}}}function hr(){}var vr=null,gr=null;function mr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var br="function"==typeof setTimeout?setTimeout:void 0,xr="function"==typeof clearTimeout?clearTimeout:void 0,wr=i.unstable_scheduleCallback,_r=i.unstable_cancelCallback;function kr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Er(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Sr=[],Mr=-1;function Tr(e){0>Mr||(e.current=Sr[Mr],Sr[Mr]=null,Mr--)}function Cr(e,t){Sr[++Mr]=e.current,e.current=t}var Pr={},Or={current:Pr},Nr={current:!1},Ar=Pr;function Rr(e,t){var n=e.type.contextTypes;if(!n)return Pr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function jr(e){return null!=(e=e.childContextTypes)}function Lr(e){Tr(Nr),Tr(Or)}function Dr(e){Tr(Nr),Tr(Or)}function Ir(e,t,n){Or.current!==Pr&&a("168"),Cr(Or,t),Cr(Nr,n)}function Ur(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",ut(t)||"Unknown",i);return o({},n,r)}function zr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Pr,Ar=Or.current,Cr(Or,t),Cr(Nr,Nr.current),!0}function Fr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Ur(e,t,Ar),r.__reactInternalMemoizedMergedChildContext=t,Tr(Nr),Tr(Or),Cr(Or,t)):Tr(Nr),Cr(Nr,n)}var qr=null,Hr=null;function Br(e){return function(t){try{return e(t)}catch(e){}}}function Vr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Wr(e,t,n,r){return new Vr(e,t,n,r)}function Gr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Qr(e,t){var n=e.alternate;return null===n?((n=Wr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function $r(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Gr(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Ye:return Yr(n.children,o,i,t);case et:return Kr(n,3|o,i,t);case Ke:return Kr(n,2|o,i,t);case Xe:return(e=Wr(12,n,t,4|o)).elementType=Xe,e.type=Xe,e.expirationTime=i,e;case nt:return(e=Wr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Ze:u=10;break e;case Je:u=9;break e;case tt:u=11;break e;case rt:u=14;break e;case ot:u=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=Wr(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Yr(e,t,n,r){return(e=Wr(7,e,r,t)).expirationTime=n,e}function Kr(e,t,n,r){return e=Wr(8,e,r,t),t=0==(1&t)?Ke:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Xr(e,t,n){return(e=Wr(6,e,null,t)).expirationTime=n,e}function Zr(e,t,n){return(t=Wr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Jr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),no(t,e)}function eo(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),no(t,e)}function to(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function no(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function ro(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var oo=(new r.Component).refs;function io(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var ao={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=_u(),o=Ki(r=Ya(r,e));o.payload=t,null!=n&&(o.callback=n),Ba(),Zi(e,o),Za(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=_u(),o=Ki(r=Ya(r,e));o.tag=Vi,o.payload=t,null!=n&&(o.callback=n),Ba(),Zi(e,o),Za(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=_u(),r=Ki(n=Ya(n,e));r.tag=Wi,null!=t&&(r.callback=t),Ba(),Zi(e,r),Za(e,n)}};function uo(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function lo(e,t,n){var r=!1,o=Pr,i=t.contextType;return"object"==typeof i&&null!==i?i=Hi(i):(o=jr(t)?Ar:Or.current,i=(r=null!=(r=t.contextTypes))?Rr(e,o):Pr),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ao,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function co(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ao.enqueueReplaceState(t,t.state,null)}function so(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=oo;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Hi(i):(i=jr(t)?Ar:Or.current,o.context=Rr(e,i)),null!==(i=e.updateQueue)&&(na(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(io(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ao.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(na(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var fo=Array.isArray;function po(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===oo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function ho(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function vo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Qr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Xr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=po(e,t,n),r.return=e,r):((r=$r(n.type,n.key,n.props,null,e.mode,r)).ref=po(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Zr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Yr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Qe:return(n=$r(t.type,t.key,t.props,null,e.mode,n)).ref=po(e,null,t),n.return=e,n;case $e:return(t=Zr(t,e.mode,n)).return=e,t}if(fo(t)||at(t))return(t=Yr(t,e.mode,n,null)).return=e,t;ho(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Qe:return n.key===o?n.type===Ye?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case $e:return n.key===o?s(e,t,n,r):null}if(fo(n)||at(n))return null!==o?null:f(e,t,n,r,null);ho(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Qe:return e=e.get(null===r.key?n:r.key)||null,r.type===Ye?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case $e:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(fo(r)||at(r))return f(t,e=e.get(n)||null,r,o,null);ho(t,r)}return null}function v(o,a,u,l){for(var c=null,s=null,f=a,v=a=0,g=null;null!==f&&v<u.length;v++){f.index>v?(g=f,f=null):g=f.sibling;var m=d(o,f,u[v],l);if(null===m){null===f&&(f=g);break}e&&f&&null===m.alternate&&t(o,f),a=i(m,a,v),null===s?c=m:s.sibling=m,s=m,f=g}if(v===u.length)return n(o,f),c;if(null===f){for(;v<u.length;v++)(f=p(o,u[v],l))&&(a=i(f,a,v),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);v<u.length;v++)(g=h(f,o,v,u[v],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?v:g.key),a=i(g,a,v),null===s?c=g:s.sibling=g,s=g);return e&&f.forEach(function(e){return t(o,e)}),c}function g(o,u,l,c){var s=at(l);"function"!=typeof s&&a("150"),null==(l=s.call(l))&&a("151");for(var f=s=null,v=u,g=u=0,m=null,y=l.next();null!==v&&!y.done;g++,y=l.next()){v.index>g?(m=v,v=null):m=v.sibling;var b=d(o,v,y.value,c);if(null===b){v||(v=m);break}e&&v&&null===b.alternate&&t(o,v),u=i(b,u,g),null===f?s=b:f.sibling=b,f=b,v=m}if(y.done)return n(o,v),s;if(null===v){for(;!y.done;g++,y=l.next())null!==(y=p(o,y.value,c))&&(u=i(y,u,g),null===f?s=y:f.sibling=y,f=y);return s}for(v=r(o,v);!y.done;g++,y=l.next())null!==(y=h(v,o,g,y.value,c))&&(e&&null!==y.alternate&&v.delete(null===y.key?g:y.key),u=i(y,u,g),null===f?s=y:f.sibling=y,f=y);return e&&v.forEach(function(e){return t(o,e)}),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===Ye&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case Qe:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?i.type===Ye:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===Ye?i.props.children:i.props)).ref=po(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Ye?((r=Yr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=$r(i.type,i.key,i.props,null,e.mode,l)).ref=po(e,r,i),l.return=e,e=l)}return u(e);case $e:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Zr(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xr(i,e.mode,l)).return=e,e=r),u(e);if(fo(i))return v(e,r,i,l);if(at(i))return g(e,r,i,l);if(s&&ho(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:a("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var go=vo(!0),mo=vo(!1),yo={},bo={current:yo},xo={current:yo},wo={current:yo};function _o(e){return e===yo&&a("174"),e}function ko(e,t){Cr(wo,t),Cr(xo,e),Cr(bo,yo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Tr(bo),Cr(bo,t)}function Eo(e){Tr(bo),Tr(xo),Tr(wo)}function So(e){_o(wo.current);var t=_o(bo.current),n=tr(t,e.type);t!==n&&(Cr(xo,e),Cr(bo,n))}function Mo(e){xo.current===e&&(Tr(bo),Tr(xo))}var To=0,Co=2,Po=4,Oo=8,No=16,Ao=32,Ro=64,jo=128,Lo=Ve.ReactCurrentDispatcher,Do=0,Io=null,Uo=null,zo=null,Fo=null,qo=null,Ho=null,Bo=0,Vo=null,Wo=0,Go=!1,Qo=null,$o=0;function Yo(){a("321")}function Ko(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Zt(e[n],t[n]))return!1;return!0}function Xo(e,t,n,r,o,i){if(Do=i,Io=t,zo=null!==e?e.memoizedState:null,Lo.current=null===zo?si:fi,t=n(r,o),Go){do{Go=!1,$o+=1,zo=null!==e?e.memoizedState:null,Ho=Fo,Vo=qo=Uo=null,Lo.current=fi,t=n(r,o)}while(Go);Qo=null,$o=0}return Lo.current=ci,(e=Io).memoizedState=Fo,e.expirationTime=Bo,e.updateQueue=Vo,e.effectTag|=Wo,e=null!==Uo&&null!==Uo.next,Do=0,Ho=qo=Fo=zo=Uo=Io=null,Bo=0,Vo=null,Wo=0,e&&a("300"),t}function Zo(){Lo.current=ci,Do=0,Ho=qo=Fo=zo=Uo=Io=null,Bo=0,Vo=null,Wo=0,Go=!1,Qo=null,$o=0}function Jo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===qo?Fo=qo=e:qo=qo.next=e,qo}function ei(){if(null!==Ho)Ho=(qo=Ho).next,zo=null!==(Uo=zo)?Uo.next:null;else{null===zo&&a("310");var e={memoizedState:(Uo=zo).memoizedState,baseState:Uo.baseState,queue:Uo.queue,baseUpdate:Uo.baseUpdate,next:null};qo=null===qo?Fo=e:qo.next=e,zo=Uo.next}return qo}function ti(e,t){return"function"==typeof t?t(e):t}function ni(e){var t=ei(),n=t.queue;if(null===n&&a("311"),n.lastRenderedReducer=e,0<$o){var r=n.dispatch;if(null!==Qo){var o=Qo.get(n);if(void 0!==o){Qo.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Zt(i,t.memoizedState)||(_i=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(i=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,s=!1;do{var f=c.expirationTime;f<Do?(s||(s=!0,l=u,o=i),f>Bo&&(Bo=f)):i=c.eagerReducer===e?c.eagerState:e(i,c.action),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,o=i),Zt(i,t.memoizedState)||(_i=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function ri(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Vo?(Vo={lastEffect:null}).lastEffect=e.next=e:null===(t=Vo.lastEffect)?Vo.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Vo.lastEffect=e),e}function oi(e,t,n,r){var o=Jo();Wo|=e,o.memoizedState=ri(t,n,void 0,void 0===r?null:r)}function ii(e,t,n,r){var o=ei();r=void 0===r?null:r;var i=void 0;if(null!==Uo){var a=Uo.memoizedState;if(i=a.destroy,null!==r&&Ko(r,a.deps))return void ri(To,n,i,r)}Wo|=e,o.memoizedState=ri(t,n,i,r)}function ai(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ui(){}function li(e,t,n){25>$o||a("301");var r=e.alternate;if(e===Io||null!==r&&r===Io)if(Go=!0,e={expirationTime:Do,action:n,eagerReducer:null,eagerState:null,next:null},null===Qo&&(Qo=new Map),void 0===(n=Qo.get(t)))Qo.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Ba();var o=_u(),i={expirationTime:o=Ya(o,e),action:n,eagerReducer:null,eagerState:null,next:null},u=t.last;if(null===u)i.next=i;else{var l=u.next;null!==l&&(i.next=l),u.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(i.eagerReducer=r,i.eagerState=s,Zt(s,c))return}catch(e){}Za(e,o)}}var ci={readContext:Hi,useCallback:Yo,useContext:Yo,useEffect:Yo,useImperativeHandle:Yo,useLayoutEffect:Yo,useMemo:Yo,useReducer:Yo,useRef:Yo,useState:Yo,useDebugValue:Yo},si={readContext:Hi,useCallback:function(e,t){return Jo().memoizedState=[e,void 0===t?null:t],e},useContext:Hi,useEffect:function(e,t){return oi(516,jo|Ro,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,Po|Ao,ai.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oi(4,Po|Ao,e,t)},useMemo:function(e,t){var n=Jo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Jo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=li.bind(null,Io,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Jo().memoizedState=e},useState:function(e){var t=Jo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ti,lastRenderedState:e}).dispatch=li.bind(null,Io,e),[t.memoizedState,e]},useDebugValue:ui},fi={readContext:Hi,useCallback:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ko(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Hi,useEffect:function(e,t){return ii(516,jo|Ro,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ii(4,Po|Ao,ai.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ii(4,Po|Ao,e,t)},useMemo:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ko(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ni,useRef:function(){return ei().memoizedState},useState:function(e){return ni(ti)},useDebugValue:ui},pi=null,di=null,hi=!1;function vi(e,t){var n=Wr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function gi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function mi(e){if(hi){var t=di;if(t){var n=t;if(!gi(e,t)){if(!(t=kr(n))||!gi(e,t))return e.effectTag|=2,hi=!1,void(pi=e);vi(pi,n)}pi=e,di=Er(t)}else e.effectTag|=2,hi=!1,pi=e}}function yi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;pi=e}function bi(e){if(e!==pi)return!1;if(!hi)return yi(e),hi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yr(t,e.memoizedProps))for(t=di;t;)vi(e,t),t=kr(t);return yi(e),di=pi?kr(e.stateNode):null,!0}function xi(){di=pi=null,hi=!1}var wi=Ve.ReactCurrentOwner,_i=!1;function ki(e,t,n,r){t.child=null===e?mo(t,null,n,r):go(t,e.child,n,r)}function Ei(e,t,n,r,o){n=n.render;var i=t.ref;return qi(t,o),r=Xo(e,t,n,r,i,o),null===e||_i?(t.effectTag|=1,ki(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ri(e,t,o))}function Si(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Gr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=$r(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Mi(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?Ri(e,t,i):(t.effectTag|=1,(e=Qr(a,r)).ref=t.ref,e.return=t,t.child=e)}function Mi(e,t,n,r,o,i){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(_i=!1,o<i)?Ri(e,t,i):Ci(e,t,n,r,i)}function Ti(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ci(e,t,n,r,o){var i=jr(n)?Ar:Or.current;return i=Rr(t,i),qi(t,o),n=Xo(e,t,n,r,i,o),null===e||_i?(t.effectTag|=1,ki(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ri(e,t,o))}function Pi(e,t,n,r,o){if(jr(n)){var i=!0;zr(t)}else i=!1;if(qi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),lo(t,n,r),so(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=Hi(c):c=Rr(t,c=jr(n)?Ar:Or.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&co(t,a,r,c),Qi=!1;var p=t.memoizedState;l=a.state=p;var d=t.updateQueue;null!==d&&(na(t,d,r,a,o),l=t.memoizedState),u!==r||p!==l||Nr.current||Qi?("function"==typeof s&&(io(t,n,s,r),l=t.memoizedState),(u=Qi||uo(t,n,u,r,p,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:ro(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=Hi(c):c=Rr(t,c=jr(n)?Ar:Or.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&co(t,a,r,c),Qi=!1,l=t.memoizedState,p=a.state=l,null!==(d=t.updateQueue)&&(na(t,d,r,a,o),p=t.memoizedState),u!==r||l!==p||Nr.current||Qi?("function"==typeof s&&(io(t,n,s,r),p=t.memoizedState),(s=Qi||uo(t,n,u,r,l,p,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Oi(e,t,n,r,i,o)}function Oi(e,t,n,r,o,i){Ti(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Fr(t,n,!1),Ri(e,t,i);r=t.stateNode,wi.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=go(t,e.child,null,i),t.child=go(t,null,u,i)):ki(e,t,u,i),t.memoizedState=r.state,o&&Fr(t,n,!0),t.child}function Ni(e){var t=e.stateNode;t.pendingContext?Ir(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ir(0,t.context,!1),ko(e,t.containerInfo)}function Ai(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var u=o.fallback;e=Yr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Yr(u,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=mo(t,null,o.children,n);else null!==e.memoizedState?(u=(r=e.child).sibling,a?(n=o.fallback,o=Qr(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=Qr(u,n,u.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=go(t,r.child,o.children,n)):(u=e.child,a?(a=o.fallback,(o=Yr(null,r,0,null)).child=u,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Yr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=go(t,u,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function Ri(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Qr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Qr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ji(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Nr.current)_i=!0;else if(r<n){switch(_i=!1,t.tag){case 3:Ni(t),xi();break;case 5:So(t);break;case 1:jr(t.type)&&zr(t);break;case 4:ko(t,t.stateNode.containerInfo);break;case 10:zi(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ai(e,t,n):null!==(t=Ri(e,t,n))?t.sibling:null}return Ri(e,t,n)}}else _i=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Rr(t,Or.current);if(qi(t,n),o=Xo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Zo(),jr(r)){var i=!0;zr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&io(t,r,u,e),o.updater=ao,t.stateNode=o,o._reactInternalFiber=t,so(t,r,e,n),t=Oi(null,t,r,!0,i,n)}else t.tag=0,ki(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Gr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=ro(e,i),u=void 0,o){case 0:u=Ci(null,t,e,i,n);break;case 1:u=Pi(null,t,e,i,n);break;case 11:u=Ei(null,t,e,i,n);break;case 14:u=Si(null,t,e,ro(e.type,i),r,n);break;default:a("306",e,"")}return u;case 0:return r=t.type,o=t.pendingProps,Ci(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 1:return r=t.type,o=t.pendingProps,Pi(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 3:return Ni(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,na(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(xi(),t=Ri(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(di=Er(t.stateNode.containerInfo),pi=t,o=hi=!0),o?(t.effectTag|=2,t.child=mo(t,null,r,n)):(ki(e,t,r,n),xi()),t=t.child),t;case 5:return So(t),null===e&&mi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,yr(r,o)?u=null:null!==i&&yr(r,i)&&(t.effectTag|=16),Ti(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(ki(e,t,u,n),t=t.child),t;case 6:return null===e&&mi(t),null;case 13:return Ai(e,t,n);case 4:return ko(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=go(t,null,r,n):ki(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ei(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 7:return ki(e,t,t.pendingProps,n),t.child;case 8:case 12:return ki(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,zi(t,i=o.value),null!==u){var l=u.value;if(0===(i=Zt(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!Nr.current){t=Ri(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.contextDependencies;if(null!==c){u=l.child;for(var s=c.first;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=Ki(n)).tag=Wi,Zi(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),s=n;for(var f=l.return;null!==f;){var p=f.alternate;if(f.childExpirationTime<s)f.childExpirationTime=s,null!==p&&p.childExpirationTime<s&&(p.childExpirationTime=s);else{if(!(null!==p&&p.childExpirationTime<s))break;p.childExpirationTime=s}f=f.return}c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}ki(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,qi(t,n),r=r(o=Hi(o,i.unstable_observedBits)),t.effectTag|=1,ki(e,t,r,n),t.child;case 14:return i=ro(o=t.type,t.pendingProps),Si(e,t,o,i=ro(o.type,i),r,n);case 15:return Mi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ro(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,jr(r)?(e=!0,zr(t)):e=!1,qi(t,n),lo(t,r,o),so(t,r,o,n),Oi(null,t,r,!0,e,n)}a("156")}var Li={current:null},Di=null,Ii=null,Ui=null;function zi(e,t){var n=e.type._context;Cr(Li,n._currentValue),n._currentValue=t}function Fi(e){var t=Li.current;Tr(Li),e.type._context._currentValue=t}function qi(e,t){Di=e,Ui=Ii=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(_i=!0),e.contextDependencies=null}function Hi(e,t){return Ui!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Ui=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ii?(null===Di&&a("308"),Ii=t,Di.contextDependencies={first:t,expirationTime:0}):Ii=Ii.next=t),e._currentValue}var Bi=0,Vi=1,Wi=2,Gi=3,Qi=!1;function $i(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Yi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ki(e){return{expirationTime:e,tag:Bi,payload:null,callback:null,next:null,nextEffect:null}}function Xi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Zi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=$i(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=$i(e.memoizedState),o=n.updateQueue=$i(n.memoizedState)):r=e.updateQueue=Yi(o):null===o&&(o=n.updateQueue=Yi(r));null===o||r===o?Xi(r,t):null===r.lastUpdate||null===o.lastUpdate?(Xi(r,t),Xi(o,t)):(Xi(r,t),o.lastUpdate=t)}function Ji(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=$i(e.memoizedState):ea(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ea(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Yi(t)),t}function ta(e,t,n,r,i,a){switch(n.tag){case Vi:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case Gi:e.effectTag=-2049&e.effectTag|64;case Bi:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case Wi:Qi=!0}return r}function na(e,t,n,r,o){Qi=!1;for(var i=(t=ea(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s<o?(null===a&&(a=l,i=c),u<s&&(u=s)):(c=ta(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===s&&(s=l,null===a&&(i=c)),u<f&&(u=f)):(c=ta(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function ra(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),oa(t.firstEffect,n),t.firstEffect=t.lastEffect=null,oa(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function oa(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function ia(e,t){return{value:e,source:t,stack:lt(t)}}function aa(e){e.effectTag|=4}var ua=void 0,la=void 0,ca=void 0,sa=void 0;ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},la=function(){},ca=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(_o(bo.current),e=null,n){case"input":a=bt(u,a),r=bt(u,r),e=[];break;case"option":a=Qn(u,a),r=Qn(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Yn(u,a),r=Yn(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=hr)}fr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(u in c)c.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(l||(l={}),l[u]=s[u])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=s&&dr(i,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),i=e,(t.updateQueue=i)&&aa(t)}},sa=function(e,t,n,r){n!==r&&aa(t)};var fa="function"==typeof WeakSet?WeakSet:Set;function pa(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&ut(n.type),t=t.value,null!==e&&1===e.tag&&ut(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function da(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){$a(e,t)}else t.current=null}function ha(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==To){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==To&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function va(e){switch("function"==typeof Hr&&Hr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){$a(o,e)}}n=n.next}while(n!==t)}break;case 1:if(da(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){$a(e,t)}break;case 5:da(e);break;case 4:ya(e)}}function ga(e){return 5===e.tag||3===e.tag||4===e.tag}function ma(e){e:{for(var t=e.return;null!==t;){if(ga(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(ir(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ga(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,u=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(u,l):i.insertBefore(u,l)}else t.insertBefore(o.stateNode,n);else r?(u=t,l=o.stateNode,8===u.nodeType?(i=u.parentNode).insertBefore(l,u):(i=u).appendChild(l),null!=(u=u._reactRootContainer)||null!==i.onclick||(i.onclick=hr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function ya(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,u=i;;)if(va(u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===i)break;for(;null===u.sibling;){if(null===u.return||u.return===i)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}o?(i=r,u=t.stateNode,8===i.nodeType?i.parentNode.removeChild(u):i.removeChild(u)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,o=!0,t.child.return=t,t=t.child;continue}}else if(va(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function ba(e,t){switch(t.tag){case 0:case 11:case 14:case 15:ha(Po,Oo,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[j]=o,"input"===n&&"radio"===o.type&&null!=o.name&&wt(e,o),pr(n,r),r=pr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?cr(e,u):"dangerouslySetInnerHTML"===a?or(e,u):"children"===a?ir(e,u):mt(e,a,u,r)}switch(n){case"input":_t(e,o);break;case"textarea":Xn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?$n(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?$n(e,!!o.multiple,o.defaultValue,!0):$n(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=_u())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=lr("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var u=t.stateNode;null===u&&(u=t.stateNode=new fa),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Ya(t=_u(),e),null!==(e=Xa(e,t))&&(Jr(e,t),0!==(t=e.expirationTime)&&ku(e,t))}.bind(null,t,e);u.has(e)||(u.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var xa="function"==typeof WeakMap?WeakMap:Map;function wa(e,t,n){(n=Ki(n)).tag=Gi,n.payload={element:null};var r=t.value;return n.callback=function(){Au(r),pa(e,t)},n}function _a(e,t,n){(n=Ki(n)).tag=Gi;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ua?Ua=new Set([this]):Ua.add(this));var n=t.value,o=t.stack;pa(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function ka(e){switch(e.tag){case 1:jr(e.type)&&Lr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return Eo(),Dr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return Mo(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return Eo(),null;case 10:return Fi(e),null;default:return null}}var Ea=Ve.ReactCurrentDispatcher,Sa=Ve.ReactCurrentOwner,Ma=1073741822,Ta=!1,Ca=null,Pa=null,Oa=0,Na=-1,Aa=!1,Ra=null,ja=!1,La=null,Da=null,Ia=null,Ua=null;function za(){if(null!==Ca)for(var e=Ca.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Lr();break;case 3:Eo(),Dr();break;case 5:Mo(t);break;case 4:Eo();break;case 10:Fi(t)}e=e.return}Pa=null,Oa=0,Na=-1,Aa=!1,Ca=null}function Fa(){for(;null!==Ra;){var e=Ra.effectTag;if(16&e&&ir(Ra.stateNode,""),128&e){var t=Ra.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:ma(Ra),Ra.effectTag&=-3;break;case 6:ma(Ra),Ra.effectTag&=-3,ba(Ra.alternate,Ra);break;case 4:ba(Ra.alternate,Ra);break;case 8:ya(e=Ra),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Ra=Ra.nextEffect}}function qa(){for(;null!==Ra;){if(256&Ra.effectTag)e:{var e=Ra.alternate,t=Ra;switch(t.tag){case 0:case 11:case 15:ha(Co,To,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ro(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Ra=Ra.nextEffect}}function Ha(e,t){for(;null!==Ra;){var n=Ra.effectTag;if(36&n){var r=Ra.alternate,o=Ra,i=t;switch(o.tag){case 0:case 11:case 15:ha(No,Ao,o);break;case 1:var u=o.stateNode;if(4&o.effectTag)if(null===r)u.componentDidMount();else{var l=o.elementType===o.type?r.memoizedProps:ro(o.type,r.memoizedProps);u.componentDidUpdate(l,r.memoizedState,u.__reactInternalSnapshotBeforeUpdate)}null!==(r=o.updateQueue)&&ra(0,r,u);break;case 3:if(null!==(r=o.updateQueue)){if(u=null,null!==o.child)switch(o.child.tag){case 5:u=o.child.stateNode;break;case 1:u=o.child.stateNode}ra(0,r,u)}break;case 5:i=o.stateNode,null===r&&4&o.effectTag&&mr(o.type,o.memoizedProps)&&i.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}128&n&&(null!==(o=Ra.ref)&&(i=Ra.stateNode,"function"==typeof o?o(i):o.current=i)),512&n&&(La=e),Ra=Ra.nextEffect}}function Ba(){null!==Da&&_r(Da),null!==Ia&&Ia()}function Va(e,t){ja=Ta=!0,e.current===t&&a("177");var n=e.pendingCommitExpirationTime;0===n&&a("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,o=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Jr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Jr(e,t)):t>n&&Jr(e,t)}no(0,e)}(e,o>r?o:r),Sa.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,vr=En,gr=function(){var e=Dn();if(In(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,u=-1,l=0,c=0,s=e,f=null;t:for(;;){for(var p;s!==t||0!==r&&3!==s.nodeType||(a=i+r),s!==o||0!==n&&3!==s.nodeType||(u=i+n),3===s.nodeType&&(i+=s.nodeValue.length),null!==(p=s.firstChild);)f=s,s=p;for(;;){if(s===e)break t;if(f===t&&++l===r&&(a=i),f===o&&++c===n&&(u=i),null!==(p=s.nextSibling))break;f=(s=f).parentNode}s=p}t=-1===a||-1===u?null:{start:a,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),En=!1,Ra=r;null!==Ra;){o=!1;var u=void 0;try{qa()}catch(e){o=!0,u=e}o&&(null===Ra&&a("178"),$a(Ra,u),null!==Ra&&(Ra=Ra.nextEffect))}for(Ra=r;null!==Ra;){o=!1,u=void 0;try{Fa()}catch(e){o=!0,u=e}o&&(null===Ra&&a("178"),$a(Ra,u),null!==Ra&&(Ra=Ra.nextEffect))}for(Un(gr),gr=null,En=!!vr,vr=null,e.current=t,Ra=r;null!==Ra;){o=!1,u=void 0;try{Ha(e,n)}catch(e){o=!0,u=e}o&&(null===Ra&&a("178"),$a(Ra,u),null!==Ra&&(Ra=Ra.nextEffect))}if(null!==r&&null!==La){var l=function(e,t){Ia=Da=La=null;var n=ou;ou=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var i=t;ha(jo,To,i),ha(To,Ro,i)}catch(e){r=!0,o=e}r&&$a(t,o)}t=t.nextEffect}while(null!==t);ou=n,0!==(n=e.expirationTime)&&ku(e,n),su||ou||Cu(1073741823,!1)}.bind(null,e,r);Da=i.unstable_runWithPriority(i.unstable_NormalPriority,function(){return wr(l)}),Ia=l}Ta=ja=!1,"function"==typeof qr&&qr(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(Ua=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function Wa(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Ca=e;e:{var i=t,u=Oa,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:jr(t.type)&&Lr();break;case 3:Eo(),Dr(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==i&&null!==i.child||(bi(t),t.effectTag&=-3),la(t);break;case 5:Mo(t);var c=_o(wo.current);if(u=t.type,null!==i&&null!=t.stateNode)ca(i,t,u,l,c),i.ref!==t.ref&&(t.effectTag|=128);else if(l){var s=_o(bo.current);if(bi(t)){i=(l=t).stateNode;var f=l.type,p=l.memoizedProps,d=c;switch(i[R]=l,i[j]=p,u=void 0,c=f){case"iframe":case"object":Sn("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)Sn(te[f],i);break;case"source":Sn("error",i);break;case"img":case"image":case"link":Sn("error",i),Sn("load",i);break;case"form":Sn("reset",i),Sn("submit",i);break;case"details":Sn("toggle",i);break;case"input":xt(i,p),Sn("invalid",i),dr(d,"onChange");break;case"select":i._wrapperState={wasMultiple:!!p.multiple},Sn("invalid",i),dr(d,"onChange");break;case"textarea":Kn(i,p),Sn("invalid",i),dr(d,"onChange")}for(u in fr(c,p),f=null,p)p.hasOwnProperty(u)&&(s=p[u],"children"===u?"string"==typeof s?i.textContent!==s&&(f=["children",s]):"number"==typeof s&&i.textContent!==""+s&&(f=["children",""+s]):b.hasOwnProperty(u)&&null!=s&&dr(d,u));switch(c){case"input":He(i),kt(i,p,!0);break;case"textarea":He(i),Zn(i);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(i.onclick=hr)}u=f,l.updateQueue=u,(l=null!==u)&&aa(t)}else{p=t,d=u,i=l,f=9===c.nodeType?c:c.ownerDocument,s===Jn.html&&(s=er(d)),s===Jn.html?"script"===d?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof i.is?f=f.createElement(d,{is:i.is}):(f=f.createElement(d),"select"===d&&(d=f,i.multiple?d.multiple=!0:i.size&&(d.size=i.size))):f=f.createElementNS(s,d),(i=f)[R]=p,i[j]=l,ua(i,t,!1,!1),d=i;var h=c,v=pr(f=u,p=l);switch(f){case"iframe":case"object":Sn("load",d),c=p;break;case"video":case"audio":for(c=0;c<te.length;c++)Sn(te[c],d);c=p;break;case"source":Sn("error",d),c=p;break;case"img":case"image":case"link":Sn("error",d),Sn("load",d),c=p;break;case"form":Sn("reset",d),Sn("submit",d),c=p;break;case"details":Sn("toggle",d),c=p;break;case"input":xt(d,p),c=bt(d,p),Sn("invalid",d),dr(h,"onChange");break;case"option":c=Qn(d,p);break;case"select":d._wrapperState={wasMultiple:!!p.multiple},c=o({},p,{value:void 0}),Sn("invalid",d),dr(h,"onChange");break;case"textarea":Kn(d,p),c=Yn(d,p),Sn("invalid",d),dr(h,"onChange");break;default:c=p}fr(f,c),s=void 0;var g=f,m=d,y=c;for(s in y)if(y.hasOwnProperty(s)){var x=y[s];"style"===s?cr(m,x):"dangerouslySetInnerHTML"===s?null!=(x=x?x.__html:void 0)&&or(m,x):"children"===s?"string"==typeof x?("textarea"!==g||""!==x)&&ir(m,x):"number"==typeof x&&ir(m,""+x):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(b.hasOwnProperty(s)?null!=x&&dr(h,s):null!=x&&mt(m,s,x,v))}switch(f){case"input":He(d),kt(d,p,!1);break;case"textarea":He(d),Zn(d);break;case"option":null!=p.value&&d.setAttribute("value",""+yt(p.value));break;case"select":(c=d).multiple=!!p.multiple,null!=(d=p.value)?$n(c,!!p.multiple,d,!1):null!=p.defaultValue&&$n(c,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof c.onClick&&(d.onclick=hr)}(l=mr(u,l))&&aa(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?sa(i,t,i.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&a("166")),i=_o(wo.current),_o(bo.current),bi(t)?(u=(l=t).stateNode,i=l.memoizedProps,u[R]=l,(l=u.nodeValue!==i)&&aa(t)):(u=t,(l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[R]=t,u.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=u,Ca=t;break e}l=null!==l,u=null!==i&&null!==i.memoizedState,null!==i&&!l&&u&&(null!==(i=i.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=i,i.nextEffect=c):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(l||u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Eo(),la(t);break;case 10:Fi(t);break;case 9:case 14:break;case 17:jr(t.type)&&Lr();break;case 18:break;default:a("156")}Ca=null}if(t=e,1===Oa||1!==t.childExpirationTime){for(l=0,u=t.child;null!==u;)(i=u.expirationTime)>l&&(l=i),(c=u.childExpirationTime)>l&&(l=c),u=u.sibling;t.childExpirationTime=l}if(null!==Ca)return Ca;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=ka(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Ga(e){var t=ji(e.alternate,e,Oa);return e.memoizedProps=e.pendingProps,null===t&&(t=Wa(e)),Sa.current=null,t}function Qa(e,t){Ta&&a("243"),Ba(),Ta=!0;var n=Ea.current;Ea.current=ci;var r=e.nextExpirationTimeToWorkOn;r===Oa&&e===Pa&&null!==Ca||(za(),Oa=r,Ca=Qr((Pa=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==Ca&&!Mu();)Ca=Ga(Ca);else for(;null!==Ca;)Ca=Ga(Ca)}catch(t){if(Ui=Ii=Di=null,Zo(),null===Ca)o=!0,Au(t);else{null===Ca&&a("271");var i=Ca,u=i.return;if(null!==u){e:{var l=e,c=u,s=i,f=t;if(u=Oa,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var p=f;f=c;var d=-1,h=-1;do{if(13===f.tag){var v=f.alternate;if(null!==v&&null!==(v=v.memoizedState)){h=10*(1073741822-v.timedOutAt);break}"number"==typeof(v=f.pendingProps.maxDuration)&&(0>=v?d=0:(-1===d||v<d)&&(d=v))}f=f.return}while(null!==f);f=c;do{if((v=13===f.tag)&&(v=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),v){if(null===(c=f.updateQueue)?((c=new Set).add(p),f.updateQueue=c):c.add(p),0==(1&f.mode)){f.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((u=Ki(1073741823)).tag=Wi,Zi(s,u))),s.expirationTime=1073741823;break e}c=u;var g=(s=l).pingCache;null===g?(g=s.pingCache=new xa,v=new Set,g.set(p,v)):void 0===(v=g.get(p))&&(v=new Set,g.set(p,v)),v.has(c)||(v.add(c),s=Ka.bind(null,s,p,c),p.then(s,s)),-1===d?l=1073741823:(-1===h&&(h=10*(1073741822-to(l,u))-5e3),l=h+d),0<=l&&Na<l&&(Na=l),f.effectTag|=2048,f.expirationTime=u;break e}f=f.return}while(null!==f);f=Error((ut(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(s))}Aa=!0,f=ia(f,s),l=c;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=u,Ji(l,u=wa(l,f,u));break e;case 1:if(d=f,h=l.type,s=l.stateNode,0==(64&l.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==s&&"function"==typeof s.componentDidCatch&&(null===Ua||!Ua.has(s)))){l.effectTag|=2048,l.expirationTime=u,Ji(l,u=_a(l,d,u));break e}}l=l.return}while(null!==l)}Ca=Wa(i);continue}o=!0,Au(t)}}break}if(Ta=!1,Ea.current=n,Ui=Ii=Di=null,Zo(),o)Pa=null,e.finishedWork=null;else if(null!==Ca)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&a("281"),Pa=null,Aa){if(o=e.latestPendingTime,i=e.latestSuspendedTime,u=e.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==u&&u<r)return eo(e,r),void wu(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void wu(e,n,r,t,-1)}t&&-1!==Na?(eo(e,r),(t=10*(1073741822-to(e,r)))<Na&&(Na=t),t=10*(1073741822-_u()),t=Na-t,wu(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function $a(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ua||!Ua.has(r)))return Zi(n,e=_a(n,e=ia(t,e),1073741823)),void Za(n,1073741823);break;case 3:return Zi(n,e=wa(n,e=ia(t,e),1073741823)),void Za(n,1073741823)}n=n.return}3===e.tag&&(Zi(e,n=wa(e,n=ia(t,e),1073741823)),Za(e,1073741823))}function Ya(e,t){var n=i.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(Ta&&!ja)r=Oa;else{switch(n){case i.unstable_ImmediatePriority:r=1073741823;break;case i.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case i.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case i.unstable_LowPriority:case i.unstable_IdlePriority:r=1;break;default:a("313")}null!==Pa&&r===Oa&&--r}return n===i.unstable_UserBlockingPriority&&(0===uu||r<uu)&&(uu=r),r}function Ka(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Pa&&Oa===n?Pa=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),no(n,e),0!==(n=e.expirationTime)&&ku(e,n)))}function Xa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Za(e,t){null!==(e=Xa(e,t))&&(!Ta&&0!==Oa&&t>Oa&&za(),Jr(e,t),Ta&&!ja&&Pa===e||ku(e,e.expirationTime),mu>gu&&(mu=0,a("185")))}function Ja(e,t,n,r,o){return i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){return e(t,n,r,o)})}var eu=null,tu=null,nu=0,ru=void 0,ou=!1,iu=null,au=0,uu=0,lu=!1,cu=null,su=!1,fu=!1,pu=null,du=i.unstable_now(),hu=1073741822-(du/10|0),vu=hu,gu=50,mu=0,yu=null;function bu(){hu=1073741822-((i.unstable_now()-du)/10|0)}function xu(e,t){if(0!==nu){if(t<nu)return;null!==ru&&i.unstable_cancelCallback(ru)}nu=t,e=i.unstable_now()-du,ru=i.unstable_scheduleCallback(Tu,{timeout:10*(1073741822-t)-e})}function wu(e,t,n,r,o){e.expirationTime=r,0!==o||Mu()?0<o&&(e.timeoutHandle=br(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,bu(),vu=hu,Pu(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function _u(){return ou?vu:(Eu(),0!==au&&1!==au||(bu(),vu=hu),vu)}function ku(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===tu?(eu=tu=e,e.nextScheduledRoot=e):(tu=tu.nextScheduledRoot=e).nextScheduledRoot=eu):t>e.expirationTime&&(e.expirationTime=t),ou||(su?fu&&(iu=e,au=1073741823,Ou(e,1073741823,!1)):1073741823===t?Cu(1073741823,!1):xu(e,t))}function Eu(){var e=0,t=null;if(null!==tu)for(var n=tu,r=eu;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===tu)&&a("244"),r===r.nextScheduledRoot){eu=tu=r.nextScheduledRoot=null;break}if(r===eu)eu=o=r.nextScheduledRoot,tu.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===tu){(tu=n).nextScheduledRoot=eu,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===tu)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}iu=t,au=e}var Su=!1;function Mu(){return!!Su||!!i.unstable_shouldYield()&&(Su=!0)}function Tu(){try{if(!Mu()&&null!==eu){bu();var e=eu;do{var t=e.expirationTime;0!==t&&hu<=t&&(e.nextExpirationTimeToWorkOn=hu),e=e.nextScheduledRoot}while(e!==eu)}Cu(0,!0)}finally{Su=!1}}function Cu(e,t){if(Eu(),t)for(bu(),vu=hu;null!==iu&&0!==au&&e<=au&&!(Su&&hu>au);)Ou(iu,au,hu>au),Eu(),bu(),vu=hu;else for(;null!==iu&&0!==au&&e<=au;)Ou(iu,au,!1),Eu();if(t&&(nu=0,ru=null),0!==au&&xu(iu,au),mu=0,yu=null,null!==pu)for(e=pu,pu=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){lu||(lu=!0,cu=e)}}if(lu)throw e=cu,cu=null,lu=!1,e}function Pu(e,t){ou&&a("253"),iu=e,au=t,Ou(e,t,!1),Cu(1073741823,!1)}function Ou(e,t,n){if(ou&&a("245"),ou=!0,n){var r=e.finishedWork;null!==r?Nu(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,xr(r)),Qa(e,n),null!==(r=e.finishedWork)&&(Mu()?e.finishedWork=r:Nu(e,r,t)))}else null!==(r=e.finishedWork)?Nu(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,xr(r)),Qa(e,n),null!==(r=e.finishedWork)&&Nu(e,r,t));ou=!1}function Nu(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===pu?pu=[r]:pu.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===yu?mu++:(yu=e,mu=0),i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){Va(e,t)})}function Au(e){null===iu&&a("246"),iu.expirationTime=0,lu||(lu=!0,cu=e)}function Ru(e,t){var n=su;su=!0;try{return e(t)}finally{(su=n)||ou||Cu(1073741823,!1)}}function ju(e,t){if(su&&!fu){fu=!0;try{return e(t)}finally{fu=!1}}return e(t)}function Lu(e,t,n){su||ou||0===uu||(Cu(uu,!1),uu=0);var r=su;su=!0;try{return i.unstable_runWithPriority(i.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(su=r)||ou||Cu(1073741823,!1)}}function Du(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(jr(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);a("171"),u=void 0}if(1===n.tag){var l=n.type;if(jr(l)){n=Ur(n,l,u);break e}}n=u}else n=Pr;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Ki(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Ba(),Zi(i,o),Za(i,r),r}function Iu(e,t,n,r){var o=t.current;return Du(e,t,n,o=Ya(_u(),o),r)}function Uu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function zu(e){var t=1073741822-25*(1+((1073741822-_u()+500)/25|0));t>=Ma&&(t=Ma-1),this._expirationTime=Ma=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Fu(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function qu(e,t,n){e={current:t=Wr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Hu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Bu(e,t,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Uu(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new qu(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=Uu(i._internalRoot);u.call(e)}}ju(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Uu(i._internalRoot)}function Vu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Hu(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$e,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Me=function(e,t,n){switch(t){case"input":if(_t(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=U(r);o||a("90"),Be(r),_t(r,o)}}}break;case"textarea":Xn(e,n);break;case"select":null!=(t=n.value)&&$n(e,!!n.multiple,t,!1)}},zu.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Fu;return Du(e,t,null,n,r._onCommit),r},zu.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},zu.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Pu(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},zu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Fu.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Fu.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},qu.prototype.render=function(e,t){var n=this._internalRoot,r=new Fu;return null!==(t=void 0===t?null:t)&&r.then(t),Iu(e,n,null,r._onCommit),r},qu.prototype.unmount=function(e){var t=this._internalRoot,n=new Fu;return null!==(e=void 0===e?null:e)&&n.then(e),Iu(null,t,null,n._onCommit),n},qu.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Fu;return null!==(n=void 0===n?null:n)&&o.then(n),Iu(t,r,e,o._onCommit),o},qu.prototype.createBatch=function(){var e=new zu(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ae=Ru,Re=Lu,je=function(){ou||0===uu||(Cu(uu,!1),uu=0)};var Wu={createPortal:Vu,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Hu(t)||a("200"),Bu(null,e,t,!0,n)},render:function(e,t,n){return Hu(t)||a("200"),Bu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Hu(n)||a("200"),(null==e||void 0===e._reactInternalFiber)&&a("38"),Bu(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Hu(e)||a("40"),!!e._reactRootContainer&&(ju(function(){Bu(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Vu.apply(void 0,arguments)},unstable_batchedUpdates:Ru,unstable_interactiveUpdates:Lu,flushSync:function(e,t){ou&&a("187");var n=su;su=!0;try{return Ja(e,t)}finally{su=n,Cu(1073741823,!1)}},unstable_createRoot:function(e,t){return Hu(e)||a("299","unstable_createRoot"),new qu(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=su;su=!0;try{Ja(e)}finally{(su=t)||ou||Cu(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[D,I,U,P.injectEventPluginsByName,y,V,function(e){M(e,B)},Oe,Ne,Cn,N]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);qr=Br(function(e){return t.onCommitFiberRoot(n,e)}),Hr=Br(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{overrideProps:null,currentDispatcherRef:Ve.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:L,bundleType:0,version:"16.8.6",rendererPackageName:"react-dom"});var Gu={default:Wu},Qu=Gu&&Wu||Gu;e.exports=Qu.default||Qu},function(e,t,n){"use strict";e.exports=n(28)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,u=!1,l=!1;function c(){if(!u){var e=n.expirationTime;l?k():l=!0,_(p,e)}}function s(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,u=a;o=e,a=t;try{var l=r()}finally{o=i,a=u}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,c()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){u=!0;try{do{s()}while(null!==n&&1===n.priorityLevel)}finally{u=!1,null!==n?c():l=!1}}}function p(e){u=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{s()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{s()}while(null!==n&&!E())}finally{u=!1,r=o,null!==n?c():l=!1,f()}}var d,h,v=Date,g="function"==typeof setTimeout?setTimeout:void 0,m="function"==typeof clearTimeout?clearTimeout:void 0,y="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function x(e){d=y(function(t){m(h),e(t)}),h=g(function(){b(d),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var w=performance;t.unstable_now=function(){return w.now()}}else t.unstable_now=function(){return v.now()};var _,k,E,S=null;if("undefined"!=typeof window?S=window:void 0!==e&&(S=e),S&&S._schedMock){var M=S._schedMock;_=M[0],k=M[1],E=M[2],t.unstable_now=M[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var T=null,C=function(e){if(null!==T)try{T(e)}finally{T=null}};_=function(e){null!==T?setTimeout(_,0,e):(T=e,setTimeout(C,0,!1))},k=function(){T=null},E=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof y&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var P=null,O=!1,N=-1,A=!1,R=!1,j=0,L=33,D=33;E=function(){return j<=t.unstable_now()};var I=new MessageChannel,U=I.port2;I.port1.onmessage=function(){O=!1;var e=P,n=N;P=null,N=-1;var r=t.unstable_now(),o=!1;if(0>=j-r){if(!(-1!==n&&n<=r))return A||(A=!0,x(z)),P=e,void(N=n);o=!0}if(null!==e){R=!0;try{e(o)}finally{R=!1}}};var z=function(e){if(null!==P){x(z);var t=e-j+D;t<D&&L<D?(8>t&&(t=8),D=t<L?L:t):L=t,j=e+D,O||(O=!0,U.postMessage(void 0))}else A=!1};_=function(e,t){P=e,N=t,R||0>t?U.postMessage(void 0):A||(A=!0,x(z))},k=function(){P=null,O=!1,N=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,f()}},t.unstable_next=function(e){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,a=i;o=n,i=t.unstable_now();try{return e()}finally{o=r,i=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,c();else{a=null;var u=n;do{if(u.expirationTime>r){a=u;break}u=u.next}while(u!==n);null===a?a=n:a===n&&(n=e,c()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||E())},t.unstable_continueExecution=function(){null!==n&&c()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(6))},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=n(0),o=a(n(12)),i=a(n(13));a(n(14));function a(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return o.store=n.store,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{store:this.store}},t.prototype.render=function(){return r.Children.only(this.props.children)},t}(r.Component);t.default=u,u.propTypes={store:i.default.isRequired,children:o.default.element.isRequired},u.childContextTypes={store:i.default.isRequired}},function(e,t,n){"use strict";var r=n(31);function o(){}e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(e,t,n){var s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},g=Boolean(e),m=e||f,y=void 0;y="function"==typeof t?t:t?(0,u.default)(t):p;var b=n||d,x=s.pure,w=void 0===x||x,_=s.withRef,k=void 0!==_&&_,E=w&&b!==d,S=v++;return function(e){var t="Connect("+function(e){return e.displayName||e.name||"Component"}(e)+")";var n=function(n){function i(e,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,r));o.version=S,o.store=e.store||r.store,(0,c.default)(o.store,'Could not find "store" in either the context or props of "'+t+'". Either wrap the root component in a <Provider>, or explicitly pass "store" as a prop to "'+t+'".');var a=o.store.getState();return o.state={storeState:a},o.clearCache(),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,n),i.prototype.shouldComponentUpdate=function(){return!w||this.haveOwnPropsChanged||this.hasStoreStateChanged},i.prototype.computeStateProps=function(e,t){if(!this.finalMapStateToProps)return this.configureFinalMapState(e,t);var n=e.getState(),r=this.doStatePropsDependOnOwnProps?this.finalMapStateToProps(n,t):this.finalMapStateToProps(n);return r},i.prototype.configureFinalMapState=function(e,t){var n=m(e.getState(),t),r="function"==typeof n;return this.finalMapStateToProps=r?n:m,this.doStatePropsDependOnOwnProps=1!==this.finalMapStateToProps.length,r?this.computeStateProps(e,t):n},i.prototype.computeDispatchProps=function(e,t){if(!this.finalMapDispatchToProps)return this.configureFinalMapDispatch(e,t);var n=e.dispatch,r=this.doDispatchPropsDependOnOwnProps?this.finalMapDispatchToProps(n,t):this.finalMapDispatchToProps(n);return r},i.prototype.configureFinalMapDispatch=function(e,t){var n=y(e.dispatch,t),r="function"==typeof n;return this.finalMapDispatchToProps=r?n:y,this.doDispatchPropsDependOnOwnProps=1!==this.finalMapDispatchToProps.length,r?this.computeDispatchProps(e,t):n},i.prototype.updateStatePropsIfNeeded=function(){var e=this.computeStateProps(this.store,this.props);return(!this.stateProps||!(0,a.default)(e,this.stateProps))&&(this.stateProps=e,!0)},i.prototype.updateDispatchPropsIfNeeded=function(){var e=this.computeDispatchProps(this.store,this.props);return(!this.dispatchProps||!(0,a.default)(e,this.dispatchProps))&&(this.dispatchProps=e,!0)},i.prototype.updateMergedPropsIfNeeded=function(){var e=function(e,t,n){0;return b(e,t,n)}(this.stateProps,this.dispatchProps,this.props);return!(this.mergedProps&&E&&(0,a.default)(e,this.mergedProps))&&(this.mergedProps=e,!0)},i.prototype.isSubscribed=function(){return"function"==typeof this.unsubscribe},i.prototype.trySubscribe=function(){g&&!this.unsubscribe&&(this.unsubscribe=this.store.subscribe(this.handleChange.bind(this)),this.handleChange())},i.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null)},i.prototype.componentDidMount=function(){this.trySubscribe()},i.prototype.componentWillReceiveProps=function(e){w&&(0,a.default)(e,this.props)||(this.haveOwnPropsChanged=!0)},i.prototype.componentWillUnmount=function(){this.tryUnsubscribe(),this.clearCache()},i.prototype.clearCache=function(){this.dispatchProps=null,this.stateProps=null,this.mergedProps=null,this.haveOwnPropsChanged=!0,this.hasStoreStateChanged=!0,this.haveStatePropsBeenPrecalculated=!1,this.statePropsPrecalculationError=null,this.renderedElement=null,this.finalMapDispatchToProps=null,this.finalMapStateToProps=null},i.prototype.handleChange=function(){if(this.unsubscribe){var e=this.store.getState(),t=this.state.storeState;if(!w||t!==e){if(w&&!this.doStatePropsDependOnOwnProps){var n=function(e,t){try{return e.apply(t)}catch(e){return h.value=e,h}}(this.updateStatePropsIfNeeded,this);if(!n)return;n===h&&(this.statePropsPrecalculationError=h.value),this.haveStatePropsBeenPrecalculated=!0}this.hasStoreStateChanged=!0,this.setState({storeState:e})}}},i.prototype.getWrappedInstance=function(){return(0,c.default)(k,"To access the wrapped instance, you need to specify { withRef: true } as the fourth argument of the connect() call."),this.refs.wrappedInstance},i.prototype.render=function(){var t=this.haveOwnPropsChanged,n=this.hasStoreStateChanged,i=this.haveStatePropsBeenPrecalculated,a=this.statePropsPrecalculationError,u=this.renderedElement;if(this.haveOwnPropsChanged=!1,this.hasStoreStateChanged=!1,this.haveStatePropsBeenPrecalculated=!1,this.statePropsPrecalculationError=null,a)throw a;var l=!0,c=!0;w&&u&&(l=n||t&&this.doStatePropsDependOnOwnProps,c=t&&this.doDispatchPropsDependOnOwnProps);var s=!1,f=!1;i?s=!0:l&&(s=this.updateStatePropsIfNeeded()),c&&(f=this.updateDispatchPropsIfNeeded());return!(!!(s||f||t)&&this.updateMergedPropsIfNeeded())&&u?u:(this.renderedElement=k?(0,o.createElement)(e,r({},this.mergedProps,{ref:"wrappedInstance"})):(0,o.createElement)(e,this.mergedProps),this.renderedElement)},i}(o.Component);return n.displayName=t,n.WrappedComponent=e,n.contextTypes={store:i.default},n.propTypes={store:i.default},(0,l.default)(n,e)}};var o=n(0),i=s(n(13)),a=s(n(33)),u=s(n(34)),l=(s(n(14)),s(n(36)),s(n(45))),c=s(n(46));function s(e){return e&&e.__esModule?e:{default:e}}var f=function(e){return{}},p=function(e){return{dispatch:e}},d=function(e,t,n){return r({},n,e,t)};var h={value:null};var v=0},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(e===t)return!0;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=Object.prototype.hasOwnProperty,i=0;i<n.length;i++)if(!o.call(t,n[i])||e[n[i]]!==t[n[i]])return!1;return!0}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return function(t){return(0,r.bindActionCreators)(e,t)}};var r=n(1)},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r=n(37),o=n(42),i=n(44),a="[object Object]",u=Function.prototype,l=Object.prototype,c=u.toString,s=l.hasOwnProperty,f=c.call(Object);e.exports=function(e){if(!i(e)||r(e)!=a)return!1;var t=o(e);if(null===t)return!0;var n=s.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&c.call(n)==f}},function(e,t,n){var r=n(15),o=n(40),i=n(41),a="[object Null]",u="[object Undefined]",l=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?u:a:l&&l in Object(e)?o(e):i(e)}},function(e,t,n){var r=n(39),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(6))},function(e,t,n){var r=n(15),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,u=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,u),n=e[u];try{e[u]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(t?e[u]=n:delete e[u]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r=n(43)(Object.getPrototypeOf,Object);e.exports=r},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,s=c&&c(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(s){var p=c(n);p&&p!==s&&e(t,p,f)}var d=a(n);u&&(d=d.concat(u(n)));for(var h=0;h<d.length;++h){var v=d[h];if(!(r[v]||o[v]||f&&f[v])){var g=l(n,v);try{i(t,v,g)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";function r(e,t){return e===t}function o(e){var t=arguments.length<=1||void 0===arguments[1]?r:arguments[1],n=null,o=null;return function(){for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];return null!==n&&n.length===i.length&&i.every(function(e,r){return t(e,n[r])})||(o=e.apply(void 0,i)),n=i,o}}function i(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];var i=0,a=r.pop(),u=function(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every(function(e){return"function"==typeof e})){var n=t.map(function(e){return typeof e}).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}(r),l=e.apply(void 0,[function(){return i++,a.apply(void 0,arguments)}].concat(n)),c=function(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var i=u.map(function(n){return n.apply(void 0,[e,t].concat(r))});return l.apply(void 0,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(i))};return c.resultFunc=a,c.recomputations=function(){return i},c.resetRecomputations=function(){return i=0},c}}t.__esModule=!0,t.defaultMemoize=o,t.createSelectorCreator=i,t.createStructuredSelector=function(e){var t=arguments.length<=1||void 0===arguments[1]?a:arguments[1];if("object"!=typeof e)throw new Error("createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+typeof e);var n=Object.keys(e);return t(n.map(function(t){return e[t]}),function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.reduce(function(e,t,r){return e[n[r]]=t,e},{})})};var a=t.createSelector=i(o)},function(e,t,n){e.exports=n(49)()},function(e,t,n){"use strict";var r=n(50);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var u in r)n.call(r,u)&&r[u]&&e.push(u)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.hide=function(e){a(i.default.GLOBAL.HIDE,{target:e})},e.rebuild=function(){a(i.default.GLOBAL.REBUILD)},e.show=function(e){a(i.default.GLOBAL.SHOW,{target:e})},e.prototype.globalRebuild=function(){this.mount&&(this.unbindListener(),this.bindListener())},e.prototype.globalShow=function(e){if(this.mount){var t={currentTarget:e.detail.target};this.showTooltip(t,!0)}},e.prototype.globalHide=function(e){if(this.mount){var t=!!(e&&e.detail&&e.detail.target);this.hideTooltip({currentTarget:t&&e.detail.target},t)}}};var r,o=n(16),i=(r=o)&&r.__esModule?r:{default:r};var a=function(e,t){var n=void 0;"function"==typeof window.CustomEvent?n=new window.CustomEvent(e,{detail:t}):((n=document.createEvent("Event")).initEvent(e,!1,!0),n.detail=t),window.dispatchEvent(n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.bindWindowEvents=function(e){window.removeEventListener(i.default.GLOBAL.HIDE,this.globalHide),window.addEventListener(i.default.GLOBAL.HIDE,this.globalHide,!1),window.removeEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild),window.addEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild,!1),window.removeEventListener(i.default.GLOBAL.SHOW,this.globalShow),window.addEventListener(i.default.GLOBAL.SHOW,this.globalShow,!1),e&&(window.removeEventListener("resize",this.onWindowResize),window.addEventListener("resize",this.onWindowResize,!1))},e.prototype.unbindWindowEvents=function(){window.removeEventListener(i.default.GLOBAL.HIDE,this.globalHide),window.removeEventListener(i.default.GLOBAL.REBUILD,this.globalRebuild),window.removeEventListener(i.default.GLOBAL.SHOW,this.globalShow),window.removeEventListener("resize",this.onWindowResize)},e.prototype.onWindowResize=function(){this.mount&&this.hideTooltip()}};var r,o=n(16),i=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.isCustomEvent=function(e){return this.state.event||!!e.getAttribute("data-event")},e.prototype.customBindListener=function(e){var t=this,n=this.state,o=n.event,a=n.eventOff,u=e.getAttribute("data-event")||o,l=e.getAttribute("data-event-off")||a;u.split(" ").forEach(function(n){e.removeEventListener(n,i.get(e,n));var o=r.bind(t,l);i.set(e,n,o),e.addEventListener(n,o,!1)}),l&&l.split(" ").forEach(function(n){e.removeEventListener(n,t.hideTooltip),e.addEventListener(n,t.hideTooltip,!1)})},e.prototype.customUnbindListener=function(e){var t=this.state,n=t.event,r=t.eventOff,o=n||e.getAttribute("data-event"),a=r||e.getAttribute("data-event-off");e.removeEventListener(o,i.get(e,n)),a&&e.removeEventListener(a,this.hideTooltip)}};var r=function(e,t){var n=this.state.show,r=this.props.id,i=t.currentTarget.getAttribute("data-iscapture"),a=i&&"true"===i||this.props.isCapture,u=t.currentTarget.getAttribute("currentItem");a||t.stopPropagation(),n&&"true"===u?e||this.hideTooltip(t):(t.currentTarget.setAttribute("currentItem","true"),o(t.currentTarget,this.getTargetArray(r)),this.showTooltip(t))},o=function(e,t){for(var n=0;n<t.length;n++)e!==t[n]?t[n].setAttribute("currentItem","false"):t[n].setAttribute("currentItem","true")},i={id:"9b69f92e-d3fe-498b-b1b4-c5e63a51b0cf",set:function(e,t,n){var r,o,i;this.id in e?e[this.id][t]=n:Object.defineProperty(e,this.id,{configurable:!0,value:(r={},o=t,i=n,o in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,r)})},get:function(e,t){var n=e[this.id];if(void 0!==n)return n[t]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.isCapture=function(e){return e&&"true"===e.getAttribute("data-iscapture")||this.props.isCapture||!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.getEffect=function(e){return e.getAttribute("data-effect")||this.props.effect||"float"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.prototype.bindRemovalTracker=function(){var e=this,t=r();if(null!=t){var n=new t(function(t){for(var n=0;n<t.length;n++)for(var r=t[n],o=0;o<r.removedNodes.length;o++){if(r.removedNodes[o]===e.state.currentTarget)return void e.hideTooltip()}});n.observe(window.document,{childList:!0,subtree:!0}),this.removalTracker=n}},e.prototype.unbindRemovalTracker=function(){this.removalTracker&&(this.removalTracker.disconnect(),this.removalTracker=null)}};var r=function(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,l,c,s,f){for(var p=r(n),d=p.width,h=p.height,v=r(t),g=v.width,m=v.height,y=o(e,t,s),b=y.mouseX,x=y.mouseY,w=i(s,g,m,d,h),_=a(f),k=_.extraOffset_X,E=_.extraOffset_Y,S=window.innerWidth,M=window.innerHeight,T=u(n),C=T.parentTop,P=T.parentLeft,O=function(e){var t=w[e].l;return b+t+k},N=function(e){var t=w[e].t;return x+t+E},A=function(e){return t=w[e].r,b+t+k>S;var t},R=function(e){return t=w[e].b,x+t+E>M;var t},j=function(e){return function(e){return O(e)<0}(e)||A(e)||function(e){return N(e)<0}(e)||R(e)},L=function(e){return!j(e)},D=["top","bottom","left","right"],I=[],U=0;U<4;U++){var z=D[U];L(z)&&I.push(z)}var F=!1,q=void 0;return L(c)&&c!==l?(F=!0,q=c):I.length>0&&j(c)&&j(l)&&(F=!0,q=I[0]),F?{isNewState:!0,newState:{place:q}}:{isNewState:!1,position:{left:parseInt(O(l)-P,10),top:parseInt(N(l)-C,10)}}};var r=function(e){var t=e.getBoundingClientRect(),n=t.height,r=t.width;return{height:parseInt(n,10),width:parseInt(r,10)}},o=function(e,t,n){var o=t.getBoundingClientRect(),i=o.top,a=o.left,u=r(t),l=u.width,c=u.height;return"float"===n?{mouseX:e.clientX,mouseY:e.clientY}:{mouseX:a+l/2,mouseY:i+c/2}},i=function(e,t,n,r,o){var i=void 0,a=void 0,u=void 0,l=void 0;return"float"===e?(i={l:-r/2,r:r/2,t:-(o+3+2),b:-3},u={l:-r/2,r:r/2,t:15,b:o+3+2+12},l={l:-(r+3+2),r:-3,t:-o/2,b:o/2},a={l:3,r:r+3+2,t:-o/2,b:o/2}):"solid"===e&&(i={l:-r/2,r:r/2,t:-(n/2+o+2),b:-n/2},u={l:-r/2,r:r/2,t:n/2,b:n/2+o+2},l={l:-(r+t/2+2),r:-t/2,t:-o/2,b:o/2},a={l:t/2,r:r+t/2+2,t:-o/2,b:o/2}),{top:i,bottom:u,left:l,right:a}},a=function(e){var t=0,n=0;for(var r in"[object String]"===Object.prototype.toString.apply(e)&&(e=JSON.parse(e.toString().replace(/\'/g,'"'))),e)"top"===r?n-=parseInt(e[r],10):"bottom"===r?n+=parseInt(e[r],10):"left"===r?t-=parseInt(e[r],10):"right"===r&&(t+=parseInt(e[r],10));return{extraOffset_X:t,extraOffset_Y:n}},u=function(e){for(var t=e;t&&"none"===window.getComputedStyle(t).getPropertyValue("transform");)t=t.parentElement;return{parentTop:t&&t.getBoundingClientRect().top||0,parentLeft:t&&t.getBoundingClientRect().left||0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){if(t)return t;if(null!=n)return n;if(null===n)return null;var o=/<br\s*\/?>/;return r&&"false"!==r&&o.test(e)?e.split(o).map(function(e,t){return i.default.createElement("span",{key:t,className:"multi-line"},e)}):e};var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseAria=function(e){var t={};return Object.keys(e).filter(function(e){return/(^aria-\w+$|^role$)/.test(e)}).forEach(function(n){t[n]=e[n]}),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.length;return e.hasOwnProperty?Array.prototype.slice.call(e):new Array(t).fill().map(function(t){return e[t]})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default='.__react_component_tooltip{border-radius:3px;display:inline-block;font-size:13px;left:-999em;opacity:0;padding:8px 21px;position:fixed;pointer-events:none;transition:opacity 0.3s ease-out;top:-999em;visibility:hidden;z-index:999}.__react_component_tooltip.allow_hover,.__react_component_tooltip.allow_click{pointer-events:auto}.__react_component_tooltip:before,.__react_component_tooltip:after{content:"";width:0;height:0;position:absolute}.__react_component_tooltip.show{opacity:0.9;margin-top:0px;margin-left:0px;visibility:visible}.__react_component_tooltip.type-dark{color:#fff;background-color:#222}.__react_component_tooltip.type-dark.place-top:after{border-top-color:#222;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-dark.place-bottom:after{border-bottom-color:#222;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-dark.place-left:after{border-left-color:#222;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-dark.place-right:after{border-right-color:#222;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-dark.border{border:1px solid #fff}.__react_component_tooltip.type-dark.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-dark.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-dark.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-dark.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-success{color:#fff;background-color:#8DC572}.__react_component_tooltip.type-success.place-top:after{border-top-color:#8DC572;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-success.place-bottom:after{border-bottom-color:#8DC572;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-success.place-left:after{border-left-color:#8DC572;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-success.place-right:after{border-right-color:#8DC572;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-success.border{border:1px solid #fff}.__react_component_tooltip.type-success.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-success.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-success.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-success.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-warning{color:#fff;background-color:#F0AD4E}.__react_component_tooltip.type-warning.place-top:after{border-top-color:#F0AD4E;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-warning.place-bottom:after{border-bottom-color:#F0AD4E;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-warning.place-left:after{border-left-color:#F0AD4E;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-warning.place-right:after{border-right-color:#F0AD4E;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-warning.border{border:1px solid #fff}.__react_component_tooltip.type-warning.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-warning.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-warning.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-warning.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-error{color:#fff;background-color:#BE6464}.__react_component_tooltip.type-error.place-top:after{border-top-color:#BE6464;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-error.place-bottom:after{border-bottom-color:#BE6464;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-error.place-left:after{border-left-color:#BE6464;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-error.place-right:after{border-right-color:#BE6464;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-error.border{border:1px solid #fff}.__react_component_tooltip.type-error.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-error.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-error.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-error.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-info{color:#fff;background-color:#337AB7}.__react_component_tooltip.type-info.place-top:after{border-top-color:#337AB7;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-info.place-bottom:after{border-bottom-color:#337AB7;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-info.place-left:after{border-left-color:#337AB7;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-info.place-right:after{border-right-color:#337AB7;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-info.border{border:1px solid #fff}.__react_component_tooltip.type-info.border.place-top:before{border-top:8px solid #fff}.__react_component_tooltip.type-info.border.place-bottom:before{border-bottom:8px solid #fff}.__react_component_tooltip.type-info.border.place-left:before{border-left:8px solid #fff}.__react_component_tooltip.type-info.border.place-right:before{border-right:8px solid #fff}.__react_component_tooltip.type-light{color:#222;background-color:#fff}.__react_component_tooltip.type-light.place-top:after{border-top-color:#fff;border-top-style:solid;border-top-width:6px}.__react_component_tooltip.type-light.place-bottom:after{border-bottom-color:#fff;border-bottom-style:solid;border-bottom-width:6px}.__react_component_tooltip.type-light.place-left:after{border-left-color:#fff;border-left-style:solid;border-left-width:6px}.__react_component_tooltip.type-light.place-right:after{border-right-color:#fff;border-right-style:solid;border-right-width:6px}.__react_component_tooltip.type-light.border{border:1px solid #222}.__react_component_tooltip.type-light.border.place-top:before{border-top:8px solid #222}.__react_component_tooltip.type-light.border.place-bottom:before{border-bottom:8px solid #222}.__react_component_tooltip.type-light.border.place-left:before{border-left:8px solid #222}.__react_component_tooltip.type-light.border.place-right:before{border-right:8px solid #222}.__react_component_tooltip.place-top{margin-top:-10px}.__react_component_tooltip.place-top:before{border-left:10px solid transparent;border-right:10px solid transparent;bottom:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-top:after{border-left:8px solid transparent;border-right:8px solid transparent;bottom:-6px;left:50%;margin-left:-8px}.__react_component_tooltip.place-bottom{margin-top:10px}.__react_component_tooltip.place-bottom:before{border-left:10px solid transparent;border-right:10px solid transparent;top:-8px;left:50%;margin-left:-10px}.__react_component_tooltip.place-bottom:after{border-left:8px solid transparent;border-right:8px solid transparent;top:-6px;left:50%;margin-left:-8px}.__react_component_tooltip.place-left{margin-left:-10px}.__react_component_tooltip.place-left:before{border-top:6px solid transparent;border-bottom:6px solid transparent;right:-8px;top:50%;margin-top:-5px}.__react_component_tooltip.place-left:after{border-top:5px solid transparent;border-bottom:5px solid transparent;right:-6px;top:50%;margin-top:-4px}.__react_component_tooltip.place-right{margin-left:10px}.__react_component_tooltip.place-right:before{border-top:6px solid transparent;border-bottom:6px solid transparent;left:-8px;top:50%;margin-top:-5px}.__react_component_tooltip.place-right:after{border-top:5px solid transparent;border-bottom:5px solid transparent;left:-6px;top:50%;margin-top:-4px}.__react_component_tooltip .multi-line{display:block;padding:2px 0px;text-align:center}'},function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,i){t=t||"&",n=n||"=";var a={};if("string"!=typeof e||0===e.length)return a;var u=/\+/g;e=e.split(t);var l=1e3;i&&"number"==typeof i.maxKeys&&(l=i.maxKeys);var c=e.length;l>0&&c>l&&(c=l);for(var s=0;s<c;++s){var f,p,d,h,v=e[s].replace(u,"%20"),g=v.indexOf(n);g>=0?(f=v.substr(0,g),p=v.substr(g+1)):(f=v,p=""),d=decodeURIComponent(f),h=decodeURIComponent(p),r(a,d)?o(a[d])?a[d].push(h):a[d]=[a[d],h]:a[d]=h}return a};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";var r=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,u){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?i(a(e),function(a){var u=encodeURIComponent(r(a))+n;return o(e[a])?i(e[a],function(e){return u+encodeURIComponent(r(e))}).join(t):u+encodeURIComponent(r(e[a]))}).join(t):u?encodeURIComponent(r(u))+n+encodeURIComponent(r(e)):""};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function i(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var a=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},function(e,t,n){var r=n(66);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)()).push([e.i,"#header {\n  margin-top: 10px;\n  color: #444444;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start; }\n  #header #nav {\n    z-index: 300; }\n    #header #nav .nav-link {\n      margin-top: 6px;\n      margin-left: 8px; }\n      #header #nav .nav-link:first-child {\n        margin-top: 0; }\n    #header #nav .nav-link a {\n      font-size: 11px;\n      color: #444444; }\n      #header #nav .nav-link a:hover {\n        border-bottom: 0; }\n      #header #nav .nav-link a path {\n        fill: #444444; }\n  #header #header-text {\n    margin-left: 10px;\n    line-height: 28px; }\n",""])},function(e,t,n){var r=n(68);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)()).push([e.i,"#results {\n  min-height: 600px;\n  display: block;\n  position: relative;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  margin-left: 32px;\n  padding: 0 10px 30px 10px; }\n  #results .summary {\n    color: #444444; }\n  #results .blocks {\n    margin-top: 10px; }\n  #results .block-link {\n    position: relative;\n    display: inline-block;\n    box-sizing: border-box;\n    height: 82px;\n    width: 232px;\n    float: left;\n    margin: 10px 10px 10px 0;\n    color: #444444;\n    text-shadow: 1px 1px 0 #fff, 1px -1px 0 #fff, -1px 1px 0 #fff, -1px -1px 0 #fff;\n    background-color: #eee;\n    border: solid 1px #eee;\n    border-bottom: solid 1px #ccc;\n    background-position: 0% 0%;\n    transition: ease 750ms background-position; }\n    #results .block-link a,\n    #results .block-link a:visited,\n    #results .block-link a:hover {\n      color: #444444; }\n  #results .block-link:hover {\n    background-position: 0% 50%;\n    text-decoration: none; }\n    #results .block-link:hover .block-description {\n      background-color: rgba(250, 250, 250, 0.75); }\n    #results .block-link:hover .block-user {\n      background-color: rgba(250, 250, 250, 0.75); }\n    #results .block-link:hover .block-org-link {\n      display: inline-block; }\n    #results .block-link:hover .block-graph-link {\n      display: inline-block; }\n    #results .block-link:hover .no-thumbnail {\n      color: #66b5af; }\n  #results .block-link:not(:hover) {\n    text-decoration: none; }\n  #results .block-description {\n    font-size: 14px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    max-height: 28px;\n    padding: 8px 8px 4px 8px;\n    color: #444444; }\n  #results .block-user {\n    font-size: 10px;\n    padding-left: 8px;\n    padding-top: 4px;\n    padding-bottom: 6px;\n    color: #444444; }\n  #results .block-org-link {\n    display: none;\n    position: absolute;\n    bottom: 0px;\n    left: 4px;\n    font-size: 10px;\n    padding: 4px;\n    color: #444444; }\n  #results .block-graph-link {\n    display: none;\n    position: absolute;\n    bottom: 0px;\n    right: 4px;\n    font-size: 10px;\n    padding: 4px;\n    color: #444444; }\n  #results .load-more {\n    margin: 20px 0;\n    padding: 5px;\n    border: 1px solid #66b5af;\n    cursor: pointer;\n    font-size: 20px; }\n  #results .load-more {\n    display: inline-block;\n    margin: 0px 5px;\n    padding: 4px 8px;\n    font-size: 16px;\n    background-color: #66b5af;\n    border: 1px solid white;\n    border-radius: 3px;\n    color: white;\n    outline: none;\n    cursor: pointer;\n    float: left;\n    clear: left; }\n  #results .load-more:hover {\n    background-color: white;\n    color: #66b5af;\n    border: 1px solid #66b5af; }\n\n.loading {\n  width: 960px; }\n\n/* -------------------\nborrowed styles\n----------------------*/\n/*\n  css loader from http://tobiasahlin.com/spinkit/\n*/\n.sk-cube-grid {\n  width: 100px;\n  height: 100px;\n  margin: 50px auto; }\n\n.sk-cube-grid .sk-cube {\n  width: 33%;\n  height: 33%;\n  background-color: #66b5af;\n  float: left;\n  -webkit-animation: sk-cubeGridScaleDelay 1.3s infinite ease-in-out;\n  animation: sk-cubeGridScaleDelay 1.3s infinite ease-in-out; }\n\n.sk-cube-grid .sk-cube1 {\n  -webkit-animation-delay: 0.2s;\n  animation-delay: 0.2s; }\n\n.sk-cube-grid .sk-cube2 {\n  -webkit-animation-delay: 0.3s;\n  animation-delay: 0.3s; }\n\n.sk-cube-grid .sk-cube3 {\n  -webkit-animation-delay: 0.4s;\n  animation-delay: 0.4s; }\n\n.sk-cube-grid .sk-cube4 {\n  -webkit-animation-delay: 0.1s;\n  animation-delay: 0.1s; }\n\n.sk-cube-grid .sk-cube5 {\n  -webkit-animation-delay: 0.2s;\n  animation-delay: 0.2s; }\n\n.sk-cube-grid .sk-cube6 {\n  -webkit-animation-delay: 0.3s;\n  animation-delay: 0.3s; }\n\n.sk-cube-grid .sk-cube7 {\n  -webkit-animation-delay: 0s;\n  animation-delay: 0s; }\n\n.sk-cube-grid .sk-cube8 {\n  -webkit-animation-delay: 0.1s;\n  animation-delay: 0.1s; }\n\n.sk-cube-grid .sk-cube9 {\n  -webkit-animation-delay: 0.2s;\n  animation-delay: 0.2s; }\n\n@-webkit-keyframes sk-cubeGridScaleDelay {\n  0%,\n  70%,\n  100% {\n    -webkit-transform: scale3D(1, 1, 1);\n    transform: scale3D(1, 1, 1); }\n  35% {\n    -webkit-transform: scale3D(0.2, 0.2, 1);\n    transform: scale3D(0.2, 0.2, 1); } }\n\n@keyframes sk-cubeGridScaleDelay {\n  0%,\n  70%,\n  100% {\n    -webkit-transform: scale3D(1, 1, 1);\n    transform: scale3D(1, 1, 1); }\n  35% {\n    -webkit-transform: scale3D(0.2, 0.2, 1);\n    transform: scale3D(0.2, 0.2, 1); } }\n",""])},function(e,t,n){var r=n(70);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)()).push([e.i,"#searchbar {\n  max-width: 970px;\n  margin-left: 32px;\n  padding: 5px; }\n  #searchbar input.text-search {\n    width: 300px;\n    outline: none;\n    border: 2px solid #ccc;\n    font-size: 18px;\n    height: 24px;\n    color: #444444; }\n  #searchbar input.user-search {\n    margin: 0 5px; }\n  #searchbar input.api-autocomplete {\n    margin: 0 5px; }\n  #searchbar input.modules-autocomplete {\n    margin: 0 5px; }\n  #searchbar label {\n    color: #444444;\n    font-size: 14px; }\n  #searchbar .search-button {\n    display: inline-block;\n    margin: 0px 5px;\n    padding: 4px 8px;\n    font-size: 16px;\n    background-color: #66b5af;\n    border: 1px solid white;\n    border-radius: 3px;\n    color: white;\n    outline: none;\n    cursor: pointer; }\n  #searchbar .search-button-emoji {\n    display: inline-block;\n    vertical-align: middle;\n    margin: 0px;\n    padding: 0px;\n    font-size: 16px;\n    background-color: white;\n    border: 1px solid white;\n    border-radius: 3px;\n    color: white;\n    outline: none;\n    cursor: pointer; }\n  #searchbar .search-button:hover {\n    background-color: white;\n    color: #66b5af;\n    border: 1px solid #66b5af; }\n  #searchbar #autocomplete-apis {\n    position: absolute;\n    z-index: 100;\n    background-color: white;\n    border: 1px solid #66b5af; }\n  #searchbar #autocomplete-modules {\n    position: absolute;\n    z-index: 100;\n    background-color: white;\n    border: 1px solid #66b5af; }\n  #searchbar .ac-api {\n    margin: 2px 0;\n    padding: 3px 5px;\n    background-color: white;\n    cursor: pointer; }\n  #searchbar .ac-api:hover {\n    background-color: #66b5af;\n    color: white; }\n  #searchbar #selected-apis {\n    width: 100%;\n    min-height: 25px;\n    margin: 10px 0;\n    z-index: 10; }\n  #searchbar #selected-modules {\n    width: 100%;\n    min-height: 25px;\n    margin: 10px 0;\n    z-index: 10; }\n  #searchbar .selected-api {\n    float: left;\n    margin-top: 5px;\n    margin-right: 5px;\n    padding: 3px 5px;\n    border: 1px solid #66b5af;\n    border-radius: 3px; }\n  #searchbar .remove-api {\n    cursor: pointer;\n    margin: 0 2px; }\n  #searchbar .remove-api path {\n    fill: #66b5af; }\n  #searchbar select {\n    color: #444444; }\n",""])},function(e,t,n){"use strict";n.r(t);n(22);var r=n(0),o=n.n(r),i=n(7),a=n.n(i),u=n(2),l=n(1),c=n(19),s=n.n(c),f={REQUEST_SEARCH:"REQUEST_SEARCH",RECEIVE_SEARCH:"RECEIVE_SEARCH",REQUEST_PAGE:"REQUEST_PAGE",RECEIVE_PAGE:"RECEIVE_PAGE",RECEIVE_SCREENSHOTS:"RECEIVE_SCREENSHOTS",REQUEST_AGGREGATE_D3_API:"REQUEST_AGGREGATE_D3_API",RECEIVE_AGGREGATE_D3_API:"RECEIVE_AGGREGATE_D3_API",REQUEST_AGGREGATE_D3_MODULES:"REQUEST_AGGREGATE_D3_MODULES",RECEIVE_AGGREGATE_D3_MODULES:"RECEIVE_AGGREGATE_D3_MODULES",SET_QUERY:"SET_QUERY"};function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){d(e,t,n[t])})}return e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h={query:{text:"",size:512,sort:"created_at",sort_dir:"desc",user:"",api:[],d3modules:[],d3version:""},results:[],d3Apis:[],d3Modules:[]};var v=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:h,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case f.SET_QUERY:return p({},e,{query:p({},e.query,t.query)});case f.REQUEST_SEARCH:return p({},e,{query:p({},e.query,t.query),results:[],loading:!0});case f.RECEIVE_SEARCH:return console.log("ACTION RECEIVE SEARCH",t),p({},e,{loading:!1,results:t.data.hits.hits,totalResults:t.data.hits.total});case f.REQUEST_PAGE:return p({},e,{loading:!0});case f.RECEIVE_SCREENSHOTS:return p({},e,{screenshots:t.data});case f.RECEIVE_PAGE:var n=t.data.hits.hits;return p({},e,{loading:!1,results:e.results.concat(n)});case f.RECEIVE_AGGREGATE_D3_API:return p({},e,{d3Apis:t.data.aggregations.all_api.buckets});case f.REQUEST_AGGREGATE_D3_API:return p({},e);case f.RECEIVE_AGGREGATE_D3_MODULES:return p({},e,{d3Modules:t.data.aggregations.all_modules.buckets});case f.REQUEST_AGGREGATE_D3_MODULES:return p({},e);default:return e}},g=Object(l.compose)(Object(l.applyMiddleware)(s.a))(l.createStore)(v),m=(n(47),n(20)),y=n.n(m),b=n(9),x=n.n(b),w=n(3),_=n.n(w);function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var E={getSearch:function(e){return function(t){t(function(e){return{type:f.REQUEST_SEARCH,query:e}}(e)),_.a.json("/api/search?".concat(x.a.stringify(e)),function(e,n){t(function(e){return{type:f.RECEIVE_SEARCH,data:e}}(n))})}},getPage:function(e,t){var n=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){k(e,t,n[t])})}return e}({},e,{from:t});return function(e){var t;e((t=n,{type:f.REQUEST_PAGE,query:t})),_.a.json("/api/search?".concat(x.a.stringify(n)),function(t,n){e(function(e){return{type:f.RECEIVE_PAGE,data:e}}(n))})}},getScreenshotList:function(){return function(e){_.a.json("https://christopheviau.com/block_screenshot/screenshot_list.json",function(t,n){e(function(e){return{type:f.RECEIVE_SCREENSHOTS,data:e}}(n))})}},setQuery:function(e){return{type:f.SET_QUERY,query:e}},getAggregateD3API:function(){return function(e){e({type:f.REQUEST_AGGREGATE_D3_API}),_.a.json("/api/aggregateD3API",function(t,n){e(function(e){return{type:f.RECEIVE_AGGREGATE_D3_API,data:e}}(n))})}},getAggregateD3Modules:function(){return function(e){e({type:f.REQUEST_AGGREGATE_D3_MODULES}),_.a.json("/api/aggregateD3Modules",function(t,n){e(function(e){return{type:f.RECEIVE_AGGREGATE_D3_MODULES,data:e}}(n))})}}};function S(e,t){var n=new URL(window.location),r=new URLSearchParams(n.search);0===t.length?r.delete(e):r.set(e,t),n.search=r.toString(),history.pushState({},"",n.toString())}function M(e){return(M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function T(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function P(e,t,n){return t&&C(e.prototype,t),n&&C(e,n),e}function O(e,t){return!t||"object"!==M(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function N(e){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function A(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}function R(e,t){return(R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var j=function(e){function t(){return T(this,t),O(this,N(t).apply(this,arguments))}return A(t,o.a.Component),P(t,[{key:"render",value:function(){return o.a.createElement("svg",{xmlns:"https://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 8 8"},o.a.createElement("path",{d:"M4 0l-4 3h1v4h2v-2h2v2h2v-4.03l1 .03-4-3z"}))}}]),t}(),L=function(e){function t(){return T(this,t),O(this,N(t).apply(this,arguments))}return A(t,o.a.Component),P(t,[{key:"render",value:function(){return o.a.createElement("svg",{xmlns:"https://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 8 8"},o.a.createElement("path",{d:"M3.5 0c-1.93 0-3.5 1.57-3.5 3.5s1.57 3.5 3.5 3.5c.59 0 1.17-.14 1.66-.41a1 1 0 0 0 .13.13l1 1a1.02 1.02 0 1 0 1.44-1.44l-1-1a1 1 0 0 0-.16-.13c.27-.49.44-1.06.44-1.66 0-1.93-1.57-3.5-3.5-3.5zm0 1c1.39 0 2.5 1.11 2.5 2.5 0 .66-.24 1.27-.66 1.72-.01.01-.02.02-.03.03a1 1 0 0 0-.13.13c-.44.4-1.04.63-1.69.63-1.39 0-2.5-1.11-2.5-2.5s1.11-2.5 2.5-2.5z"}))}}]),t}(),D=function(e){function t(){return T(this,t),O(this,N(t).apply(this,arguments))}return A(t,o.a.Component),P(t,[{key:"render",value:function(){return o.a.createElement("svg",{xmlns:"https://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 8 8"},o.a.createElement("path",{d:"M2.47 0c-.85 0-1.48.26-1.88.66-.4.4-.54.9-.59 1.28l1 .13c.04-.25.12-.5.31-.69.19-.19.49-.38 1.16-.38.66 0 1.02.16 1.22.34.2.18.28.4.28.66 0 .83-.34 1.06-.84 1.5-.5.44-1.16 1.08-1.16 2.25v.25h1v-.25c0-.83.31-1.06.81-1.5.5-.44 1.19-1.08 1.19-2.25 0-.48-.17-1.02-.59-1.41-.43-.39-1.07-.59-1.91-.59zm-.5 7v1h1v-1h-1z",transform:"translate(1)"}))}}]),t}(),I=function(e){function t(){return T(this,t),O(this,N(t).apply(this,arguments))}return A(t,o.a.Component),P(t,[{key:"render",value:function(){return o.a.createElement("svg",{xmlns:"https://www.w3.org/2000/svg",width:"10",height:"10",viewBox:"0 0 8 8"},o.a.createElement("path",{d:"M4 0c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm-1.5 1.78l1.5 1.5 1.5-1.5.72.72-1.5 1.5 1.5 1.5-.72.72-1.5-1.5-1.5 1.5-.72-.72 1.5-1.5-1.5-1.5.72-.72z"}))}}]),t}(),U=function(e){function t(){return T(this,t),O(this,N(t).apply(this,arguments))}return A(t,o.a.Component),P(t,[{key:"render",value:function(){return o.a.createElement("div",{className:"sk-cube-grid"},o.a.createElement("div",{className:"sk-cube sk-cube1"}),o.a.createElement("div",{className:"sk-cube sk-cube2"}),o.a.createElement("div",{className:"sk-cube sk-cube3"}),o.a.createElement("div",{className:"sk-cube sk-cube4"}),o.a.createElement("div",{className:"sk-cube sk-cube5"}),o.a.createElement("div",{className:"sk-cube sk-cube6"}),o.a.createElement("div",{className:"sk-cube sk-cube7"}),o.a.createElement("div",{className:"sk-cube sk-cube8"}),o.a.createElement("div",{className:"sk-cube sk-cube9"}))}}]),t}();n(65);function z(e){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(e,t){return!t||"object"!==z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function H(e){return(H=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function B(e,t){return(B=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var V=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),q(this,H(t).apply(this,arguments))}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&B(e,t)}(t,o.a.Component),n=t,(r=[{key:"render",value:function(){return o.a.createElement("div",{id:"header"},o.a.createElement("div",{id:"nav"},o.a.createElement("div",{className:"nav-link"},o.a.createElement("a",{href:"/","data-tip":"Home","data-place":"right","data-effect":"float"},o.a.createElement(j,null))),o.a.createElement("div",{className:"nav-link"},o.a.createElement("a",{href:"/about","data-tip":"About","data-place":"right","data-effect":"float"},o.a.createElement(D,null))),o.a.createElement("div",{className:"nav-link"},o.a.createElement("a",{href:"/search","data-tip":"Search","data-place":"right","data-effect":"float"},o.a.createElement(L,null)))),o.a.createElement("div",{id:"header-text"},o.a.createElement("h1",null,"Search the Bl.ocks")))}}])&&F(n.prototype,r),i&&F(n,i),t}(),W=n(10),G=n.n(W),Q="35.203.147.195";n(67);function $(e){return($="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function K(e){return(K=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function X(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Z(e,t){return(Z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function J(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ee=function(e){function t(){var e,n,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=new Array(i),u=0;u<i;u++)a[u]=arguments[u];return r=this,o=(e=K(t)).call.apply(e,[this].concat(a)),n=!o||"object"!==$(o)&&"function"!=typeof o?X(r):o,J(X(n),"handleLoadMore",function(){n.props.getPage(n.props.query,n.props.results.length)}),J(X(n),"isElementInViewport",function(e){var t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&Math.floor(t.bottom)<=(window.innerHeight||document.documentElement.clientHeight)&&Math.floor(t.right)<=(window.innerWidth||document.documentElement.clientWidth)}),J(X(n),"handleScroll",function(e){var t=document.getElementById("credits");n.isElementInViewport(t)&&n.handleLoadMore()}),J(X(n),"onMouseOver",function(e,t){var n=t.slice(14);G.a.bind("shift",function(){window.open("http://".concat(Q,":8080/?gist_id=").concat(n),"_blank")})}),J(X(n),"onMouseOut",function(){G.a.unbind("shift")}),n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Z(e,t)}(t,o.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){window.addEventListener("scroll",this.handleScroll)}},{key:"componentWillUnmount",value:function(){window.removeEventListener("scroll",this.handleScroll)}},{key:"render",value:function(){var e=this,t=this.props.query,n=this.props.results;void 0!==t.filenames&&t.filenames.indexOf("thumbnail.png")>-1&&(n=this.props.results.filter(function(e){return void 0!==e._source.thumb}));var r,i,a=this.props.totalResults||0,u=this.props.screenshots||[],l=n.map(function(t,n){var r=t._source,i={},a="block-link";if(r.thumb)i.backgroundImage="url(https://gist.githubusercontent.com/".concat(r.userId,"/").concat(t._id,"/raw/").concat(r.thumb,"/thumbnail.png)");else if(u.indexOf("".concat(t._id,".png"))>-1){var l="".concat("https://christopheviau.com","/block_screenshot/").concat(t._id,".png");i.backgroundImage="url(".concat(l,")"),a="".concat(a," no-thumbnail")}else{var c=r.userId,s=t._id,f="".concat("https-bl-ocks-org","-").concat(c,"-raw-").concat(s,"-thumbnail.png"),p="".concat("https://storage.googleapis.com","/").concat("blockbuilder-screenshots","/").concat(f);i.backgroundImage="url(".concat(p,")"),a="".concat(a," no-thumbnail")}return o.a.createElement("div",{key:"block-".concat(n,"-").concat(t._id),className:a,"data-tag":r.description,style:i,onMouseOver:e.onMouseOver,onMouseOut:e.onMouseOut},o.a.createElement("a",{href:"/".concat(r.userId,"/").concat(t._id),target:"_blank"},o.a.createElement("div",{className:"block-description"},r.description),o.a.createElement("div",{className:"block-user"},"@",r.userId)),o.a.createElement("a",{className:"block-org-link",href:"https://bl.ocks.org/".concat(r.userId,"/").concat(t._id),target:"_blank"},"bl.ocks.org"),o.a.createElement("a",{className:"block-graph-link",href:"http://".concat(Q,":8080/?gist_id=").concat(t._id),target:"_blank"},"graph search"))});if(t.text)r=o.a.createElement("span",null,"Showing ",n.length,"/",a," of the most relevant blocks.");else{var c="desc"===t.sort_dir?"most":"least",s="updated_at"===t.sort?"updated":"created";r=o.a.createElement("span",null,"Showing ",n.length,"/",a," of the ",c," recently"," ",s," blocks.")}return this.props.loading&&(i=o.a.createElement("div",{className:".loading"},o.a.createElement(U,null))),o.a.createElement("div",{id:"results"},o.a.createElement("div",{className:"summary"},r),o.a.createElement("div",{className:"blocks"},l),i)}}])&&Y(n.prototype,r),i&&Y(n,i),t}(),te=Object(u.connect)(function(e,t){return{query:e.query,results:e.results,totalResults:e.totalResults,screenshots:e.screenshots,loading:e.loading}},function(e){return{}})(ee);function ne(e,t){var n;return function(){var r=this,o=arguments;clearTimeout(n),n=setTimeout(function(){return e.apply(r,o)},t)}}n(69);function re(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){de(e,t,n[t])})}return e}function oe(e){return(oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ie(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ae(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ue(e,t,n){return t&&ae(e.prototype,t),n&&ae(e,n),e}function le(e,t){return!t||"object"!==oe(t)&&"function"!=typeof t?se(e):t}function ce(e){return(ce=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function se(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function fe(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&pe(e,t)}function pe(e,t){return(pe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function de(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var he=function(e){function t(){var e,n;ie(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return de(se(n=le(this,(e=ce(t)).call.apply(e,[this].concat(o)))),"handleClick",function(){n.props.handleAPISelect(n.props.api.substring(2))}),n}return fe(t,o.a.Component),ue(t,[{key:"render",value:function(){return o.a.createElement("div",{className:"ac-api",onClick:this.handleClick},this.props.api)}}]),t}(),ve=function(e){function t(){var e,n;ie(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return de(se(n=le(this,(e=ce(t)).call.apply(e,[this].concat(o)))),"handleClick",function(){n.props.handleAPIDeselect(n.props.api)}),n}return fe(t,o.a.Component),ue(t,[{key:"render",value:function(){return o.a.createElement("div",{className:"selected-api"},o.a.createElement("span",null,this.props.api)," ",o.a.createElement("span",{className:"remove-api",onClick:this.handleClick},o.a.createElement(I,null))," ")}}]),t}(),ge=function(e){function t(){var e,n;ie(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return de(se(n=le(this,(e=ce(t)).call.apply(e,[this].concat(o)))),"state",{apiValue:"",apiPos:{top:0,left:0},showApis:!1,moduleValue:"",modulePos:{top:0,left:0},showModules:!1}),de(se(n),"handleSearch",function(){var e=n.refs.search.value,t={method:"text",text:e};e||(t.sort="created_at",t.sort_dir="desc");var r=re({},n.props.query,t),o=new URL(window.location),i=new URLSearchParams(o.search);r.text&&i.append("text",encodeURIComponent(r.text)),r.user&&i.append("user",encodeURIComponent(r.user)),r.d3version&&i.append("d3version",encodeURIComponent(r.d3version)),r.api.length&&i.append("api",encodeURIComponent(r.api)),r.d3modules.length&&i.append("d3modules",encodeURIComponent(r.d3modules)),n.props.getSearch(r)}),de(se(n),"handleObservableSearch",function(){var e=n.refs.search.value,t=encodeURIComponent(e),r="https://beta.observablehq.com/search?query=".concat(t);window.open(r)}),de(se(n),"handleKeyDown",function(e){13===e.nativeEvent.keyCode&&n.handleSearch()}),de(se(n),"handleTextChange",function(e){var t=n.refs.search.value,r=re({},n.props.query,{text:t});n.props.setQuery(r),n.handleSearch(),S("text",t)}),de(se(n),"handleThumbnailChange",function(){var e,t=n.refs.thumbnail.checked;e=re({},n.props.query,t?{filenames:["thumbnail.png"]}:{filenames:[]}),n.props.setQuery(e),S("thumb",t)}),de(se(n),"handleUserChange",function(){var e="".concat(n.refs.user.value).toLowerCase(),t=n.refs.user.value,r=re({},n.props.query,{user:e,userRaw:t});n.props.setQuery(r),n.handleSearch(),S("user",e)}),de(se(n),"handleUserKeyDown",function(e){13===e.nativeEvent.keyCode&&n.handleSearch()}),de(se(n),"handleVersionChange",function(){var e=n.refs.d3version.value;"any version"===e&&(e="");var t=re({},n.props.query,{d3version:e});n.props.setQuery(t);var r=se(n);setTimeout(function(){r.handleSearch(),S("d3version",e)})}),de(se(n),"onAPIFocus",function(){n.props.d3Apis.length||n.props.getAggregateD3API();var e=n.refs.api.getBoundingClientRect();n.setState({apiPos:{top:e.bottom,left:e.left},showApis:!0})}),de(se(n),"onAPIBlur",function(){var e=se(n);setTimeout(function(){e.setState({showApis:!1})},250)}),de(se(n),"handleAPIChange",function(){var e=n.refs.api.value;n.setState({apiValue:e})}),de(se(n),"handleAPIKeyDown",function(e){27===e.nativeEvent.keyCode&&n.setState({showApis:!1})}),de(se(n),"handleAPISelect",function(e){if(n.setState({showApis:!1}),!(n.props.query.api.indexOf(e)>=0)){var t=n.props.query.api.concat([e]);n.props.setQuery(re({},n.props.query,{api:t})),n.refs.api.value="";var r=se(n);setTimeout(function(){r.handleSearch(),S("api",t)})}}),de(se(n),"handleAPIDeselect",function(e){var t=n.props.query.api.indexOf(e);if(!(t<0)){var r=n.props.query.api.concat([]);r.splice(t,1),n.props.setQuery(re({},n.props.query,{api:r}));var o=se(n);setTimeout(function(){o.handleSearch(),S("api",r)})}}),de(se(n),"onModuleFocus",function(){n.props.d3Modules.length||n.props.getAggregateD3Modules();var e=n.refs.modules.getBoundingClientRect();n.setState({modulePos:{top:e.bottom,left:e.left},showModules:!0})}),de(se(n),"onModuleBlur",function(){var e=se(n);setTimeout(function(){e.setState({showModules:!1})},250)}),de(se(n),"handleModuleChange",function(){var e=n.refs.modules.value;n.setState({moduleValue:e})}),de(se(n),"handleModuleKeyDown",function(e){27===e.nativeEvent.keyCode&&n.setState({showModules:!1})}),de(se(n),"handleModuleSelect",function(e){if(n.setState({showModules:!1}),!(n.props.query.d3modules.indexOf(e)>=0)){var t=n.props.query.d3modules.concat([e]);n.props.setQuery(re({},n.props.query,{d3modules:t})),n.refs.modules.value="";var r=se(n);setTimeout(function(){r.handleSearch(),S("d3modules",t)})}}),de(se(n),"handleModuleDeselect",function(e){var t=n.props.query.d3modules.indexOf(e);if(!(t<0)){var r=n.props.query.d3modules.concat([]);r.splice(t,1),n.props.setQuery(re({},n.props.query,{d3modules:r}));var o=se(n);setTimeout(function(){o.handleSearch(),S("d3modules",r)})}}),n}return fe(t,o.a.Component),ue(t,[{key:"componentWillMount",value:function(){this.debouncedHandleTextChange=ne(this.handleTextChange,1200),this.debouncedHandleUserChange=ne(this.handleUserChange,1200)}},{key:"componentDidUpdate",value:function(){this.refs&&((this.refs.search||""===this.refs.search)&&(this.refs.search.value=this.props.query.text),this.refs.user&&this.props.query.userRaw&&(this.refs.user.value=this.props.query.userRaw))}},{key:"render",value:function(){var e=this,t=[],n=this.props.query.api;n&&n.forEach(function(n){t.push(o.a.createElement(ve,{key:"fn-".concat(n),api:n,handleAPIDeselect:e.handleAPIDeselect}))});var r=[],i=this.props.d3Apis,a=this.state.apiValue;if(i.length){var u=[];i.forEach(function(e){(!a||(a&&e.key.indexOf(a))>=0)&&u.push(e)}),(u=u.sort(function(e,t){return t.doc_count-e.doc_count}).slice(0,20)).forEach(function(t){r.push(o.a.createElement(he,{key:"ac-fn-".concat(t.key),api:"+ ".concat(t.key),handleAPISelect:e.handleAPISelect}))})}var l={display:this.state.showApis?"block":"none",top:"".concat(this.state.apiPos.top,"px"),left:"".concat(this.state.apiPos.left,"px")},c=[],s=this.props.query.d3modules;s&&s.forEach(function(t){c.push(o.a.createElement(ve,{key:"module-".concat(t),api:t,handleAPIDeselect:e.handleModuleDeselect}))});var f=[],p=this.props.d3Modules,d=this.state.moduleValue;if(p.length){u=[];p.forEach(function(e){(!d||(d&&e.key.indexOf(d))>=0)&&u.push(e)}),(u=u.sort(function(e,t){return t.doc_count-e.doc_count}).slice(0,20)).forEach(function(t){f.push(o.a.createElement(he,{key:"ac-module-".concat(t.key),api:"+ ".concat(t.key),handleAPISelect:e.handleModuleSelect}))})}var h={display:this.state.showModules?"block":"none",top:"".concat(this.state.modulePos.top,"px"),left:"".concat(this.state.modulePos.left,"px")};return o.a.createElement("div",{id:"searchbar"},o.a.createElement("input",{ref:"search",className:"text-search",type:"text",onKeyDown:this.handleKeyDown,onChange:this.debouncedHandleTextChange}),o.a.createElement("a",{className:"search-button",onClick:this.handleSearch},"Search"),o.a.createElement("a",{className:"search-button-emoji",onClick:this.handleObservableSearch},"📓"),o.a.createElement("input",{ref:"user",className:"user-search",type:"text",placeholder:"username",onKeyDown:this.handleUserKeyDown,onChange:this.debouncedHandleUserChange}),o.a.createElement("input",{ref:"api",className:"api-autocomplete",type:"text",placeholder:"API functions: d3...",onFocus:this.onAPIFocus,onBlur:this.onAPIBlur,onKeyDown:this.handleAPIKeyDown,onChange:this.handleAPIChange}),o.a.createElement("input",{ref:"modules",className:"modules-autocomplete",type:"text",placeholder:"d3-modules",onFocus:this.onModuleFocus,onBlur:this.onModuleBlur,onKeyDown:this.handleModuleKeyDown,onChange:this.handleModuleChange}),o.a.createElement("select",{ref:"d3version",value:this.props.query.d3version,onChange:this.handleVersionChange},o.a.createElement("option",{defaultValue:""},"any version"),o.a.createElement("option",{defaultValue:"v5"},"v5"),o.a.createElement("option",{defaultValue:"v4"},"v4"),o.a.createElement("option",{defaultValue:"v3"},"v3"),o.a.createElement("option",{defaultValue:"v2"},"v2")),o.a.createElement("div",null,o.a.createElement("input",{ref:"thumbnail",id:"thumbnail-checkbox",className:"thumbnail-checkbox",type:"checkbox",checked:this.props.query.filenames&&this.props.query.filenames.includes("thumbnail.png"),onChange:this.handleThumbnailChange}),o.a.createElement("label",{htmlFor:"thumbnail-checkbox"},"with thumbnail image")),t.length>0&&o.a.createElement("div",{id:"selected-apis"},t),c.length>0&&o.a.createElement("div",{id:"selected-modules"},c),o.a.createElement("div",{id:"autocomplete-apis",style:l},r),o.a.createElement("div",{id:"autocomplete-modules",style:h},f))}}]),t}();function me(e){return(me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ye(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){be(e,t,n[t])})}return e}function be(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function xe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function we(e,t){return!t||"object"!==me(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _e(e){return(_e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ke(e,t){return(ke=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ee=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),we(this,_e(t).apply(this,arguments))}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ke(e,t)}(t,o.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){var e=decodeURIComponent(window.location.hash);e&&(e.slice(1).split(";").forEach(function(e){var t=e.split("=");S(t[0],t[1])}),history.pushState("",document.title,window.location.pathname+window.location.search));var t,n,r=ye({},this.props.query),o=new URL(window.location),i=new URLSearchParams(o.search),a=!0,u=!1,l=void 0;try{for(var c,s=i.entries()[Symbol.iterator]();!(a=(c=s.next()).done);a=!0){var f=c.value;switch(t=f[0],n=f[1],t){case"text":r.text=n;break;case"user":r.user=n,r.userRaw=n;break;case"d3version":r.d3version=n;break;case"api":r.api=n.split(",");break;case"d3modules":r.d3modules=n.split(",");break;case"thumb":if(Array.isArray(r.filenames)||(r.filenames=[]),"true"===n)r.filenames.push("thumbnail.png");else{var p=r.filenames.indexOf("thumbnail.png");p>-1&&r.filenames.splice(p,1)}}}}catch(e){u=!0,l=e}finally{try{a||null==s.return||s.return()}finally{if(u)throw l}}this.props.actions.getSearch(r),this.props.actions.getScreenshotList()}},{key:"render",value:function(){return o.a.createElement("div",{id:"search-container"},o.a.createElement(V,null),o.a.createElement(ge,{query:this.props.query,d3Apis:this.props.d3Apis,d3Modules:this.props.d3Modules,setQuery:this.props.actions.setQuery,getSearch:this.props.actions.getSearch,getAggregateD3API:this.props.actions.getAggregateD3API,getAggregateD3Modules:this.props.actions.getAggregateD3Modules}),o.a.createElement(te,{getPage:this.props.actions.getPage}),o.a.createElement("div",{id:"credits"},o.a.createElement("span",null,"Made with love for the ",o.a.createElement("a",{href:"https://d3js.org"},"d3.js")," ","community by ",o.a.createElement("a",{href:"https://twitter.com/enjalot"},"@enjalot"),","," ",o.a.createElement("a",{href:"https://twitter.com/micahstubbs"},"@micahstubbs")," and"," ",o.a.createElement("a",{href:"https://github.com/enjalot/blockbuilder-search/graphs/contributors"},"contributors")),o.a.createElement("br",null),o.a.createElement("span",null,"Hosted with love on"," ",o.a.createElement("a",{href:"https://cloud.google.com/community/"},"Google Cloud Platform"))),o.a.createElement(y.a,null))}}])&&xe(n.prototype,r),i&&xe(n,i),t}(),Se=Object(u.connect)(function(e){return ye({},e)},function(e){return{actions:Object(l.bindActionCreators)(E,e)}})(Ee),Me=o.a.createElement(u.Provider,{store:g},o.a.createElement(Se,null));a.a.render(Me,document.getElementById("search"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,